
LineRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a38  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003b44  08003b44  00013b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b68  08003b68  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003b68  08003b68  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b68  08003b68  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b68  08003b68  00013b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b6c  08003b6c  00013b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003b70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000014  08003b84  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08003b84  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e01  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000171c  00000000  00000000  00029e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000af0  00000000  00000000  0002b560  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a38  00000000  00000000  0002c050  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016cb8  00000000  00000000  0002ca88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008a8a  00000000  00000000  00043740  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008694d  00000000  00000000  0004c1ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d2b17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003018  00000000  00000000  000d2b94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b2c 	.word	0x08003b2c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08003b2c 	.word	0x08003b2c

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_d2f>:
 80004c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80004cc:	bf24      	itt	cs
 80004ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80004d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80004d6:	d90d      	bls.n	80004f4 <__aeabi_d2f+0x30>
 80004d8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80004dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80004e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80004e4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80004e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80004ec:	bf08      	it	eq
 80004ee:	f020 0001 	biceq.w	r0, r0, #1
 80004f2:	4770      	bx	lr
 80004f4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80004f8:	d121      	bne.n	800053e <__aeabi_d2f+0x7a>
 80004fa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80004fe:	bfbc      	itt	lt
 8000500:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000504:	4770      	bxlt	lr
 8000506:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800050e:	f1c2 0218 	rsb	r2, r2, #24
 8000512:	f1c2 0c20 	rsb	ip, r2, #32
 8000516:	fa10 f30c 	lsls.w	r3, r0, ip
 800051a:	fa20 f002 	lsr.w	r0, r0, r2
 800051e:	bf18      	it	ne
 8000520:	f040 0001 	orrne.w	r0, r0, #1
 8000524:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000528:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800052c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000530:	ea40 000c 	orr.w	r0, r0, ip
 8000534:	fa23 f302 	lsr.w	r3, r3, r2
 8000538:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800053c:	e7cc      	b.n	80004d8 <__aeabi_d2f+0x14>
 800053e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000542:	d107      	bne.n	8000554 <__aeabi_d2f+0x90>
 8000544:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000548:	bf1e      	ittt	ne
 800054a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800054e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000552:	4770      	bxne	lr
 8000554:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000558:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800055c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <__aeabi_frsub>:
 8000564:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000568:	e002      	b.n	8000570 <__addsf3>
 800056a:	bf00      	nop

0800056c <__aeabi_fsub>:
 800056c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000570 <__addsf3>:
 8000570:	0042      	lsls	r2, r0, #1
 8000572:	bf1f      	itttt	ne
 8000574:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000578:	ea92 0f03 	teqne	r2, r3
 800057c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000580:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000584:	d06a      	beq.n	800065c <__addsf3+0xec>
 8000586:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800058a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800058e:	bfc1      	itttt	gt
 8000590:	18d2      	addgt	r2, r2, r3
 8000592:	4041      	eorgt	r1, r0
 8000594:	4048      	eorgt	r0, r1
 8000596:	4041      	eorgt	r1, r0
 8000598:	bfb8      	it	lt
 800059a:	425b      	neglt	r3, r3
 800059c:	2b19      	cmp	r3, #25
 800059e:	bf88      	it	hi
 80005a0:	4770      	bxhi	lr
 80005a2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80005a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80005ae:	bf18      	it	ne
 80005b0:	4240      	negne	r0, r0
 80005b2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005b6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80005ba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80005be:	bf18      	it	ne
 80005c0:	4249      	negne	r1, r1
 80005c2:	ea92 0f03 	teq	r2, r3
 80005c6:	d03f      	beq.n	8000648 <__addsf3+0xd8>
 80005c8:	f1a2 0201 	sub.w	r2, r2, #1
 80005cc:	fa41 fc03 	asr.w	ip, r1, r3
 80005d0:	eb10 000c 	adds.w	r0, r0, ip
 80005d4:	f1c3 0320 	rsb	r3, r3, #32
 80005d8:	fa01 f103 	lsl.w	r1, r1, r3
 80005dc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80005e0:	d502      	bpl.n	80005e8 <__addsf3+0x78>
 80005e2:	4249      	negs	r1, r1
 80005e4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80005e8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80005ec:	d313      	bcc.n	8000616 <__addsf3+0xa6>
 80005ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005f2:	d306      	bcc.n	8000602 <__addsf3+0x92>
 80005f4:	0840      	lsrs	r0, r0, #1
 80005f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005fa:	f102 0201 	add.w	r2, r2, #1
 80005fe:	2afe      	cmp	r2, #254	; 0xfe
 8000600:	d251      	bcs.n	80006a6 <__addsf3+0x136>
 8000602:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000606:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800060a:	bf08      	it	eq
 800060c:	f020 0001 	biceq.w	r0, r0, #1
 8000610:	ea40 0003 	orr.w	r0, r0, r3
 8000614:	4770      	bx	lr
 8000616:	0049      	lsls	r1, r1, #1
 8000618:	eb40 0000 	adc.w	r0, r0, r0
 800061c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000620:	f1a2 0201 	sub.w	r2, r2, #1
 8000624:	d1ed      	bne.n	8000602 <__addsf3+0x92>
 8000626:	fab0 fc80 	clz	ip, r0
 800062a:	f1ac 0c08 	sub.w	ip, ip, #8
 800062e:	ebb2 020c 	subs.w	r2, r2, ip
 8000632:	fa00 f00c 	lsl.w	r0, r0, ip
 8000636:	bfaa      	itet	ge
 8000638:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800063c:	4252      	neglt	r2, r2
 800063e:	4318      	orrge	r0, r3
 8000640:	bfbc      	itt	lt
 8000642:	40d0      	lsrlt	r0, r2
 8000644:	4318      	orrlt	r0, r3
 8000646:	4770      	bx	lr
 8000648:	f092 0f00 	teq	r2, #0
 800064c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000650:	bf06      	itte	eq
 8000652:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000656:	3201      	addeq	r2, #1
 8000658:	3b01      	subne	r3, #1
 800065a:	e7b5      	b.n	80005c8 <__addsf3+0x58>
 800065c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000660:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000664:	bf18      	it	ne
 8000666:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800066a:	d021      	beq.n	80006b0 <__addsf3+0x140>
 800066c:	ea92 0f03 	teq	r2, r3
 8000670:	d004      	beq.n	800067c <__addsf3+0x10c>
 8000672:	f092 0f00 	teq	r2, #0
 8000676:	bf08      	it	eq
 8000678:	4608      	moveq	r0, r1
 800067a:	4770      	bx	lr
 800067c:	ea90 0f01 	teq	r0, r1
 8000680:	bf1c      	itt	ne
 8000682:	2000      	movne	r0, #0
 8000684:	4770      	bxne	lr
 8000686:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800068a:	d104      	bne.n	8000696 <__addsf3+0x126>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	bf28      	it	cs
 8000690:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000694:	4770      	bx	lr
 8000696:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800069a:	bf3c      	itt	cc
 800069c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80006a0:	4770      	bxcc	lr
 80006a2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006a6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80006aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006ae:	4770      	bx	lr
 80006b0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80006b4:	bf16      	itet	ne
 80006b6:	4608      	movne	r0, r1
 80006b8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80006bc:	4601      	movne	r1, r0
 80006be:	0242      	lsls	r2, r0, #9
 80006c0:	bf06      	itte	eq
 80006c2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80006c6:	ea90 0f01 	teqeq	r0, r1
 80006ca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80006ce:	4770      	bx	lr

080006d0 <__aeabi_ui2f>:
 80006d0:	f04f 0300 	mov.w	r3, #0
 80006d4:	e004      	b.n	80006e0 <__aeabi_i2f+0x8>
 80006d6:	bf00      	nop

080006d8 <__aeabi_i2f>:
 80006d8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	bf48      	it	mi
 80006de:	4240      	negmi	r0, r0
 80006e0:	ea5f 0c00 	movs.w	ip, r0
 80006e4:	bf08      	it	eq
 80006e6:	4770      	bxeq	lr
 80006e8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80006ec:	4601      	mov	r1, r0
 80006ee:	f04f 0000 	mov.w	r0, #0
 80006f2:	e01c      	b.n	800072e <__aeabi_l2f+0x2a>

080006f4 <__aeabi_ul2f>:
 80006f4:	ea50 0201 	orrs.w	r2, r0, r1
 80006f8:	bf08      	it	eq
 80006fa:	4770      	bxeq	lr
 80006fc:	f04f 0300 	mov.w	r3, #0
 8000700:	e00a      	b.n	8000718 <__aeabi_l2f+0x14>
 8000702:	bf00      	nop

08000704 <__aeabi_l2f>:
 8000704:	ea50 0201 	orrs.w	r2, r0, r1
 8000708:	bf08      	it	eq
 800070a:	4770      	bxeq	lr
 800070c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000710:	d502      	bpl.n	8000718 <__aeabi_l2f+0x14>
 8000712:	4240      	negs	r0, r0
 8000714:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000718:	ea5f 0c01 	movs.w	ip, r1
 800071c:	bf02      	ittt	eq
 800071e:	4684      	moveq	ip, r0
 8000720:	4601      	moveq	r1, r0
 8000722:	2000      	moveq	r0, #0
 8000724:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000728:	bf08      	it	eq
 800072a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800072e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000732:	fabc f28c 	clz	r2, ip
 8000736:	3a08      	subs	r2, #8
 8000738:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800073c:	db10      	blt.n	8000760 <__aeabi_l2f+0x5c>
 800073e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000742:	4463      	add	r3, ip
 8000744:	fa00 fc02 	lsl.w	ip, r0, r2
 8000748:	f1c2 0220 	rsb	r2, r2, #32
 800074c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000750:	fa20 f202 	lsr.w	r2, r0, r2
 8000754:	eb43 0002 	adc.w	r0, r3, r2
 8000758:	bf08      	it	eq
 800075a:	f020 0001 	biceq.w	r0, r0, #1
 800075e:	4770      	bx	lr
 8000760:	f102 0220 	add.w	r2, r2, #32
 8000764:	fa01 fc02 	lsl.w	ip, r1, r2
 8000768:	f1c2 0220 	rsb	r2, r2, #32
 800076c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000770:	fa21 f202 	lsr.w	r2, r1, r2
 8000774:	eb43 0002 	adc.w	r0, r3, r2
 8000778:	bf08      	it	eq
 800077a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800077e:	4770      	bx	lr

08000780 <__aeabi_fmul>:
 8000780:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000784:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000788:	bf1e      	ittt	ne
 800078a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800078e:	ea92 0f0c 	teqne	r2, ip
 8000792:	ea93 0f0c 	teqne	r3, ip
 8000796:	d06f      	beq.n	8000878 <__aeabi_fmul+0xf8>
 8000798:	441a      	add	r2, r3
 800079a:	ea80 0c01 	eor.w	ip, r0, r1
 800079e:	0240      	lsls	r0, r0, #9
 80007a0:	bf18      	it	ne
 80007a2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80007a6:	d01e      	beq.n	80007e6 <__aeabi_fmul+0x66>
 80007a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80007ac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80007b0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80007b4:	fba0 3101 	umull	r3, r1, r0, r1
 80007b8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80007bc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80007c0:	bf3e      	ittt	cc
 80007c2:	0049      	lslcc	r1, r1, #1
 80007c4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80007c8:	005b      	lslcc	r3, r3, #1
 80007ca:	ea40 0001 	orr.w	r0, r0, r1
 80007ce:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80007d2:	2afd      	cmp	r2, #253	; 0xfd
 80007d4:	d81d      	bhi.n	8000812 <__aeabi_fmul+0x92>
 80007d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80007da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007de:	bf08      	it	eq
 80007e0:	f020 0001 	biceq.w	r0, r0, #1
 80007e4:	4770      	bx	lr
 80007e6:	f090 0f00 	teq	r0, #0
 80007ea:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80007ee:	bf08      	it	eq
 80007f0:	0249      	lsleq	r1, r1, #9
 80007f2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80007f6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80007fa:	3a7f      	subs	r2, #127	; 0x7f
 80007fc:	bfc2      	ittt	gt
 80007fe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000802:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000806:	4770      	bxgt	lr
 8000808:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800080c:	f04f 0300 	mov.w	r3, #0
 8000810:	3a01      	subs	r2, #1
 8000812:	dc5d      	bgt.n	80008d0 <__aeabi_fmul+0x150>
 8000814:	f112 0f19 	cmn.w	r2, #25
 8000818:	bfdc      	itt	le
 800081a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800081e:	4770      	bxle	lr
 8000820:	f1c2 0200 	rsb	r2, r2, #0
 8000824:	0041      	lsls	r1, r0, #1
 8000826:	fa21 f102 	lsr.w	r1, r1, r2
 800082a:	f1c2 0220 	rsb	r2, r2, #32
 800082e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000832:	ea5f 0031 	movs.w	r0, r1, rrx
 8000836:	f140 0000 	adc.w	r0, r0, #0
 800083a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800083e:	bf08      	it	eq
 8000840:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000844:	4770      	bx	lr
 8000846:	f092 0f00 	teq	r2, #0
 800084a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800084e:	bf02      	ittt	eq
 8000850:	0040      	lsleq	r0, r0, #1
 8000852:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000856:	3a01      	subeq	r2, #1
 8000858:	d0f9      	beq.n	800084e <__aeabi_fmul+0xce>
 800085a:	ea40 000c 	orr.w	r0, r0, ip
 800085e:	f093 0f00 	teq	r3, #0
 8000862:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000866:	bf02      	ittt	eq
 8000868:	0049      	lsleq	r1, r1, #1
 800086a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800086e:	3b01      	subeq	r3, #1
 8000870:	d0f9      	beq.n	8000866 <__aeabi_fmul+0xe6>
 8000872:	ea41 010c 	orr.w	r1, r1, ip
 8000876:	e78f      	b.n	8000798 <__aeabi_fmul+0x18>
 8000878:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800087c:	ea92 0f0c 	teq	r2, ip
 8000880:	bf18      	it	ne
 8000882:	ea93 0f0c 	teqne	r3, ip
 8000886:	d00a      	beq.n	800089e <__aeabi_fmul+0x11e>
 8000888:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800088c:	bf18      	it	ne
 800088e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000892:	d1d8      	bne.n	8000846 <__aeabi_fmul+0xc6>
 8000894:	ea80 0001 	eor.w	r0, r0, r1
 8000898:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800089c:	4770      	bx	lr
 800089e:	f090 0f00 	teq	r0, #0
 80008a2:	bf17      	itett	ne
 80008a4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80008a8:	4608      	moveq	r0, r1
 80008aa:	f091 0f00 	teqne	r1, #0
 80008ae:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80008b2:	d014      	beq.n	80008de <__aeabi_fmul+0x15e>
 80008b4:	ea92 0f0c 	teq	r2, ip
 80008b8:	d101      	bne.n	80008be <__aeabi_fmul+0x13e>
 80008ba:	0242      	lsls	r2, r0, #9
 80008bc:	d10f      	bne.n	80008de <__aeabi_fmul+0x15e>
 80008be:	ea93 0f0c 	teq	r3, ip
 80008c2:	d103      	bne.n	80008cc <__aeabi_fmul+0x14c>
 80008c4:	024b      	lsls	r3, r1, #9
 80008c6:	bf18      	it	ne
 80008c8:	4608      	movne	r0, r1
 80008ca:	d108      	bne.n	80008de <__aeabi_fmul+0x15e>
 80008cc:	ea80 0001 	eor.w	r0, r0, r1
 80008d0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008dc:	4770      	bx	lr
 80008de:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008e2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80008e6:	4770      	bx	lr

080008e8 <__aeabi_fdiv>:
 80008e8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008ec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80008f0:	bf1e      	ittt	ne
 80008f2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80008f6:	ea92 0f0c 	teqne	r2, ip
 80008fa:	ea93 0f0c 	teqne	r3, ip
 80008fe:	d069      	beq.n	80009d4 <__aeabi_fdiv+0xec>
 8000900:	eba2 0203 	sub.w	r2, r2, r3
 8000904:	ea80 0c01 	eor.w	ip, r0, r1
 8000908:	0249      	lsls	r1, r1, #9
 800090a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800090e:	d037      	beq.n	8000980 <__aeabi_fdiv+0x98>
 8000910:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000914:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000918:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800091c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000920:	428b      	cmp	r3, r1
 8000922:	bf38      	it	cc
 8000924:	005b      	lslcc	r3, r3, #1
 8000926:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800092a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800092e:	428b      	cmp	r3, r1
 8000930:	bf24      	itt	cs
 8000932:	1a5b      	subcs	r3, r3, r1
 8000934:	ea40 000c 	orrcs.w	r0, r0, ip
 8000938:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800093c:	bf24      	itt	cs
 800093e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000942:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000946:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800094a:	bf24      	itt	cs
 800094c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000950:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000954:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000958:	bf24      	itt	cs
 800095a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800095e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000962:	011b      	lsls	r3, r3, #4
 8000964:	bf18      	it	ne
 8000966:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800096a:	d1e0      	bne.n	800092e <__aeabi_fdiv+0x46>
 800096c:	2afd      	cmp	r2, #253	; 0xfd
 800096e:	f63f af50 	bhi.w	8000812 <__aeabi_fmul+0x92>
 8000972:	428b      	cmp	r3, r1
 8000974:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000978:	bf08      	it	eq
 800097a:	f020 0001 	biceq.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000984:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000988:	327f      	adds	r2, #127	; 0x7f
 800098a:	bfc2      	ittt	gt
 800098c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000990:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000994:	4770      	bxgt	lr
 8000996:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800099a:	f04f 0300 	mov.w	r3, #0
 800099e:	3a01      	subs	r2, #1
 80009a0:	e737      	b.n	8000812 <__aeabi_fmul+0x92>
 80009a2:	f092 0f00 	teq	r2, #0
 80009a6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80009aa:	bf02      	ittt	eq
 80009ac:	0040      	lsleq	r0, r0, #1
 80009ae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80009b2:	3a01      	subeq	r2, #1
 80009b4:	d0f9      	beq.n	80009aa <__aeabi_fdiv+0xc2>
 80009b6:	ea40 000c 	orr.w	r0, r0, ip
 80009ba:	f093 0f00 	teq	r3, #0
 80009be:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009c2:	bf02      	ittt	eq
 80009c4:	0049      	lsleq	r1, r1, #1
 80009c6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80009ca:	3b01      	subeq	r3, #1
 80009cc:	d0f9      	beq.n	80009c2 <__aeabi_fdiv+0xda>
 80009ce:	ea41 010c 	orr.w	r1, r1, ip
 80009d2:	e795      	b.n	8000900 <__aeabi_fdiv+0x18>
 80009d4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80009d8:	ea92 0f0c 	teq	r2, ip
 80009dc:	d108      	bne.n	80009f0 <__aeabi_fdiv+0x108>
 80009de:	0242      	lsls	r2, r0, #9
 80009e0:	f47f af7d 	bne.w	80008de <__aeabi_fmul+0x15e>
 80009e4:	ea93 0f0c 	teq	r3, ip
 80009e8:	f47f af70 	bne.w	80008cc <__aeabi_fmul+0x14c>
 80009ec:	4608      	mov	r0, r1
 80009ee:	e776      	b.n	80008de <__aeabi_fmul+0x15e>
 80009f0:	ea93 0f0c 	teq	r3, ip
 80009f4:	d104      	bne.n	8000a00 <__aeabi_fdiv+0x118>
 80009f6:	024b      	lsls	r3, r1, #9
 80009f8:	f43f af4c 	beq.w	8000894 <__aeabi_fmul+0x114>
 80009fc:	4608      	mov	r0, r1
 80009fe:	e76e      	b.n	80008de <__aeabi_fmul+0x15e>
 8000a00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a04:	bf18      	it	ne
 8000a06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a0a:	d1ca      	bne.n	80009a2 <__aeabi_fdiv+0xba>
 8000a0c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a10:	f47f af5c 	bne.w	80008cc <__aeabi_fmul+0x14c>
 8000a14:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a18:	f47f af3c 	bne.w	8000894 <__aeabi_fmul+0x114>
 8000a1c:	e75f      	b.n	80008de <__aeabi_fmul+0x15e>
 8000a1e:	bf00      	nop

08000a20 <__gesf2>:
 8000a20:	f04f 3cff 	mov.w	ip, #4294967295
 8000a24:	e006      	b.n	8000a34 <__cmpsf2+0x4>
 8000a26:	bf00      	nop

08000a28 <__lesf2>:
 8000a28:	f04f 0c01 	mov.w	ip, #1
 8000a2c:	e002      	b.n	8000a34 <__cmpsf2+0x4>
 8000a2e:	bf00      	nop

08000a30 <__cmpsf2>:
 8000a30:	f04f 0c01 	mov.w	ip, #1
 8000a34:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a38:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a3c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a44:	bf18      	it	ne
 8000a46:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a4a:	d011      	beq.n	8000a70 <__cmpsf2+0x40>
 8000a4c:	b001      	add	sp, #4
 8000a4e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000a52:	bf18      	it	ne
 8000a54:	ea90 0f01 	teqne	r0, r1
 8000a58:	bf58      	it	pl
 8000a5a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000a5e:	bf88      	it	hi
 8000a60:	17c8      	asrhi	r0, r1, #31
 8000a62:	bf38      	it	cc
 8000a64:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000a68:	bf18      	it	ne
 8000a6a:	f040 0001 	orrne.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a74:	d102      	bne.n	8000a7c <__cmpsf2+0x4c>
 8000a76:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000a7a:	d105      	bne.n	8000a88 <__cmpsf2+0x58>
 8000a7c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000a80:	d1e4      	bne.n	8000a4c <__cmpsf2+0x1c>
 8000a82:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000a86:	d0e1      	beq.n	8000a4c <__cmpsf2+0x1c>
 8000a88:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop

08000a90 <__aeabi_cfrcmple>:
 8000a90:	4684      	mov	ip, r0
 8000a92:	4608      	mov	r0, r1
 8000a94:	4661      	mov	r1, ip
 8000a96:	e7ff      	b.n	8000a98 <__aeabi_cfcmpeq>

08000a98 <__aeabi_cfcmpeq>:
 8000a98:	b50f      	push	{r0, r1, r2, r3, lr}
 8000a9a:	f7ff ffc9 	bl	8000a30 <__cmpsf2>
 8000a9e:	2800      	cmp	r0, #0
 8000aa0:	bf48      	it	mi
 8000aa2:	f110 0f00 	cmnmi.w	r0, #0
 8000aa6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000aa8 <__aeabi_fcmpeq>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff fff4 	bl	8000a98 <__aeabi_cfcmpeq>
 8000ab0:	bf0c      	ite	eq
 8000ab2:	2001      	moveq	r0, #1
 8000ab4:	2000      	movne	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_fcmplt>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffea 	bl	8000a98 <__aeabi_cfcmpeq>
 8000ac4:	bf34      	ite	cc
 8000ac6:	2001      	movcc	r0, #1
 8000ac8:	2000      	movcs	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fcmple>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffe0 	bl	8000a98 <__aeabi_cfcmpeq>
 8000ad8:	bf94      	ite	ls
 8000ada:	2001      	movls	r0, #1
 8000adc:	2000      	movhi	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_fcmpge>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffd2 	bl	8000a90 <__aeabi_cfrcmple>
 8000aec:	bf94      	ite	ls
 8000aee:	2001      	movls	r0, #1
 8000af0:	2000      	movhi	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_fcmpgt>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffc8 	bl	8000a90 <__aeabi_cfrcmple>
 8000b00:	bf34      	ite	cc
 8000b02:	2001      	movcc	r0, #1
 8000b04:	2000      	movcs	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_f2uiz>:
 8000b0c:	0042      	lsls	r2, r0, #1
 8000b0e:	d20e      	bcs.n	8000b2e <__aeabi_f2uiz+0x22>
 8000b10:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b14:	d30b      	bcc.n	8000b2e <__aeabi_f2uiz+0x22>
 8000b16:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b1a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b1e:	d409      	bmi.n	8000b34 <__aeabi_f2uiz+0x28>
 8000b20:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b28:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2c:	4770      	bx	lr
 8000b2e:	f04f 0000 	mov.w	r0, #0
 8000b32:	4770      	bx	lr
 8000b34:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b38:	d101      	bne.n	8000b3e <__aeabi_f2uiz+0x32>
 8000b3a:	0242      	lsls	r2, r0, #9
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_f2uiz+0x38>
 8000b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <PID_Init>:
float throttle= 100; //rpm
uint8_t TCR_status=0;


void PID_Init(float _Kp,float _Ki,float _Kd,float _Tsample)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
 8000b58:	603b      	str	r3, [r7, #0]

	pre_I_Part=0;
 8000b5a:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <PID_Init+0x68>)
 8000b5c:	f04f 0200 	mov.w	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
	I_part=0;
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <PID_Init+0x6c>)
 8000b64:	f04f 0200 	mov.w	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
	D_part=0;
 8000b6a:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <PID_Init+0x70>)
 8000b6c:	f04f 0200 	mov.w	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
	pre_Error=0;
 8000b72:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <PID_Init+0x74>)
 8000b74:	f04f 0200 	mov.w	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
	Error=0;
 8000b7a:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <PID_Init+0x78>)
 8000b7c:	f04f 0200 	mov.w	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
	Output=0;
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <PID_Init+0x7c>)
 8000b84:	f04f 0200 	mov.w	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
	PID=0;
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <PID_Init+0x80>)
 8000b8c:	f04f 0200 	mov.w	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
	Kd=_Kd;
 8000b92:	4a0f      	ldr	r2, [pc, #60]	; (8000bd0 <PID_Init+0x84>)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6013      	str	r3, [r2, #0]
	Ki=_Ki;
 8000b98:	4a0e      	ldr	r2, [pc, #56]	; (8000bd4 <PID_Init+0x88>)
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	6013      	str	r3, [r2, #0]
	Kp=_Kp;
 8000b9e:	4a0e      	ldr	r2, [pc, #56]	; (8000bd8 <PID_Init+0x8c>)
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	6013      	str	r3, [r2, #0]
	Tsample=_Tsample;
 8000ba4:	4a0d      	ldr	r2, [pc, #52]	; (8000bdc <PID_Init+0x90>)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	6013      	str	r3, [r2, #0]

}
 8000baa:	bf00      	nop
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	20000060 	.word	0x20000060
 8000bb8:	20000064 	.word	0x20000064
 8000bbc:	20000068 	.word	0x20000068
 8000bc0:	2000006c 	.word	0x2000006c
 8000bc4:	20000070 	.word	0x20000070
 8000bc8:	20000074 	.word	0x20000074
 8000bcc:	20000078 	.word	0x20000078
 8000bd0:	20000058 	.word	0x20000058
 8000bd4:	20000050 	.word	0x20000050
 8000bd8:	20000054 	.word	0x20000054
 8000bdc:	2000005c 	.word	0x2000005c

08000be0 <PID_Compute>:
void PID_Compute(float set_point,float feedback)
{
 8000be0:	b5b0      	push	{r4, r5, r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
    Error = (float)(1.0*set_point-1.0*feedback);
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff fc12 	bl	8000414 <__aeabi_f2d>
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460d      	mov	r5, r1
 8000bf4:	6838      	ldr	r0, [r7, #0]
 8000bf6:	f7ff fc0d 	bl	8000414 <__aeabi_f2d>
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	4620      	mov	r0, r4
 8000c00:	4629      	mov	r1, r5
 8000c02:	f7ff faa7 	bl	8000154 <__aeabi_dsub>
 8000c06:	4603      	mov	r3, r0
 8000c08:	460c      	mov	r4, r1
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	4621      	mov	r1, r4
 8000c0e:	f7ff fc59 	bl	80004c4 <__aeabi_d2f>
 8000c12:	4602      	mov	r2, r0
 8000c14:	4b2f      	ldr	r3, [pc, #188]	; (8000cd4 <PID_Compute+0xf4>)
 8000c16:	601a      	str	r2, [r3, #0]
    I_part = pre_I_Part + Error * Tsample;
 8000c18:	4b2e      	ldr	r3, [pc, #184]	; (8000cd4 <PID_Compute+0xf4>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4b2e      	ldr	r3, [pc, #184]	; (8000cd8 <PID_Compute+0xf8>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4619      	mov	r1, r3
 8000c22:	4610      	mov	r0, r2
 8000c24:	f7ff fdac 	bl	8000780 <__aeabi_fmul>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	4b2b      	ldr	r3, [pc, #172]	; (8000cdc <PID_Compute+0xfc>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4619      	mov	r1, r3
 8000c32:	4610      	mov	r0, r2
 8000c34:	f7ff fc9c 	bl	8000570 <__addsf3>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	4b28      	ldr	r3, [pc, #160]	; (8000ce0 <PID_Compute+0x100>)
 8000c3e:	601a      	str	r2, [r3, #0]
    D_part = 1.0*(Error - pre_Error)/Tsample;
 8000c40:	4b24      	ldr	r3, [pc, #144]	; (8000cd4 <PID_Compute+0xf4>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b27      	ldr	r3, [pc, #156]	; (8000ce4 <PID_Compute+0x104>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4610      	mov	r0, r2
 8000c4c:	f7ff fc8e 	bl	800056c <__aeabi_fsub>
 8000c50:	4603      	mov	r3, r0
 8000c52:	461a      	mov	r2, r3
 8000c54:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <PID_Compute+0xf8>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4610      	mov	r0, r2
 8000c5c:	f7ff fe44 	bl	80008e8 <__aeabi_fdiv>
 8000c60:	4603      	mov	r3, r0
 8000c62:	461a      	mov	r2, r3
 8000c64:	4b20      	ldr	r3, [pc, #128]	; (8000ce8 <PID_Compute+0x108>)
 8000c66:	601a      	str	r2, [r3, #0]
    PID = Kp*Error + Ki*I_part + Kd*D_part;
 8000c68:	4b20      	ldr	r3, [pc, #128]	; (8000cec <PID_Compute+0x10c>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <PID_Compute+0xf4>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4619      	mov	r1, r3
 8000c72:	4610      	mov	r0, r2
 8000c74:	f7ff fd84 	bl	8000780 <__aeabi_fmul>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	461c      	mov	r4, r3
 8000c7c:	4b1c      	ldr	r3, [pc, #112]	; (8000cf0 <PID_Compute+0x110>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <PID_Compute+0x100>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4619      	mov	r1, r3
 8000c86:	4610      	mov	r0, r2
 8000c88:	f7ff fd7a 	bl	8000780 <__aeabi_fmul>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4620      	mov	r0, r4
 8000c92:	f7ff fc6d 	bl	8000570 <__addsf3>
 8000c96:	4603      	mov	r3, r0
 8000c98:	461c      	mov	r4, r3
 8000c9a:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <PID_Compute+0x114>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <PID_Compute+0x108>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4610      	mov	r0, r2
 8000ca6:	f7ff fd6b 	bl	8000780 <__aeabi_fmul>
 8000caa:	4603      	mov	r3, r0
 8000cac:	4619      	mov	r1, r3
 8000cae:	4620      	mov	r0, r4
 8000cb0:	f7ff fc5e 	bl	8000570 <__addsf3>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <PID_Compute+0x118>)
 8000cba:	601a      	str	r2, [r3, #0]
    pre_Error = Error;
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <PID_Compute+0xf4>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a08      	ldr	r2, [pc, #32]	; (8000ce4 <PID_Compute+0x104>)
 8000cc2:	6013      	str	r3, [r2, #0]
    pre_I_Part = I_part;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <PID_Compute+0x100>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <PID_Compute+0xfc>)
 8000cca:	6013      	str	r3, [r2, #0]
}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bdb0      	pop	{r4, r5, r7, pc}
 8000cd4:	20000070 	.word	0x20000070
 8000cd8:	2000005c 	.word	0x2000005c
 8000cdc:	20000060 	.word	0x20000060
 8000ce0:	20000064 	.word	0x20000064
 8000ce4:	2000006c 	.word	0x2000006c
 8000ce8:	20000068 	.word	0x20000068
 8000cec:	20000054 	.word	0x20000054
 8000cf0:	20000050 	.word	0x20000050
 8000cf4:	20000058 	.word	0x20000058
 8000cf8:	20000078 	.word	0x20000078

08000cfc <Get_PID>:
float Get_PID(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
	return PID;
 8000d00:	4b02      	ldr	r3, [pc, #8]	; (8000d0c <Get_PID+0x10>)
 8000d02:	681b      	ldr	r3, [r3, #0]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	20000078 	.word	0x20000078

08000d10 <byte2float>:
	data_in[2]=t.data[2];
	data_in[3]=t.data[3];

}
void byte2float(float *floatout,uint8_t* datain)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
	union class2{
		float value_float;
		uint8_t data[4];
	};
  union class2 t;
	t.data[0]=datain[0];
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	733b      	strb	r3, [r7, #12]
	t.data[1]=datain[1];
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	785b      	ldrb	r3, [r3, #1]
 8000d24:	737b      	strb	r3, [r7, #13]
	t.data[2]=datain[2];
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	789b      	ldrb	r3, [r3, #2]
 8000d2a:	73bb      	strb	r3, [r7, #14]
	t.data[3]=datain[3];
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	78db      	ldrb	r3, [r3, #3]
 8000d30:	73fb      	strb	r3, [r7, #15]
	*floatout=t.value_float;
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	601a      	str	r2, [r3, #0]

}
 8000d38:	bf00      	nop
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr
	...

08000d44 <CANbus_Transmit>:
	*short_output= tar.short_value;

}

void CANbus_Transmit(uint32_t StdID, uint8_t can_DLC,uint8_t* can_Data)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	607a      	str	r2, [r7, #4]
 8000d50:	72fb      	strb	r3, [r7, #11]
	uint32_t TransmitMailbox;
	TxMessage.StdId=StdID;
 8000d52:	4a18      	ldr	r2, [pc, #96]	; (8000db4 <CANbus_Transmit+0x70>)
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	6013      	str	r3, [r2, #0]
	TxMessage.ExtId=0;
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <CANbus_Transmit+0x70>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	605a      	str	r2, [r3, #4]
	TxMessage.RTR=CAN_RTR_DATA;
 8000d5e:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <CANbus_Transmit+0x70>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	60da      	str	r2, [r3, #12]
	TxMessage.DLC=can_DLC;
 8000d64:	7afb      	ldrb	r3, [r7, #11]
 8000d66:	4a13      	ldr	r2, [pc, #76]	; (8000db4 <CANbus_Transmit+0x70>)
 8000d68:	6113      	str	r3, [r2, #16]
	TxMessage.IDE=CAN_ID_STD;
 8000d6a:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <CANbus_Transmit+0x70>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
	TxMessage.TransmitGlobalTime = DISABLE;
 8000d70:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <CANbus_Transmit+0x70>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	751a      	strb	r2, [r3, #20]
	HAL_CAN_AddTxMessage(&hcan, &TxMessage, can_Data, &TransmitMailbox);
 8000d76:	f107 0310 	add.w	r3, r7, #16
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	490d      	ldr	r1, [pc, #52]	; (8000db4 <CANbus_Transmit+0x70>)
 8000d7e:	480e      	ldr	r0, [pc, #56]	; (8000db8 <CANbus_Transmit+0x74>)
 8000d80:	f000 ffb8 	bl	8001cf4 <HAL_CAN_AddTxMessage>
	uint32_t k=0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
	while((HAL_CAN_IsTxMessagePending(&hcan, TransmitMailbox) != 1) && (k!=0xFFFF))
 8000d88:	e002      	b.n	8000d90 <CANbus_Transmit+0x4c>
	{
		k++;
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	617b      	str	r3, [r7, #20]
	while((HAL_CAN_IsTxMessagePending(&hcan, TransmitMailbox) != 1) && (k!=0xFFFF))
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	4619      	mov	r1, r3
 8000d94:	4808      	ldr	r0, [pc, #32]	; (8000db8 <CANbus_Transmit+0x74>)
 8000d96:	f001 f887 	bl	8001ea8 <HAL_CAN_IsTxMessagePending>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d004      	beq.n	8000daa <CANbus_Transmit+0x66>
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d1ef      	bne.n	8000d8a <CANbus_Transmit+0x46>

	}
}
 8000daa:	bf00      	nop
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000128 	.word	0x20000128
 8000db8:	200000b8 	.word	0x200000b8

08000dbc <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxMessage, RX_Message); //Receive CAN bus message to canRX buffer
 8000dc4:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <HAL_CAN_RxFifo1MsgPendingCallback+0x64>)
 8000dc6:	4a17      	ldr	r2, [pc, #92]	; (8000e24 <HAL_CAN_RxFifo1MsgPendingCallback+0x68>)
 8000dc8:	2101      	movs	r1, #1
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f001 f88f 	bl	8001eee <HAL_CAN_GetRxMessage>

	if (RxMessage.StdId == ID_MAIN)
 8000dd0:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <HAL_CAN_RxFifo1MsgPendingCallback+0x68>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b2c      	cmp	r3, #44	; 0x2c
 8000dd6:	d11f      	bne.n	8000e18 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>
	{

		if ((RX_Message[0]=='L') && (RX_Message[1]=='S'))
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <HAL_CAN_RxFifo1MsgPendingCallback+0x64>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b4c      	cmp	r3, #76	; 0x4c
 8000dde:	d11b      	bne.n	8000e18 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>
 8000de0:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <HAL_CAN_RxFifo1MsgPendingCallback+0x64>)
 8000de2:	785b      	ldrb	r3, [r3, #1]
 8000de4:	2b53      	cmp	r3, #83	; 0x53
 8000de6:	d117      	bne.n	8000e18 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>
		{

			// READ LINE POSITION
			  for (uint8_t i=0;i<4;i++)
 8000de8:	2300      	movs	r3, #0
 8000dea:	73fb      	strb	r3, [r7, #15]
 8000dec:	e009      	b.n	8000e02 <HAL_CAN_RxFifo1MsgPendingCallback+0x46>
			  {
				  positon_arr[i] =  RX_Message[i+2];
 8000dee:	7bfb      	ldrb	r3, [r7, #15]
 8000df0:	1c9a      	adds	r2, r3, #2
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
 8000df4:	490a      	ldr	r1, [pc, #40]	; (8000e20 <HAL_CAN_RxFifo1MsgPendingCallback+0x64>)
 8000df6:	5c89      	ldrb	r1, [r1, r2]
 8000df8:	4a0b      	ldr	r2, [pc, #44]	; (8000e28 <HAL_CAN_RxFifo1MsgPendingCallback+0x6c>)
 8000dfa:	54d1      	strb	r1, [r2, r3]
			  for (uint8_t i=0;i<4;i++)
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	73fb      	strb	r3, [r7, #15]
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	d9f2      	bls.n	8000dee <HAL_CAN_RxFifo1MsgPendingCallback+0x32>

			  }
			  byte2float(&position , positon_arr);
 8000e08:	4907      	ldr	r1, [pc, #28]	; (8000e28 <HAL_CAN_RxFifo1MsgPendingCallback+0x6c>)
 8000e0a:	4808      	ldr	r0, [pc, #32]	; (8000e2c <HAL_CAN_RxFifo1MsgPendingCallback+0x70>)
 8000e0c:	f7ff ff80 	bl	8000d10 <byte2float>
			  TCR_status = RX_Message[6];
 8000e10:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <HAL_CAN_RxFifo1MsgPendingCallback+0x64>)
 8000e12:	799a      	ldrb	r2, [r3, #6]
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_CAN_RxFifo1MsgPendingCallback+0x74>)
 8000e16:	701a      	strb	r2, [r3, #0]
			// READ LINE POSITION
		}

	}

}
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000030 	.word	0x20000030
 8000e24:	20000140 	.word	0x20000140
 8000e28:	20000048 	.word	0x20000048
 8000e2c:	2000004c 	.word	0x2000004c
 8000e30:	20000088 	.word	0x20000088

08000e34 <Get_position_feedback>:
float Get_position_feedback()
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
	return position;
 8000e38:	4b02      	ldr	r3, [pc, #8]	; (8000e44 <Get_position_feedback+0x10>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr
 8000e44:	2000004c 	.word	0x2000004c

08000e48 <control_motor>:

uint16_t timing_ms=0;
uint8_t plan_count =0;

void control_motor(void)
{
 8000e48:	b598      	push	{r3, r4, r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	   PID_Compute(setpoint_positon, Get_position_feedback());
 8000e4c:	4b5e      	ldr	r3, [pc, #376]	; (8000fc8 <control_motor+0x180>)
 8000e4e:	681c      	ldr	r4, [r3, #0]
 8000e50:	f7ff fff0 	bl	8000e34 <Get_position_feedback>
 8000e54:	4603      	mov	r3, r0
 8000e56:	4619      	mov	r1, r3
 8000e58:	4620      	mov	r0, r4
 8000e5a:	f7ff fec1 	bl	8000be0 <PID_Compute>
	   VR= throttle+Get_PID();
 8000e5e:	f7ff ff4d 	bl	8000cfc <Get_PID>
 8000e62:	4602      	mov	r2, r0
 8000e64:	4b59      	ldr	r3, [pc, #356]	; (8000fcc <control_motor+0x184>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	f7ff fb80 	bl	8000570 <__addsf3>
 8000e70:	4603      	mov	r3, r0
 8000e72:	461a      	mov	r2, r3
 8000e74:	4b56      	ldr	r3, [pc, #344]	; (8000fd0 <control_motor+0x188>)
 8000e76:	601a      	str	r2, [r3, #0]
	   VL= throttle-Get_PID();
 8000e78:	4b54      	ldr	r3, [pc, #336]	; (8000fcc <control_motor+0x184>)
 8000e7a:	681c      	ldr	r4, [r3, #0]
 8000e7c:	f7ff ff3e 	bl	8000cfc <Get_PID>
 8000e80:	4603      	mov	r3, r0
 8000e82:	4619      	mov	r1, r3
 8000e84:	4620      	mov	r0, r4
 8000e86:	f7ff fb71 	bl	800056c <__aeabi_fsub>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b51      	ldr	r3, [pc, #324]	; (8000fd4 <control_motor+0x18c>)
 8000e90:	601a      	str	r2, [r3, #0]
	//	VR= throttle;
	//	VL= throttle;
	   if (throttle == 0 )
 8000e92:	4b4e      	ldr	r3, [pc, #312]	; (8000fcc <control_motor+0x184>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f04f 0100 	mov.w	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fe04 	bl	8000aa8 <__aeabi_fcmpeq>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d008      	beq.n	8000eb8 <control_motor+0x70>
	   {
		   VR = 0;
 8000ea6:	4b4a      	ldr	r3, [pc, #296]	; (8000fd0 <control_motor+0x188>)
 8000ea8:	f04f 0200 	mov.w	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
		   VL = 0;
 8000eae:	4b49      	ldr	r3, [pc, #292]	; (8000fd4 <control_motor+0x18c>)
 8000eb0:	f04f 0200 	mov.w	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	e03f      	b.n	8000f38 <control_motor+0xf0>
	   }
	   else if (throttle >0)
 8000eb8:	4b44      	ldr	r3, [pc, #272]	; (8000fcc <control_motor+0x184>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f04f 0100 	mov.w	r1, #0
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fe19 	bl	8000af8 <__aeabi_fcmpgt>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d035      	beq.n	8000f38 <control_motor+0xf0>
	   {
		   if (VR > 250)
 8000ecc:	4b40      	ldr	r3, [pc, #256]	; (8000fd0 <control_motor+0x188>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4941      	ldr	r1, [pc, #260]	; (8000fd8 <control_motor+0x190>)
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fe10 	bl	8000af8 <__aeabi_fcmpgt>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <control_motor+0x9e>
		   	   {
		   		   VR=250;
 8000ede:	4b3c      	ldr	r3, [pc, #240]	; (8000fd0 <control_motor+0x188>)
 8000ee0:	4a3d      	ldr	r2, [pc, #244]	; (8000fd8 <control_motor+0x190>)
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	e00d      	b.n	8000f02 <control_motor+0xba>
		   	   }
		   	   else if (VR < 0)
 8000ee6:	4b3a      	ldr	r3, [pc, #232]	; (8000fd0 <control_motor+0x188>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f04f 0100 	mov.w	r1, #0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff fde4 	bl	8000abc <__aeabi_fcmplt>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <control_motor+0xba>
		   	   {
		   		   VR=0;
 8000efa:	4b35      	ldr	r3, [pc, #212]	; (8000fd0 <control_motor+0x188>)
 8000efc:	f04f 0200 	mov.w	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
		   	   }

		   	   if (VL > 250)
 8000f02:	4b34      	ldr	r3, [pc, #208]	; (8000fd4 <control_motor+0x18c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4934      	ldr	r1, [pc, #208]	; (8000fd8 <control_motor+0x190>)
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fdf5 	bl	8000af8 <__aeabi_fcmpgt>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d003      	beq.n	8000f1c <control_motor+0xd4>
		   	   {
		   		   VL=250;
 8000f14:	4b2f      	ldr	r3, [pc, #188]	; (8000fd4 <control_motor+0x18c>)
 8000f16:	4a30      	ldr	r2, [pc, #192]	; (8000fd8 <control_motor+0x190>)
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	e00d      	b.n	8000f38 <control_motor+0xf0>
		   	   }
		   	   else if (VL < 0)
 8000f1c:	4b2d      	ldr	r3, [pc, #180]	; (8000fd4 <control_motor+0x18c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f04f 0100 	mov.w	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fdc9 	bl	8000abc <__aeabi_fcmplt>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d003      	beq.n	8000f38 <control_motor+0xf0>
		   	   {
		   		   VL=0;
 8000f30:	4b28      	ldr	r3, [pc, #160]	; (8000fd4 <control_motor+0x18c>)
 8000f32:	f04f 0200 	mov.w	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
		   	   }
	   } //end throttle >0

   	   VL_Message[0]='S';
 8000f38:	4b28      	ldr	r3, [pc, #160]	; (8000fdc <control_motor+0x194>)
 8000f3a:	2253      	movs	r2, #83	; 0x53
 8000f3c:	701a      	strb	r2, [r3, #0]
   	   VL_Message[1]='T';
 8000f3e:	4b27      	ldr	r3, [pc, #156]	; (8000fdc <control_motor+0x194>)
 8000f40:	2254      	movs	r2, #84	; 0x54
 8000f42:	705a      	strb	r2, [r3, #1]
   	   VL_Message[2]=(uint8_t)VL;
 8000f44:	4b23      	ldr	r3, [pc, #140]	; (8000fd4 <control_motor+0x18c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fddf 	bl	8000b0c <__aeabi_f2uiz>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4b22      	ldr	r3, [pc, #136]	; (8000fdc <control_motor+0x194>)
 8000f54:	709a      	strb	r2, [r3, #2]
   	   VL_Message[3]=0;
 8000f56:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <control_motor+0x194>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	70da      	strb	r2, [r3, #3]
   	   VL_Message[4]=0;
 8000f5c:	4b1f      	ldr	r3, [pc, #124]	; (8000fdc <control_motor+0x194>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	711a      	strb	r2, [r3, #4]
   	   VL_Message[5]=0;
 8000f62:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <control_motor+0x194>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	715a      	strb	r2, [r3, #5]
   	   VL_Message[6]=0;
 8000f68:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <control_motor+0x194>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	719a      	strb	r2, [r3, #6]
   	   VL_Message[7]=0;
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <control_motor+0x194>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	71da      	strb	r2, [r3, #7]
   	   CANbus_Transmit(MOTOR2_ID, 8,VL_Message );
 8000f74:	4a19      	ldr	r2, [pc, #100]	; (8000fdc <control_motor+0x194>)
 8000f76:	2108      	movs	r1, #8
 8000f78:	204b      	movs	r0, #75	; 0x4b
 8000f7a:	f7ff fee3 	bl	8000d44 <CANbus_Transmit>

   	   VR_Message[0]='S';
 8000f7e:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <control_motor+0x198>)
 8000f80:	2253      	movs	r2, #83	; 0x53
 8000f82:	701a      	strb	r2, [r3, #0]
   	   VR_Message[1]='P';
 8000f84:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <control_motor+0x198>)
 8000f86:	2250      	movs	r2, #80	; 0x50
 8000f88:	705a      	strb	r2, [r3, #1]
   	   VR_Message[2]=(uint8_t)VR;
 8000f8a:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <control_motor+0x188>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fdbc 	bl	8000b0c <__aeabi_f2uiz>
 8000f94:	4603      	mov	r3, r0
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <control_motor+0x198>)
 8000f9a:	709a      	strb	r2, [r3, #2]
   	   VR_Message[3]=0;
 8000f9c:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <control_motor+0x198>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	70da      	strb	r2, [r3, #3]
   	   VR_Message[4]=0;
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <control_motor+0x198>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	711a      	strb	r2, [r3, #4]
   	   VR_Message[5]=0;
 8000fa8:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <control_motor+0x198>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	715a      	strb	r2, [r3, #5]
   	   VR_Message[6]=0;
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <control_motor+0x198>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	719a      	strb	r2, [r3, #6]
   	   VR_Message[7]=0;
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <control_motor+0x198>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	71da      	strb	r2, [r3, #7]
   	   CANbus_Transmit(MOTOR1_ID, 8, VR_Message);
 8000fba:	4a09      	ldr	r2, [pc, #36]	; (8000fe0 <control_motor+0x198>)
 8000fbc:	2108      	movs	r1, #8
 8000fbe:	203a      	movs	r0, #58	; 0x3a
 8000fc0:	f7ff fec0 	bl	8000d44 <CANbus_Transmit>


}
 8000fc4:	bf00      	nop
 8000fc6:	bd98      	pop	{r3, r4, r7, pc}
 8000fc8:	2000007c 	.word	0x2000007c
 8000fcc:	20000004 	.word	0x20000004
 8000fd0:	20000084 	.word	0x20000084
 8000fd4:	20000080 	.word	0x20000080
 8000fd8:	437a0000 	.word	0x437a0000
 8000fdc:	20000038 	.word	0x20000038
 8000fe0:	20000040 	.word	0x20000040

08000fe4 <freerun_motor>:
void freerun_motor(uint8_t vel_L,uint8_t vel_R)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	460a      	mov	r2, r1
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]


	   VL_Message[0]='S';
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <freerun_motor+0x8c>)
 8000ff6:	2253      	movs	r2, #83	; 0x53
 8000ff8:	701a      	strb	r2, [r3, #0]
	   VL_Message[1]='T';
 8000ffa:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <freerun_motor+0x8c>)
 8000ffc:	2254      	movs	r2, #84	; 0x54
 8000ffe:	705a      	strb	r2, [r3, #1]
	   VL_Message[2]=(uint8_t)vel_L;
 8001000:	4a1b      	ldr	r2, [pc, #108]	; (8001070 <freerun_motor+0x8c>)
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	7093      	strb	r3, [r2, #2]
	   VL_Message[3]=0;
 8001006:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <freerun_motor+0x8c>)
 8001008:	2200      	movs	r2, #0
 800100a:	70da      	strb	r2, [r3, #3]
	   VL_Message[4]=0;
 800100c:	4b18      	ldr	r3, [pc, #96]	; (8001070 <freerun_motor+0x8c>)
 800100e:	2200      	movs	r2, #0
 8001010:	711a      	strb	r2, [r3, #4]
	   VL_Message[5]=0;
 8001012:	4b17      	ldr	r3, [pc, #92]	; (8001070 <freerun_motor+0x8c>)
 8001014:	2200      	movs	r2, #0
 8001016:	715a      	strb	r2, [r3, #5]
	   VL_Message[6]=0;
 8001018:	4b15      	ldr	r3, [pc, #84]	; (8001070 <freerun_motor+0x8c>)
 800101a:	2200      	movs	r2, #0
 800101c:	719a      	strb	r2, [r3, #6]
	   VL_Message[7]=0;
 800101e:	4b14      	ldr	r3, [pc, #80]	; (8001070 <freerun_motor+0x8c>)
 8001020:	2200      	movs	r2, #0
 8001022:	71da      	strb	r2, [r3, #7]
	   CANbus_Transmit(MOTOR2_ID, 8,VL_Message);
 8001024:	4a12      	ldr	r2, [pc, #72]	; (8001070 <freerun_motor+0x8c>)
 8001026:	2108      	movs	r1, #8
 8001028:	204b      	movs	r0, #75	; 0x4b
 800102a:	f7ff fe8b 	bl	8000d44 <CANbus_Transmit>

	   VR_Message[0]='S';
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <freerun_motor+0x90>)
 8001030:	2253      	movs	r2, #83	; 0x53
 8001032:	701a      	strb	r2, [r3, #0]
	   VR_Message[1]='P';
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <freerun_motor+0x90>)
 8001036:	2250      	movs	r2, #80	; 0x50
 8001038:	705a      	strb	r2, [r3, #1]
	   VR_Message[2]=(uint8_t)vel_R;
 800103a:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <freerun_motor+0x90>)
 800103c:	79bb      	ldrb	r3, [r7, #6]
 800103e:	7093      	strb	r3, [r2, #2]
	   VR_Message[3]=0;
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <freerun_motor+0x90>)
 8001042:	2200      	movs	r2, #0
 8001044:	70da      	strb	r2, [r3, #3]
	   VR_Message[4]=0;
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <freerun_motor+0x90>)
 8001048:	2200      	movs	r2, #0
 800104a:	711a      	strb	r2, [r3, #4]
	   VR_Message[5]=0;
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <freerun_motor+0x90>)
 800104e:	2200      	movs	r2, #0
 8001050:	715a      	strb	r2, [r3, #5]
	   VR_Message[6]=0;
 8001052:	4b08      	ldr	r3, [pc, #32]	; (8001074 <freerun_motor+0x90>)
 8001054:	2200      	movs	r2, #0
 8001056:	719a      	strb	r2, [r3, #6]
	   VR_Message[7]=0;
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <freerun_motor+0x90>)
 800105a:	2200      	movs	r2, #0
 800105c:	71da      	strb	r2, [r3, #7]
	   CANbus_Transmit(MOTOR1_ID, 8, VR_Message);
 800105e:	4a05      	ldr	r2, [pc, #20]	; (8001074 <freerun_motor+0x90>)
 8001060:	2108      	movs	r1, #8
 8001062:	203a      	movs	r0, #58	; 0x3a
 8001064:	f7ff fe6e 	bl	8000d44 <CANbus_Transmit>
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000038 	.word	0x20000038
 8001074:	20000040 	.word	0x20000040

08001078 <path_planing>:
//}
uint8_t left_status=0;
uint8_t right_status=0;
uint8_t pre_right_status=0;
void path_planing(void)
{
 8001078:	b598      	push	{r3, r4, r7, lr}
 800107a:	af00      	add	r7, sp, #0
	left_status=TCR_status>>6;
 800107c:	4b6c      	ldr	r3, [pc, #432]	; (8001230 <path_planing+0x1b8>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	099b      	lsrs	r3, r3, #6
 8001082:	b2da      	uxtb	r2, r3
 8001084:	4b6b      	ldr	r3, [pc, #428]	; (8001234 <path_planing+0x1bc>)
 8001086:	701a      	strb	r2, [r3, #0]
	right_status=(TCR_status<<7);
 8001088:	4b69      	ldr	r3, [pc, #420]	; (8001230 <path_planing+0x1b8>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	01db      	lsls	r3, r3, #7
 800108e:	b2da      	uxtb	r2, r3
 8001090:	4b69      	ldr	r3, [pc, #420]	; (8001238 <path_planing+0x1c0>)
 8001092:	701a      	strb	r2, [r3, #0]
	right_status=right_status>>7;
 8001094:	4b68      	ldr	r3, [pc, #416]	; (8001238 <path_planing+0x1c0>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	09db      	lsrs	r3, r3, #7
 800109a:	b2da      	uxtb	r2, r3
 800109c:	4b66      	ldr	r3, [pc, #408]	; (8001238 <path_planing+0x1c0>)
 800109e:	701a      	strb	r2, [r3, #0]
	pre_right_status=(TCR_status<<6);
 80010a0:	4b63      	ldr	r3, [pc, #396]	; (8001230 <path_planing+0x1b8>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	019b      	lsls	r3, r3, #6
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	4b64      	ldr	r3, [pc, #400]	; (800123c <path_planing+0x1c4>)
 80010aa:	701a      	strb	r2, [r3, #0]
	pre_right_status=pre_right_status>>7;
 80010ac:	4b63      	ldr	r3, [pc, #396]	; (800123c <path_planing+0x1c4>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	09db      	lsrs	r3, r3, #7
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	4b61      	ldr	r3, [pc, #388]	; (800123c <path_planing+0x1c4>)
 80010b6:	701a      	strb	r2, [r3, #0]

		if  (  (((right_status == 1) && (left_status == 1)) || (right_status == 1) || (left_status == 1) )&& (plan_count == 0) )
 80010b8:	4b5f      	ldr	r3, [pc, #380]	; (8001238 <path_planing+0x1c0>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d103      	bne.n	80010c8 <path_planing+0x50>
 80010c0:	4b5c      	ldr	r3, [pc, #368]	; (8001234 <path_planing+0x1bc>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d007      	beq.n	80010d8 <path_planing+0x60>
 80010c8:	4b5b      	ldr	r3, [pc, #364]	; (8001238 <path_planing+0x1c0>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d003      	beq.n	80010d8 <path_planing+0x60>
 80010d0:	4b58      	ldr	r3, [pc, #352]	; (8001234 <path_planing+0x1bc>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d10f      	bne.n	80010f8 <path_planing+0x80>
 80010d8:	4b59      	ldr	r3, [pc, #356]	; (8001240 <path_planing+0x1c8>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d10b      	bne.n	80010f8 <path_planing+0x80>
		{

			freerun_motor(115, 100);
 80010e0:	2164      	movs	r1, #100	; 0x64
 80010e2:	2073      	movs	r0, #115	; 0x73
 80010e4:	f7ff ff7e 	bl	8000fe4 <freerun_motor>
			HAL_Delay(1000);
 80010e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010ec:	f000 fbd8 	bl	80018a0 <HAL_Delay>
			plan_count = 1;
 80010f0:	4b53      	ldr	r3, [pc, #332]	; (8001240 <path_planing+0x1c8>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
 80010f6:	e098      	b.n	800122a <path_planing+0x1b2>

		}

	else if  ((left_status ==  1) && (plan_count == 1) )
 80010f8:	4b4e      	ldr	r3, [pc, #312]	; (8001234 <path_planing+0x1bc>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d121      	bne.n	8001144 <path_planing+0xcc>
 8001100:	4b4f      	ldr	r3, [pc, #316]	; (8001240 <path_planing+0x1c8>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d11d      	bne.n	8001144 <path_planing+0xcc>
	{
				freerun_motor((uint8_t)VL+20, (uint8_t)VR-30);
 8001108:	4b4e      	ldr	r3, [pc, #312]	; (8001244 <path_planing+0x1cc>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fcfd 	bl	8000b0c <__aeabi_f2uiz>
 8001112:	4603      	mov	r3, r0
 8001114:	b2db      	uxtb	r3, r3
 8001116:	3314      	adds	r3, #20
 8001118:	b2dc      	uxtb	r4, r3
 800111a:	4b4b      	ldr	r3, [pc, #300]	; (8001248 <path_planing+0x1d0>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fcf4 	bl	8000b0c <__aeabi_f2uiz>
 8001124:	4603      	mov	r3, r0
 8001126:	b2db      	uxtb	r3, r3
 8001128:	3b1e      	subs	r3, #30
 800112a:	b2db      	uxtb	r3, r3
 800112c:	4619      	mov	r1, r3
 800112e:	4620      	mov	r0, r4
 8001130:	f7ff ff58 	bl	8000fe4 <freerun_motor>
				HAL_Delay(500);
 8001134:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001138:	f000 fbb2 	bl	80018a0 <HAL_Delay>
				plan_count = 2;
 800113c:	4b40      	ldr	r3, [pc, #256]	; (8001240 <path_planing+0x1c8>)
 800113e:	2202      	movs	r2, #2
 8001140:	701a      	strb	r2, [r3, #0]
 8001142:	e072      	b.n	800122a <path_planing+0x1b2>
	}
	else if ( (left_status ==  1) && (plan_count == 2))
 8001144:	4b3b      	ldr	r3, [pc, #236]	; (8001234 <path_planing+0x1bc>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d10f      	bne.n	800116c <path_planing+0xf4>
 800114c:	4b3c      	ldr	r3, [pc, #240]	; (8001240 <path_planing+0x1c8>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b02      	cmp	r3, #2
 8001152:	d10b      	bne.n	800116c <path_planing+0xf4>
	{
				freerun_motor(100,100);
 8001154:	2164      	movs	r1, #100	; 0x64
 8001156:	2064      	movs	r0, #100	; 0x64
 8001158:	f7ff ff44 	bl	8000fe4 <freerun_motor>
				HAL_Delay(1500);
 800115c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001160:	f000 fb9e 	bl	80018a0 <HAL_Delay>
				plan_count = 3;
 8001164:	4b36      	ldr	r3, [pc, #216]	; (8001240 <path_planing+0x1c8>)
 8001166:	2203      	movs	r2, #3
 8001168:	701a      	strb	r2, [r3, #0]
 800116a:	e05e      	b.n	800122a <path_planing+0x1b2>
	}
	else if ( (right_status ==  1) && (plan_count == 3))
 800116c:	4b32      	ldr	r3, [pc, #200]	; (8001238 <path_planing+0x1c0>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d121      	bne.n	80011b8 <path_planing+0x140>
 8001174:	4b32      	ldr	r3, [pc, #200]	; (8001240 <path_planing+0x1c8>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b03      	cmp	r3, #3
 800117a:	d11d      	bne.n	80011b8 <path_planing+0x140>
	{
				freerun_motor((uint8_t)VL-30, (uint8_t)VR+20);
 800117c:	4b31      	ldr	r3, [pc, #196]	; (8001244 <path_planing+0x1cc>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fcc3 	bl	8000b0c <__aeabi_f2uiz>
 8001186:	4603      	mov	r3, r0
 8001188:	b2db      	uxtb	r3, r3
 800118a:	3b1e      	subs	r3, #30
 800118c:	b2dc      	uxtb	r4, r3
 800118e:	4b2e      	ldr	r3, [pc, #184]	; (8001248 <path_planing+0x1d0>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fcba 	bl	8000b0c <__aeabi_f2uiz>
 8001198:	4603      	mov	r3, r0
 800119a:	b2db      	uxtb	r3, r3
 800119c:	3314      	adds	r3, #20
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	4619      	mov	r1, r3
 80011a2:	4620      	mov	r0, r4
 80011a4:	f7ff ff1e 	bl	8000fe4 <freerun_motor>
				HAL_Delay(500);
 80011a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011ac:	f000 fb78 	bl	80018a0 <HAL_Delay>
				plan_count = 4;
 80011b0:	4b23      	ldr	r3, [pc, #140]	; (8001240 <path_planing+0x1c8>)
 80011b2:	2204      	movs	r2, #4
 80011b4:	701a      	strb	r2, [r3, #0]
 80011b6:	e038      	b.n	800122a <path_planing+0x1b2>
	}
   else if ( (right_status ==  1)  && (plan_count == 4))
 80011b8:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <path_planing+0x1c0>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d10f      	bne.n	80011e0 <path_planing+0x168>
 80011c0:	4b1f      	ldr	r3, [pc, #124]	; (8001240 <path_planing+0x1c8>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b04      	cmp	r3, #4
 80011c6:	d10b      	bne.n	80011e0 <path_planing+0x168>
	{
				freerun_motor(100, 120);
 80011c8:	2178      	movs	r1, #120	; 0x78
 80011ca:	2064      	movs	r0, #100	; 0x64
 80011cc:	f7ff ff0a 	bl	8000fe4 <freerun_motor>

				HAL_Delay(1500);
 80011d0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80011d4:	f000 fb64 	bl	80018a0 <HAL_Delay>
				plan_count = 5;
 80011d8:	4b19      	ldr	r3, [pc, #100]	; (8001240 <path_planing+0x1c8>)
 80011da:	2205      	movs	r2, #5
 80011dc:	701a      	strb	r2, [r3, #0]
 80011de:	e024      	b.n	800122a <path_planing+0x1b2>
	}
	else if ( (( (right_status ==  1) && (left_status ==  1)) || (right_status ==  1) ||  (left_status ==  1))  && (plan_count == 5))
 80011e0:	4b15      	ldr	r3, [pc, #84]	; (8001238 <path_planing+0x1c0>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d103      	bne.n	80011f0 <path_planing+0x178>
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <path_planing+0x1bc>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d007      	beq.n	8001200 <path_planing+0x188>
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <path_planing+0x1c0>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d003      	beq.n	8001200 <path_planing+0x188>
 80011f8:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <path_planing+0x1bc>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d112      	bne.n	8001226 <path_planing+0x1ae>
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <path_planing+0x1c8>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b05      	cmp	r3, #5
 8001206:	d10e      	bne.n	8001226 <path_planing+0x1ae>
	{
				freerun_motor(0, 0);
 8001208:	2100      	movs	r1, #0
 800120a:	2000      	movs	r0, #0
 800120c:	f7ff feea 	bl	8000fe4 <freerun_motor>

				HAL_Delay(4000);
 8001210:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001214:	f000 fb44 	bl	80018a0 <HAL_Delay>
				HAL_TIM_Base_Stop_IT(&htim3);
 8001218:	480c      	ldr	r0, [pc, #48]	; (800124c <path_planing+0x1d4>)
 800121a:	f002 f8e1 	bl	80033e0 <HAL_TIM_Base_Stop_IT>
				plan_count = 6;
 800121e:	4b08      	ldr	r3, [pc, #32]	; (8001240 <path_planing+0x1c8>)
 8001220:	2206      	movs	r2, #6
 8001222:	701a      	strb	r2, [r3, #0]
 8001224:	e001      	b.n	800122a <path_planing+0x1b2>
	}


	else
	{
		control_motor();
 8001226:	f7ff fe0f 	bl	8000e48 <control_motor>
	}



}
 800122a:	bf00      	nop
 800122c:	bd98      	pop	{r3, r4, r7, pc}
 800122e:	bf00      	nop
 8001230:	20000088 	.word	0x20000088
 8001234:	2000008a 	.word	0x2000008a
 8001238:	2000008b 	.word	0x2000008b
 800123c:	2000008c 	.word	0x2000008c
 8001240:	20000089 	.word	0x20000089
 8001244:	20000080 	.word	0x20000080
 8001248:	20000084 	.word	0x20000084
 800124c:	200000e0 	.word	0x200000e0

08001250 <HAL_TIM_PeriodElapsedCallback>:

uint16_t countx=0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

	if (htim->Instance ==TIM3)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a06      	ldr	r2, [pc, #24]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d106      	bne.n	8001270 <HAL_TIM_PeriodElapsedCallback+0x20>
//		{
//			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //Toggle LED
//			HAL_Delay(2000);
//			countx=0;
//		}
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //Toggle LED
 8001262:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001266:	4805      	ldr	r0, [pc, #20]	; (800127c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001268:	f001 fc14 	bl	8002a94 <HAL_GPIO_TogglePin>

//==================TEST=====================
	  //  control_motor();

//===================PathPlaning=============
	    path_planing();
 800126c:	f7ff ff04 	bl	8001078 <path_planing>
//==================FREE================
	  //  freerun_motor(100,100);
	}
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40000400 	.word	0x40000400
 800127c:	40011000 	.word	0x40011000

08001280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001284:	f000 faaa 	bl	80017dc <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001288:	f000 f822 	bl	80012d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800128c:	f000 f91e 	bl	80014cc <MX_GPIO_Init>
  MX_CAN_Init();
 8001290:	f000 f864 	bl	800135c <MX_CAN_Init>
  MX_TIM3_Init();
 8001294:	f000 f8cc 	bl	8001430 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_Base_Start_IT(&htim3);
 8001298:	4808      	ldr	r0, [pc, #32]	; (80012bc <main+0x3c>)
 800129a:	f002 f84f 	bl	800333c <HAL_TIM_Base_Start_IT>
  PID_Init(29,0,0.05,0.001);
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <main+0x40>)
 80012a0:	4a08      	ldr	r2, [pc, #32]	; (80012c4 <main+0x44>)
 80012a2:	f04f 0100 	mov.w	r1, #0
 80012a6:	4808      	ldr	r0, [pc, #32]	; (80012c8 <main+0x48>)
 80012a8:	f7ff fc50 	bl	8000b4c <PID_Init>
  plan_count=0;
 80012ac:	4b07      	ldr	r3, [pc, #28]	; (80012cc <main+0x4c>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
  HAL_Delay(1000);
 80012b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012b6:	f000 faf3 	bl	80018a0 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012ba:	e7fe      	b.n	80012ba <main+0x3a>
 80012bc:	200000e0 	.word	0x200000e0
 80012c0:	3a83126f 	.word	0x3a83126f
 80012c4:	3d4ccccd 	.word	0x3d4ccccd
 80012c8:	41e80000 	.word	0x41e80000
 80012cc:	20000089 	.word	0x20000089

080012d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b090      	sub	sp, #64	; 0x40
 80012d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d6:	f107 0318 	add.w	r3, r7, #24
 80012da:	2228      	movs	r2, #40	; 0x28
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 fc1c 	bl	8003b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
 80012f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012f2:	2301      	movs	r3, #1
 80012f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001300:	2301      	movs	r3, #1
 8001302:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001304:	2302      	movs	r3, #2
 8001306:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001308:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800130c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800130e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001312:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001314:	f107 0318 	add.w	r3, r7, #24
 8001318:	4618      	mov	r0, r3
 800131a:	f001 fbd5 	bl	8002ac8 <HAL_RCC_OscConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001324:	f000 f92a 	bl	800157c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001328:	230f      	movs	r3, #15
 800132a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800132c:	2302      	movs	r3, #2
 800132e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001334:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001338:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	2102      	movs	r1, #2
 8001342:	4618      	mov	r0, r3
 8001344:	f001 fe40 	bl	8002fc8 <HAL_RCC_ClockConfig>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800134e:	f000 f915 	bl	800157c <Error_Handler>
  }
}
 8001352:	bf00      	nop
 8001354:	3740      	adds	r7, #64	; 0x40
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001360:	4b2e      	ldr	r3, [pc, #184]	; (800141c <MX_CAN_Init+0xc0>)
 8001362:	4a2f      	ldr	r2, [pc, #188]	; (8001420 <MX_CAN_Init+0xc4>)
 8001364:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8001366:	4b2d      	ldr	r3, [pc, #180]	; (800141c <MX_CAN_Init+0xc0>)
 8001368:	2202      	movs	r2, #2
 800136a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800136c:	4b2b      	ldr	r3, [pc, #172]	; (800141c <MX_CAN_Init+0xc0>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001372:	4b2a      	ldr	r3, [pc, #168]	; (800141c <MX_CAN_Init+0xc0>)
 8001374:	2200      	movs	r2, #0
 8001376:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8001378:	4b28      	ldr	r3, [pc, #160]	; (800141c <MX_CAN_Init+0xc0>)
 800137a:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 800137e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8001380:	4b26      	ldr	r3, [pc, #152]	; (800141c <MX_CAN_Init+0xc0>)
 8001382:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8001386:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001388:	4b24      	ldr	r3, [pc, #144]	; (800141c <MX_CAN_Init+0xc0>)
 800138a:	2200      	movs	r2, #0
 800138c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800138e:	4b23      	ldr	r3, [pc, #140]	; (800141c <MX_CAN_Init+0xc0>)
 8001390:	2200      	movs	r2, #0
 8001392:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001394:	4b21      	ldr	r3, [pc, #132]	; (800141c <MX_CAN_Init+0xc0>)
 8001396:	2200      	movs	r2, #0
 8001398:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800139a:	4b20      	ldr	r3, [pc, #128]	; (800141c <MX_CAN_Init+0xc0>)
 800139c:	2200      	movs	r2, #0
 800139e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80013a0:	4b1e      	ldr	r3, [pc, #120]	; (800141c <MX_CAN_Init+0xc0>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80013a6:	4b1d      	ldr	r3, [pc, #116]	; (800141c <MX_CAN_Init+0xc0>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80013ac:	481b      	ldr	r0, [pc, #108]	; (800141c <MX_CAN_Init+0xc0>)
 80013ae:	f000 fa99 	bl	80018e4 <HAL_CAN_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80013b8:	f000 f8e0 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  hcanfilter.FilterActivation=CAN_FILTER_ENABLE;
 80013bc:	4b19      	ldr	r3, [pc, #100]	; (8001424 <MX_CAN_Init+0xc8>)
 80013be:	2201      	movs	r2, #1
 80013c0:	621a      	str	r2, [r3, #32]
  hcanfilter.FilterMode=CAN_FILTERMODE_IDMASK;
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <MX_CAN_Init+0xc8>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  hcanfilter.FilterScale=CAN_FILTERSCALE_16BIT;
 80013c8:	4b16      	ldr	r3, [pc, #88]	; (8001424 <MX_CAN_Init+0xc8>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
  hcanfilter.FilterMaskIdHigh=(_FilterIdHigh << 5);
 80013ce:	4b16      	ldr	r3, [pc, #88]	; (8001428 <MX_CAN_Init+0xcc>)
 80013d0:	881b      	ldrh	r3, [r3, #0]
 80013d2:	015b      	lsls	r3, r3, #5
 80013d4:	461a      	mov	r2, r3
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <MX_CAN_Init+0xc8>)
 80013d8:	609a      	str	r2, [r3, #8]
  hcanfilter.FilterMaskIdLow=0x0000;
 80013da:	4b12      	ldr	r3, [pc, #72]	; (8001424 <MX_CAN_Init+0xc8>)
 80013dc:	2200      	movs	r2, #0
 80013de:	60da      	str	r2, [r3, #12]

  hcanfilter.FilterBank=2;
 80013e0:	4b10      	ldr	r3, [pc, #64]	; (8001424 <MX_CAN_Init+0xc8>)
 80013e2:	2202      	movs	r2, #2
 80013e4:	615a      	str	r2, [r3, #20]
  hcanfilter.FilterIdHigh=_IdHigh;
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <MX_CAN_Init+0xd0>)
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	461a      	mov	r2, r3
 80013ec:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <MX_CAN_Init+0xc8>)
 80013ee:	601a      	str	r2, [r3, #0]
  hcanfilter.FilterIdLow=0x0000;
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <MX_CAN_Init+0xc8>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	605a      	str	r2, [r3, #4]
  hcanfilter.FilterFIFOAssignment=CAN_FILTER_FIFO1;
 80013f6:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <MX_CAN_Init+0xc8>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	611a      	str	r2, [r3, #16]
  hcanfilter.SlaveStartFilterBank=14;
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <MX_CAN_Init+0xc8>)
 80013fe:	220e      	movs	r2, #14
 8001400:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan,&hcanfilter); //Initialize CAN Filter
 8001402:	4908      	ldr	r1, [pc, #32]	; (8001424 <MX_CAN_Init+0xc8>)
 8001404:	4805      	ldr	r0, [pc, #20]	; (800141c <MX_CAN_Init+0xc0>)
 8001406:	f000 fb68 	bl	8001ada <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan); //Initialize CAN Bus
 800140a:	4804      	ldr	r0, [pc, #16]	; (800141c <MX_CAN_Init+0xc0>)
 800140c:	f000 fc2e 	bl	8001c6c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO1_MSG_PENDING);// Initialize
 8001410:	2110      	movs	r1, #16
 8001412:	4802      	ldr	r0, [pc, #8]	; (800141c <MX_CAN_Init+0xc0>)
 8001414:	f000 fe7c 	bl	8002110 <HAL_CAN_ActivateNotification>
  /* USER CODE END CAN_Init 2 */

}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}
 800141c:	200000b8 	.word	0x200000b8
 8001420:	40006400 	.word	0x40006400
 8001424:	20000090 	.word	0x20000090
 8001428:	20000000 	.word	0x20000000
 800142c:	20000002 	.word	0x20000002

08001430 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001436:	f107 0308 	add.w	r3, r7, #8
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001444:	463b      	mov	r3, r7
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800144c:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <MX_TIM3_Init+0x94>)
 800144e:	4a1e      	ldr	r2, [pc, #120]	; (80014c8 <MX_TIM3_Init+0x98>)
 8001450:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8001452:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <MX_TIM3_Init+0x94>)
 8001454:	2248      	movs	r2, #72	; 0x48
 8001456:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001458:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <MX_TIM3_Init+0x94>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800145e:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <MX_TIM3_Init+0x94>)
 8001460:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001464:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001466:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <MX_TIM3_Init+0x94>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800146c:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <MX_TIM3_Init+0x94>)
 800146e:	2280      	movs	r2, #128	; 0x80
 8001470:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001472:	4814      	ldr	r0, [pc, #80]	; (80014c4 <MX_TIM3_Init+0x94>)
 8001474:	f001 ff12 	bl	800329c <HAL_TIM_Base_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800147e:	f000 f87d 	bl	800157c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001482:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001486:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001488:	f107 0308 	add.w	r3, r7, #8
 800148c:	4619      	mov	r1, r3
 800148e:	480d      	ldr	r0, [pc, #52]	; (80014c4 <MX_TIM3_Init+0x94>)
 8001490:	f002 f8dc 	bl	800364c <HAL_TIM_ConfigClockSource>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800149a:	f000 f86f 	bl	800157c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800149e:	2300      	movs	r3, #0
 80014a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014a6:	463b      	mov	r3, r7
 80014a8:	4619      	mov	r1, r3
 80014aa:	4806      	ldr	r0, [pc, #24]	; (80014c4 <MX_TIM3_Init+0x94>)
 80014ac:	f002 faa2 	bl	80039f4 <HAL_TIMEx_MasterConfigSynchronization>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80014b6:	f000 f861 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200000e0 	.word	0x200000e0
 80014c8:	40000400 	.word	0x40000400

080014cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b088      	sub	sp, #32
 80014d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d2:	f107 0310 	add.w	r3, r7, #16
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e0:	4b24      	ldr	r3, [pc, #144]	; (8001574 <MX_GPIO_Init+0xa8>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4a23      	ldr	r2, [pc, #140]	; (8001574 <MX_GPIO_Init+0xa8>)
 80014e6:	f043 0310 	orr.w	r3, r3, #16
 80014ea:	6193      	str	r3, [r2, #24]
 80014ec:	4b21      	ldr	r3, [pc, #132]	; (8001574 <MX_GPIO_Init+0xa8>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f003 0310 	and.w	r3, r3, #16
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014f8:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <MX_GPIO_Init+0xa8>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	4a1d      	ldr	r2, [pc, #116]	; (8001574 <MX_GPIO_Init+0xa8>)
 80014fe:	f043 0320 	orr.w	r3, r3, #32
 8001502:	6193      	str	r3, [r2, #24]
 8001504:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <MX_GPIO_Init+0xa8>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	f003 0320 	and.w	r3, r3, #32
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001510:	4b18      	ldr	r3, [pc, #96]	; (8001574 <MX_GPIO_Init+0xa8>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	4a17      	ldr	r2, [pc, #92]	; (8001574 <MX_GPIO_Init+0xa8>)
 8001516:	f043 0304 	orr.w	r3, r3, #4
 800151a:	6193      	str	r3, [r2, #24]
 800151c:	4b15      	ldr	r3, [pc, #84]	; (8001574 <MX_GPIO_Init+0xa8>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001528:	4b12      	ldr	r3, [pc, #72]	; (8001574 <MX_GPIO_Init+0xa8>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	4a11      	ldr	r2, [pc, #68]	; (8001574 <MX_GPIO_Init+0xa8>)
 800152e:	f043 0308 	orr.w	r3, r3, #8
 8001532:	6193      	str	r3, [r2, #24]
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <MX_GPIO_Init+0xa8>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	603b      	str	r3, [r7, #0]
 800153e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001540:	2201      	movs	r2, #1
 8001542:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001546:	480c      	ldr	r0, [pc, #48]	; (8001578 <MX_GPIO_Init+0xac>)
 8001548:	f001 fa8c 	bl	8002a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800154c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001550:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001552:	2301      	movs	r3, #1
 8001554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001556:	2301      	movs	r3, #1
 8001558:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800155a:	2303      	movs	r3, #3
 800155c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800155e:	f107 0310 	add.w	r3, r7, #16
 8001562:	4619      	mov	r1, r3
 8001564:	4804      	ldr	r0, [pc, #16]	; (8001578 <MX_GPIO_Init+0xac>)
 8001566:	f001 f923 	bl	80027b0 <HAL_GPIO_Init>

}
 800156a:	bf00      	nop
 800156c:	3720      	adds	r7, #32
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40021000 	.word	0x40021000
 8001578:	40011000 	.word	0x40011000

0800157c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <HAL_MspInit+0x5c>)
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	4a14      	ldr	r2, [pc, #80]	; (80015e4 <HAL_MspInit+0x5c>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6193      	str	r3, [r2, #24]
 800159a:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <HAL_MspInit+0x5c>)
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a6:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <HAL_MspInit+0x5c>)
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	4a0e      	ldr	r2, [pc, #56]	; (80015e4 <HAL_MspInit+0x5c>)
 80015ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b0:	61d3      	str	r3, [r2, #28]
 80015b2:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <HAL_MspInit+0x5c>)
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015be:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <HAL_MspInit+0x60>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <HAL_MspInit+0x60>)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015da:	bf00      	nop
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40010000 	.word	0x40010000

080015ec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08a      	sub	sp, #40	; 0x28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a29      	ldr	r2, [pc, #164]	; (80016ac <HAL_CAN_MspInit+0xc0>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d14b      	bne.n	80016a4 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800160c:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <HAL_CAN_MspInit+0xc4>)
 800160e:	69db      	ldr	r3, [r3, #28]
 8001610:	4a27      	ldr	r2, [pc, #156]	; (80016b0 <HAL_CAN_MspInit+0xc4>)
 8001612:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001616:	61d3      	str	r3, [r2, #28]
 8001618:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <HAL_CAN_MspInit+0xc4>)
 800161a:	69db      	ldr	r3, [r3, #28]
 800161c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001624:	4b22      	ldr	r3, [pc, #136]	; (80016b0 <HAL_CAN_MspInit+0xc4>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	4a21      	ldr	r2, [pc, #132]	; (80016b0 <HAL_CAN_MspInit+0xc4>)
 800162a:	f043 0308 	orr.w	r3, r3, #8
 800162e:	6193      	str	r3, [r2, #24]
 8001630:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <HAL_CAN_MspInit+0xc4>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f003 0308 	and.w	r3, r3, #8
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800163c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001646:	2301      	movs	r3, #1
 8001648:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	4619      	mov	r1, r3
 8001650:	4818      	ldr	r0, [pc, #96]	; (80016b4 <HAL_CAN_MspInit+0xc8>)
 8001652:	f001 f8ad 	bl	80027b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001656:	f44f 7300 	mov.w	r3, #512	; 0x200
 800165a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165c:	2302      	movs	r3, #2
 800165e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001660:	2303      	movs	r3, #3
 8001662:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4619      	mov	r1, r3
 800166a:	4812      	ldr	r0, [pc, #72]	; (80016b4 <HAL_CAN_MspInit+0xc8>)
 800166c:	f001 f8a0 	bl	80027b0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <HAL_CAN_MspInit+0xcc>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
 800168e:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <HAL_CAN_MspInit+0xcc>)
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001694:	2200      	movs	r2, #0
 8001696:	2100      	movs	r1, #0
 8001698:	2015      	movs	r0, #21
 800169a:	f001 f852 	bl	8002742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800169e:	2015      	movs	r0, #21
 80016a0:	f001 f86b 	bl	800277a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80016a4:	bf00      	nop
 80016a6:	3728      	adds	r7, #40	; 0x28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40006400 	.word	0x40006400
 80016b0:	40021000 	.word	0x40021000
 80016b4:	40010c00 	.word	0x40010c00
 80016b8:	40010000 	.word	0x40010000

080016bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a0d      	ldr	r2, [pc, #52]	; (8001700 <HAL_TIM_Base_MspInit+0x44>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d113      	bne.n	80016f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016ce:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <HAL_TIM_Base_MspInit+0x48>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	4a0c      	ldr	r2, [pc, #48]	; (8001704 <HAL_TIM_Base_MspInit+0x48>)
 80016d4:	f043 0302 	orr.w	r3, r3, #2
 80016d8:	61d3      	str	r3, [r2, #28]
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <HAL_TIM_Base_MspInit+0x48>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2101      	movs	r1, #1
 80016ea:	201d      	movs	r0, #29
 80016ec:	f001 f829 	bl	8002742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016f0:	201d      	movs	r0, #29
 80016f2:	f001 f842 	bl	800277a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40000400 	.word	0x40000400
 8001704:	40021000 	.word	0x40021000

08001708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <HardFault_Handler+0x4>

0800171a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800171e:	e7fe      	b.n	800171e <MemManage_Handler+0x4>

08001720 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <BusFault_Handler+0x4>

08001726 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800172a:	e7fe      	b.n	800172a <UsageFault_Handler+0x4>

0800172c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr

08001744 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr

08001750 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001754:	f000 f888 	bl	8001868 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}

0800175c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001760:	4802      	ldr	r0, [pc, #8]	; (800176c <CAN1_RX1_IRQHandler+0x10>)
 8001762:	f000 fcfa 	bl	800215a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200000b8 	.word	0x200000b8

08001770 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001774:	4802      	ldr	r0, [pc, #8]	; (8001780 <TIM3_IRQHandler+0x10>)
 8001776:	f001 fe61 	bl	800343c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200000e0 	.word	0x200000e0

08001784 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr

08001790 <Reset_Handler>:
 8001790:	2100      	movs	r1, #0
 8001792:	e003      	b.n	800179c <LoopCopyDataInit>

08001794 <CopyDataInit>:
 8001794:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <LoopFillZerobss+0x14>)
 8001796:	585b      	ldr	r3, [r3, r1]
 8001798:	5043      	str	r3, [r0, r1]
 800179a:	3104      	adds	r1, #4

0800179c <LoopCopyDataInit>:
 800179c:	480a      	ldr	r0, [pc, #40]	; (80017c8 <LoopFillZerobss+0x18>)
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <LoopFillZerobss+0x1c>)
 80017a0:	1842      	adds	r2, r0, r1
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d3f6      	bcc.n	8001794 <CopyDataInit>
 80017a6:	4a0a      	ldr	r2, [pc, #40]	; (80017d0 <LoopFillZerobss+0x20>)
 80017a8:	e002      	b.n	80017b0 <LoopFillZerobss>

080017aa <FillZerobss>:
 80017aa:	2300      	movs	r3, #0
 80017ac:	f842 3b04 	str.w	r3, [r2], #4

080017b0 <LoopFillZerobss>:
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <LoopFillZerobss+0x24>)
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d3f9      	bcc.n	80017aa <FillZerobss>
 80017b6:	f7ff ffe5 	bl	8001784 <SystemInit>
 80017ba:	f002 f98b 	bl	8003ad4 <__libc_init_array>
 80017be:	f7ff fd5f 	bl	8001280 <main>
 80017c2:	4770      	bx	lr
 80017c4:	08003b70 	.word	0x08003b70
 80017c8:	20000000 	.word	0x20000000
 80017cc:	20000014 	.word	0x20000014
 80017d0:	20000014 	.word	0x20000014
 80017d4:	20000160 	.word	0x20000160

080017d8 <ADC1_2_IRQHandler>:
 80017d8:	e7fe      	b.n	80017d8 <ADC1_2_IRQHandler>
	...

080017dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <HAL_Init+0x28>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a07      	ldr	r2, [pc, #28]	; (8001804 <HAL_Init+0x28>)
 80017e6:	f043 0310 	orr.w	r3, r3, #16
 80017ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ec:	2003      	movs	r0, #3
 80017ee:	f000 ff9d 	bl	800272c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017f2:	2000      	movs	r0, #0
 80017f4:	f000 f808 	bl	8001808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017f8:	f7ff fec6 	bl	8001588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40022000 	.word	0x40022000

08001808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001810:	4b12      	ldr	r3, [pc, #72]	; (800185c <HAL_InitTick+0x54>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_InitTick+0x58>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	4619      	mov	r1, r3
 800181a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800181e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001822:	fbb2 f3f3 	udiv	r3, r2, r3
 8001826:	4618      	mov	r0, r3
 8001828:	f000 ffb5 	bl	8002796 <HAL_SYSTICK_Config>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e00e      	b.n	8001854 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b0f      	cmp	r3, #15
 800183a:	d80a      	bhi.n	8001852 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800183c:	2200      	movs	r2, #0
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	f04f 30ff 	mov.w	r0, #4294967295
 8001844:	f000 ff7d 	bl	8002742 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001848:	4a06      	ldr	r2, [pc, #24]	; (8001864 <HAL_InitTick+0x5c>)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800184e:	2300      	movs	r3, #0
 8001850:	e000      	b.n	8001854 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
}
 8001854:	4618      	mov	r0, r3
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000008 	.word	0x20000008
 8001860:	20000010 	.word	0x20000010
 8001864:	2000000c 	.word	0x2000000c

08001868 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800186c:	4b05      	ldr	r3, [pc, #20]	; (8001884 <HAL_IncTick+0x1c>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	461a      	mov	r2, r3
 8001872:	4b05      	ldr	r3, [pc, #20]	; (8001888 <HAL_IncTick+0x20>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4413      	add	r3, r2
 8001878:	4a03      	ldr	r2, [pc, #12]	; (8001888 <HAL_IncTick+0x20>)
 800187a:	6013      	str	r3, [r2, #0]
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr
 8001884:	20000010 	.word	0x20000010
 8001888:	2000015c 	.word	0x2000015c

0800188c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return uwTick;
 8001890:	4b02      	ldr	r3, [pc, #8]	; (800189c <HAL_GetTick+0x10>)
 8001892:	681b      	ldr	r3, [r3, #0]
}
 8001894:	4618      	mov	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr
 800189c:	2000015c 	.word	0x2000015c

080018a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018a8:	f7ff fff0 	bl	800188c <HAL_GetTick>
 80018ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b8:	d005      	beq.n	80018c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ba:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <HAL_Delay+0x40>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	461a      	mov	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4413      	add	r3, r2
 80018c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018c6:	bf00      	nop
 80018c8:	f7ff ffe0 	bl	800188c <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d8f7      	bhi.n	80018c8 <HAL_Delay+0x28>
  {
  }
}
 80018d8:	bf00      	nop
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000010 	.word	0x20000010

080018e4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e0ed      	b.n	8001ad2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d102      	bne.n	8001908 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff fe72 	bl	80015ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 0202 	bic.w	r2, r2, #2
 8001916:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001918:	f7ff ffb8 	bl	800188c <HAL_GetTick>
 800191c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800191e:	e012      	b.n	8001946 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001920:	f7ff ffb4 	bl	800188c <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b0a      	cmp	r3, #10
 800192c:	d90b      	bls.n	8001946 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2205      	movs	r2, #5
 800193e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e0c5      	b.n	8001ad2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1e5      	bne.n	8001920 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f042 0201 	orr.w	r2, r2, #1
 8001962:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001964:	f7ff ff92 	bl	800188c <HAL_GetTick>
 8001968:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800196a:	e012      	b.n	8001992 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800196c:	f7ff ff8e 	bl	800188c <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b0a      	cmp	r3, #10
 8001978:	d90b      	bls.n	8001992 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2205      	movs	r2, #5
 800198a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e09f      	b.n	8001ad2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b00      	cmp	r3, #0
 800199e:	d0e5      	beq.n	800196c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	7e1b      	ldrb	r3, [r3, #24]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d108      	bne.n	80019ba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	e007      	b.n	80019ca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	7e5b      	ldrb	r3, [r3, #25]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d108      	bne.n	80019e4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	e007      	b.n	80019f4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	7e9b      	ldrb	r3, [r3, #26]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d108      	bne.n	8001a0e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f042 0220 	orr.w	r2, r2, #32
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	e007      	b.n	8001a1e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 0220 	bic.w	r2, r2, #32
 8001a1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	7edb      	ldrb	r3, [r3, #27]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d108      	bne.n	8001a38 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 0210 	bic.w	r2, r2, #16
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	e007      	b.n	8001a48 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f042 0210 	orr.w	r2, r2, #16
 8001a46:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	7f1b      	ldrb	r3, [r3, #28]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d108      	bne.n	8001a62 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f042 0208 	orr.w	r2, r2, #8
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	e007      	b.n	8001a72 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 0208 	bic.w	r2, r2, #8
 8001a70:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	7f5b      	ldrb	r3, [r3, #29]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d108      	bne.n	8001a8c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f042 0204 	orr.w	r2, r2, #4
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	e007      	b.n	8001a9c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 0204 	bic.w	r2, r2, #4
 8001a9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	ea42 0103 	orr.w	r1, r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	1e5a      	subs	r2, r3, #1
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b087      	sub	sp, #28
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001af0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001af2:	7cfb      	ldrb	r3, [r7, #19]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d003      	beq.n	8001b00 <HAL_CAN_ConfigFilter+0x26>
 8001af8:	7cfb      	ldrb	r3, [r7, #19]
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	f040 80aa 	bne.w	8001c54 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b06:	f043 0201 	orr.w	r2, r3, #1
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	695b      	ldr	r3, [r3, #20]
 8001b14:	f003 031f 	and.w	r3, r3, #31
 8001b18:	2201      	movs	r2, #1
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	401a      	ands	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d123      	bne.n	8001b82 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	43db      	mvns	r3, r3
 8001b44:	401a      	ands	r2, r3
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b5c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	3248      	adds	r2, #72	; 0x48
 8001b62:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b76:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b78:	6979      	ldr	r1, [r7, #20]
 8001b7a:	3348      	adds	r3, #72	; 0x48
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	440b      	add	r3, r1
 8001b80:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d122      	bne.n	8001bd0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	431a      	orrs	r2, r3
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001baa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	3248      	adds	r2, #72	; 0x48
 8001bb0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bc4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bc6:	6979      	ldr	r1, [r7, #20]
 8001bc8:	3348      	adds	r3, #72	; 0x48
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	440b      	add	r3, r1
 8001bce:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d109      	bne.n	8001bec <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	43db      	mvns	r3, r3
 8001be2:	401a      	ands	r2, r3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001bea:	e007      	b.n	8001bfc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d109      	bne.n	8001c18 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	401a      	ands	r2, r3
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001c16:	e007      	b.n	8001c28 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	431a      	orrs	r2, r3
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d107      	bne.n	8001c40 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c46:	f023 0201 	bic.w	r2, r3, #1
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001c50:	2300      	movs	r3, #0
 8001c52:	e006      	b.n	8001c62 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
  }
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	371c      	adds	r7, #28
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr

08001c6c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d12e      	bne.n	8001cde <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2202      	movs	r2, #2
 8001c84:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0201 	bic.w	r2, r2, #1
 8001c96:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c98:	f7ff fdf8 	bl	800188c <HAL_GetTick>
 8001c9c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c9e:	e012      	b.n	8001cc6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ca0:	f7ff fdf4 	bl	800188c <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b0a      	cmp	r3, #10
 8001cac:	d90b      	bls.n	8001cc6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2205      	movs	r2, #5
 8001cbe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e012      	b.n	8001cec <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1e5      	bne.n	8001ca0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	e006      	b.n	8001cec <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
  }
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b089      	sub	sp, #36	; 0x24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
 8001d00:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d08:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d12:	7ffb      	ldrb	r3, [r7, #31]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d003      	beq.n	8001d20 <HAL_CAN_AddTxMessage+0x2c>
 8001d18:	7ffb      	ldrb	r3, [r7, #31]
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	f040 80b8 	bne.w	8001e90 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10a      	bne.n	8001d40 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d105      	bne.n	8001d40 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 80a0 	beq.w	8001e80 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	0e1b      	lsrs	r3, r3, #24
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d907      	bls.n	8001d60 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e09e      	b.n	8001e9e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001d60:	2201      	movs	r2, #1
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	409a      	lsls	r2, r3
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10d      	bne.n	8001d8e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d7c:	68f9      	ldr	r1, [r7, #12]
 8001d7e:	6809      	ldr	r1, [r1, #0]
 8001d80:	431a      	orrs	r2, r3
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	3318      	adds	r3, #24
 8001d86:	011b      	lsls	r3, r3, #4
 8001d88:	440b      	add	r3, r1
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	e00f      	b.n	8001dae <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d98:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d9e:	68f9      	ldr	r1, [r7, #12]
 8001da0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001da2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	3318      	adds	r3, #24
 8001da8:	011b      	lsls	r3, r3, #4
 8001daa:	440b      	add	r3, r1
 8001dac:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6819      	ldr	r1, [r3, #0]
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	691a      	ldr	r2, [r3, #16]
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	3318      	adds	r3, #24
 8001dba:	011b      	lsls	r3, r3, #4
 8001dbc:	440b      	add	r3, r1
 8001dbe:	3304      	adds	r3, #4
 8001dc0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	7d1b      	ldrb	r3, [r3, #20]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d111      	bne.n	8001dee <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	3318      	adds	r3, #24
 8001dd2:	011b      	lsls	r3, r3, #4
 8001dd4:	4413      	add	r3, r2
 8001dd6:	3304      	adds	r3, #4
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	6811      	ldr	r1, [r2, #0]
 8001dde:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	3318      	adds	r3, #24
 8001de6:	011b      	lsls	r3, r3, #4
 8001de8:	440b      	add	r3, r1
 8001dea:	3304      	adds	r3, #4
 8001dec:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	3307      	adds	r3, #7
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	061a      	lsls	r2, r3, #24
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	3306      	adds	r3, #6
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	041b      	lsls	r3, r3, #16
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3305      	adds	r3, #5
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	021b      	lsls	r3, r3, #8
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	3204      	adds	r2, #4
 8001e0e:	7812      	ldrb	r2, [r2, #0]
 8001e10:	4610      	mov	r0, r2
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	6811      	ldr	r1, [r2, #0]
 8001e16:	ea43 0200 	orr.w	r2, r3, r0
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	011b      	lsls	r3, r3, #4
 8001e1e:	440b      	add	r3, r1
 8001e20:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001e24:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3303      	adds	r3, #3
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	061a      	lsls	r2, r3, #24
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	3302      	adds	r3, #2
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	041b      	lsls	r3, r3, #16
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	021b      	lsls	r3, r3, #8
 8001e40:	4313      	orrs	r3, r2
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	7812      	ldrb	r2, [r2, #0]
 8001e46:	4610      	mov	r0, r2
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	6811      	ldr	r1, [r2, #0]
 8001e4c:	ea43 0200 	orr.w	r2, r3, r0
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	011b      	lsls	r3, r3, #4
 8001e54:	440b      	add	r3, r1
 8001e56:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001e5a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	3318      	adds	r3, #24
 8001e64:	011b      	lsls	r3, r3, #4
 8001e66:	4413      	add	r3, r2
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	6811      	ldr	r1, [r2, #0]
 8001e6e:	f043 0201 	orr.w	r2, r3, #1
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	3318      	adds	r3, #24
 8001e76:	011b      	lsls	r3, r3, #4
 8001e78:	440b      	add	r3, r1
 8001e7a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	e00e      	b.n	8001e9e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e006      	b.n	8001e9e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
  }
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3724      	adds	r7, #36	; 0x24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ebc:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ebe:	7afb      	ldrb	r3, [r7, #11]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d002      	beq.n	8001eca <HAL_CAN_IsTxMessagePending+0x22>
 8001ec4:	7afb      	ldrb	r3, [r7, #11]
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d10b      	bne.n	8001ee2 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	069b      	lsls	r3, r3, #26
 8001ed4:	401a      	ands	r2, r3
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	069b      	lsls	r3, r3, #26
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d001      	beq.n	8001ee2 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr

08001eee <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b087      	sub	sp, #28
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	60f8      	str	r0, [r7, #12]
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	607a      	str	r2, [r7, #4]
 8001efa:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f02:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f04:	7dfb      	ldrb	r3, [r7, #23]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d003      	beq.n	8001f12 <HAL_CAN_GetRxMessage+0x24>
 8001f0a:	7dfb      	ldrb	r3, [r7, #23]
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	f040 80f3 	bne.w	80020f8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10e      	bne.n	8001f36 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d116      	bne.n	8001f54 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e0e7      	b.n	8002106 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d107      	bne.n	8001f54 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f48:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e0d8      	b.n	8002106 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	331b      	adds	r3, #27
 8001f5c:	011b      	lsls	r3, r3, #4
 8001f5e:	4413      	add	r3, r2
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0204 	and.w	r2, r3, #4
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10c      	bne.n	8001f8c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	331b      	adds	r3, #27
 8001f7a:	011b      	lsls	r3, r3, #4
 8001f7c:	4413      	add	r3, r2
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	0d5b      	lsrs	r3, r3, #21
 8001f82:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	e00b      	b.n	8001fa4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	331b      	adds	r3, #27
 8001f94:	011b      	lsls	r3, r3, #4
 8001f96:	4413      	add	r3, r2
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	08db      	lsrs	r3, r3, #3
 8001f9c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	331b      	adds	r3, #27
 8001fac:	011b      	lsls	r3, r3, #4
 8001fae:	4413      	add	r3, r2
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0202 	and.w	r2, r3, #2
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	331b      	adds	r3, #27
 8001fc2:	011b      	lsls	r3, r3, #4
 8001fc4:	4413      	add	r3, r2
 8001fc6:	3304      	adds	r3, #4
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 020f 	and.w	r2, r3, #15
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	331b      	adds	r3, #27
 8001fda:	011b      	lsls	r3, r3, #4
 8001fdc:	4413      	add	r3, r2
 8001fde:	3304      	adds	r3, #4
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	0a1b      	lsrs	r3, r3, #8
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	331b      	adds	r3, #27
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3304      	adds	r3, #4
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	0c1b      	lsrs	r3, r3, #16
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	011b      	lsls	r3, r3, #4
 800200a:	4413      	add	r3, r2
 800200c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	b2da      	uxtb	r2, r3
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	011b      	lsls	r3, r3, #4
 8002020:	4413      	add	r3, r2
 8002022:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	0a1a      	lsrs	r2, r3, #8
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	3301      	adds	r3, #1
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	011b      	lsls	r3, r3, #4
 800203a:	4413      	add	r3, r2
 800203c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	0c1a      	lsrs	r2, r3, #16
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	3302      	adds	r3, #2
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	011b      	lsls	r3, r3, #4
 8002054:	4413      	add	r3, r2
 8002056:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	0e1a      	lsrs	r2, r3, #24
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	3303      	adds	r3, #3
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	011b      	lsls	r3, r3, #4
 800206e:	4413      	add	r3, r2
 8002070:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	3304      	adds	r3, #4
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	011b      	lsls	r3, r3, #4
 8002086:	4413      	add	r3, r2
 8002088:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	0a1a      	lsrs	r2, r3, #8
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	3305      	adds	r3, #5
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	011b      	lsls	r3, r3, #4
 80020a0:	4413      	add	r3, r2
 80020a2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	0c1a      	lsrs	r2, r3, #16
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	3306      	adds	r3, #6
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	011b      	lsls	r3, r3, #4
 80020ba:	4413      	add	r3, r2
 80020bc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	0e1a      	lsrs	r2, r3, #24
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	3307      	adds	r3, #7
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d108      	bne.n	80020e4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68da      	ldr	r2, [r3, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f042 0220 	orr.w	r2, r2, #32
 80020e0:	60da      	str	r2, [r3, #12]
 80020e2:	e007      	b.n	80020f4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691a      	ldr	r2, [r3, #16]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0220 	orr.w	r2, r2, #32
 80020f2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80020f4:	2300      	movs	r3, #0
 80020f6:	e006      	b.n	8002106 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
  }
}
 8002106:	4618      	mov	r0, r3
 8002108:	371c      	adds	r7, #28
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr

08002110 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002120:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002122:	7bfb      	ldrb	r3, [r7, #15]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d002      	beq.n	800212e <HAL_CAN_ActivateNotification+0x1e>
 8002128:	7bfb      	ldrb	r3, [r7, #15]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d109      	bne.n	8002142 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6959      	ldr	r1, [r3, #20]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	e006      	b.n	8002150 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
  }
}
 8002150:	4618      	mov	r0, r3
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr

0800215a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b08a      	sub	sp, #40	; 0x28
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002162:	2300      	movs	r3, #0
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002196:	6a3b      	ldr	r3, [r7, #32]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b00      	cmp	r3, #0
 800219e:	d07c      	beq.n	800229a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d023      	beq.n	80021f2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2201      	movs	r2, #1
 80021b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 f97d 	bl	80024bc <HAL_CAN_TxMailbox0CompleteCallback>
 80021c2:	e016      	b.n	80021f2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	f003 0304 	and.w	r3, r3, #4
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d004      	beq.n	80021d8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24
 80021d6:	e00c      	b.n	80021f2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d004      	beq.n	80021ec <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ea:	e002      	b.n	80021f2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 f980 	bl	80024f2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d024      	beq.n	8002246 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002204:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 f95c 	bl	80024ce <HAL_CAN_TxMailbox1CompleteCallback>
 8002216:	e016      	b.n	8002246 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800221e:	2b00      	cmp	r3, #0
 8002220:	d004      	beq.n	800222c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
 800222a:	e00c      	b.n	8002246 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002232:	2b00      	cmp	r3, #0
 8002234:	d004      	beq.n	8002240 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
 800223e:	e002      	b.n	8002246 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f95f 	bl	8002504 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d024      	beq.n	800229a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002258:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 f93b 	bl	80024e0 <HAL_CAN_TxMailbox2CompleteCallback>
 800226a:	e016      	b.n	800229a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d004      	beq.n	8002280 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
 800227e:	e00c      	b.n	800229a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d004      	beq.n	8002294 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
 8002292:	e002      	b.n	800229a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 f93e 	bl	8002516 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	f003 0308 	and.w	r3, r3, #8
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00c      	beq.n	80022be <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	f003 0310 	and.w	r3, r3, #16
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d007      	beq.n	80022be <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2210      	movs	r2, #16
 80022bc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80022be:	6a3b      	ldr	r3, [r7, #32]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00b      	beq.n	80022e0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d006      	beq.n	80022e0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2208      	movs	r2, #8
 80022d8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f92d 	bl	800253a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80022e0:	6a3b      	ldr	r3, [r7, #32]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d009      	beq.n	80022fe <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d002      	beq.n	80022fe <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 f915 	bl	8002528 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80022fe:	6a3b      	ldr	r3, [r7, #32]
 8002300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00c      	beq.n	8002322 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	f003 0310 	and.w	r3, r3, #16
 800230e:	2b00      	cmp	r3, #0
 8002310:	d007      	beq.n	8002322 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002318:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2210      	movs	r2, #16
 8002320:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002322:	6a3b      	ldr	r3, [r7, #32]
 8002324:	f003 0320 	and.w	r3, r3, #32
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00b      	beq.n	8002344 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d006      	beq.n	8002344 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2208      	movs	r2, #8
 800233c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f904 	bl	800254c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	f003 0310 	and.w	r3, r3, #16
 800234a:	2b00      	cmp	r3, #0
 800234c:	d009      	beq.n	8002362 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7fe fd2d 	bl	8000dbc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00b      	beq.n	8002384 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f003 0310 	and.w	r3, r3, #16
 8002372:	2b00      	cmp	r3, #0
 8002374:	d006      	beq.n	8002384 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2210      	movs	r2, #16
 800237c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f8ed 	bl	800255e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00b      	beq.n	80023a6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	2b00      	cmp	r3, #0
 8002396:	d006      	beq.n	80023a6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2208      	movs	r2, #8
 800239e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 f8e5 	bl	8002570 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80023a6:	6a3b      	ldr	r3, [r7, #32]
 80023a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d075      	beq.n	800249c <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f003 0304 	and.w	r3, r3, #4
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d06c      	beq.n	8002494 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023ba:	6a3b      	ldr	r3, [r7, #32]
 80023bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d008      	beq.n	80023d6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023d6:	6a3b      	ldr	r3, [r7, #32]
 80023d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d008      	beq.n	80023f2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	f043 0302 	orr.w	r3, r3, #2
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d008      	beq.n	800240e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	f043 0304 	orr.w	r3, r3, #4
 800240c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800240e:	6a3b      	ldr	r3, [r7, #32]
 8002410:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002414:	2b00      	cmp	r3, #0
 8002416:	d03d      	beq.n	8002494 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800241e:	2b00      	cmp	r3, #0
 8002420:	d038      	beq.n	8002494 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002428:	2b30      	cmp	r3, #48	; 0x30
 800242a:	d017      	beq.n	800245c <HAL_CAN_IRQHandler+0x302>
 800242c:	2b30      	cmp	r3, #48	; 0x30
 800242e:	d804      	bhi.n	800243a <HAL_CAN_IRQHandler+0x2e0>
 8002430:	2b10      	cmp	r3, #16
 8002432:	d009      	beq.n	8002448 <HAL_CAN_IRQHandler+0x2ee>
 8002434:	2b20      	cmp	r3, #32
 8002436:	d00c      	beq.n	8002452 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002438:	e024      	b.n	8002484 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800243a:	2b50      	cmp	r3, #80	; 0x50
 800243c:	d018      	beq.n	8002470 <HAL_CAN_IRQHandler+0x316>
 800243e:	2b60      	cmp	r3, #96	; 0x60
 8002440:	d01b      	beq.n	800247a <HAL_CAN_IRQHandler+0x320>
 8002442:	2b40      	cmp	r3, #64	; 0x40
 8002444:	d00f      	beq.n	8002466 <HAL_CAN_IRQHandler+0x30c>
            break;
 8002446:	e01d      	b.n	8002484 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	f043 0308 	orr.w	r3, r3, #8
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002450:	e018      	b.n	8002484 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	f043 0310 	orr.w	r3, r3, #16
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800245a:	e013      	b.n	8002484 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	f043 0320 	orr.w	r3, r3, #32
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002464:	e00e      	b.n	8002484 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800246c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800246e:	e009      	b.n	8002484 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002476:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002478:	e004      	b.n	8002484 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002480:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002482:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	699a      	ldr	r2, [r3, #24]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002492:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2204      	movs	r2, #4
 800249a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d008      	beq.n	80024b4 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	431a      	orrs	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f867 	bl	8002582 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80024b4:	bf00      	nop
 80024b6:	3728      	adds	r7, #40	; 0x28
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr

080024ce <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr

080024e0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr

080024f2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr

08002504 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr

08002516 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr

08002528 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr

0800253a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr

0800255e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr

08002570 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr

08002582 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr

08002594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a4:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <__NVIC_SetPriorityGrouping+0x44>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025b0:	4013      	ands	r3, r2
 80025b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025c6:	4a04      	ldr	r2, [pc, #16]	; (80025d8 <__NVIC_SetPriorityGrouping+0x44>)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	60d3      	str	r3, [r2, #12]
}
 80025cc:	bf00      	nop
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc80      	pop	{r7}
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025e0:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <__NVIC_GetPriorityGrouping+0x18>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	0a1b      	lsrs	r3, r3, #8
 80025e6:	f003 0307 	and.w	r3, r3, #7
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002606:	2b00      	cmp	r3, #0
 8002608:	db0b      	blt.n	8002622 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	f003 021f 	and.w	r2, r3, #31
 8002610:	4906      	ldr	r1, [pc, #24]	; (800262c <__NVIC_EnableIRQ+0x34>)
 8002612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	2001      	movs	r0, #1
 800261a:	fa00 f202 	lsl.w	r2, r0, r2
 800261e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr
 800262c:	e000e100 	.word	0xe000e100

08002630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	6039      	str	r1, [r7, #0]
 800263a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800263c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002640:	2b00      	cmp	r3, #0
 8002642:	db0a      	blt.n	800265a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	b2da      	uxtb	r2, r3
 8002648:	490c      	ldr	r1, [pc, #48]	; (800267c <__NVIC_SetPriority+0x4c>)
 800264a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264e:	0112      	lsls	r2, r2, #4
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	440b      	add	r3, r1
 8002654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002658:	e00a      	b.n	8002670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	b2da      	uxtb	r2, r3
 800265e:	4908      	ldr	r1, [pc, #32]	; (8002680 <__NVIC_SetPriority+0x50>)
 8002660:	79fb      	ldrb	r3, [r7, #7]
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	3b04      	subs	r3, #4
 8002668:	0112      	lsls	r2, r2, #4
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	440b      	add	r3, r1
 800266e:	761a      	strb	r2, [r3, #24]
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	e000e100 	.word	0xe000e100
 8002680:	e000ed00 	.word	0xe000ed00

08002684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002684:	b480      	push	{r7}
 8002686:	b089      	sub	sp, #36	; 0x24
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f1c3 0307 	rsb	r3, r3, #7
 800269e:	2b04      	cmp	r3, #4
 80026a0:	bf28      	it	cs
 80026a2:	2304      	movcs	r3, #4
 80026a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	3304      	adds	r3, #4
 80026aa:	2b06      	cmp	r3, #6
 80026ac:	d902      	bls.n	80026b4 <NVIC_EncodePriority+0x30>
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	3b03      	subs	r3, #3
 80026b2:	e000      	b.n	80026b6 <NVIC_EncodePriority+0x32>
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b8:	f04f 32ff 	mov.w	r2, #4294967295
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43da      	mvns	r2, r3
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	401a      	ands	r2, r3
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026cc:	f04f 31ff 	mov.w	r1, #4294967295
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	fa01 f303 	lsl.w	r3, r1, r3
 80026d6:	43d9      	mvns	r1, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026dc:	4313      	orrs	r3, r2
         );
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3724      	adds	r7, #36	; 0x24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr

080026e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026f8:	d301      	bcc.n	80026fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026fa:	2301      	movs	r3, #1
 80026fc:	e00f      	b.n	800271e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026fe:	4a0a      	ldr	r2, [pc, #40]	; (8002728 <SysTick_Config+0x40>)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3b01      	subs	r3, #1
 8002704:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002706:	210f      	movs	r1, #15
 8002708:	f04f 30ff 	mov.w	r0, #4294967295
 800270c:	f7ff ff90 	bl	8002630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002710:	4b05      	ldr	r3, [pc, #20]	; (8002728 <SysTick_Config+0x40>)
 8002712:	2200      	movs	r2, #0
 8002714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002716:	4b04      	ldr	r3, [pc, #16]	; (8002728 <SysTick_Config+0x40>)
 8002718:	2207      	movs	r2, #7
 800271a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	e000e010 	.word	0xe000e010

0800272c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7ff ff2d 	bl	8002594 <__NVIC_SetPriorityGrouping>
}
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002742:	b580      	push	{r7, lr}
 8002744:	b086      	sub	sp, #24
 8002746:	af00      	add	r7, sp, #0
 8002748:	4603      	mov	r3, r0
 800274a:	60b9      	str	r1, [r7, #8]
 800274c:	607a      	str	r2, [r7, #4]
 800274e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002754:	f7ff ff42 	bl	80025dc <__NVIC_GetPriorityGrouping>
 8002758:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	68b9      	ldr	r1, [r7, #8]
 800275e:	6978      	ldr	r0, [r7, #20]
 8002760:	f7ff ff90 	bl	8002684 <NVIC_EncodePriority>
 8002764:	4602      	mov	r2, r0
 8002766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800276a:	4611      	mov	r1, r2
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff ff5f 	bl	8002630 <__NVIC_SetPriority>
}
 8002772:	bf00      	nop
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b082      	sub	sp, #8
 800277e:	af00      	add	r7, sp, #0
 8002780:	4603      	mov	r3, r0
 8002782:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff ff35 	bl	80025f8 <__NVIC_EnableIRQ>
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7ff ffa2 	bl	80026e8 <SysTick_Config>
 80027a4:	4603      	mov	r3, r0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
	...

080027b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b08b      	sub	sp, #44	; 0x2c
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027ba:	2300      	movs	r3, #0
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027be:	2300      	movs	r3, #0
 80027c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027c2:	e127      	b.n	8002a14 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027c4:	2201      	movs	r2, #1
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	69fa      	ldr	r2, [r7, #28]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	429a      	cmp	r2, r3
 80027de:	f040 8116 	bne.w	8002a0e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b12      	cmp	r3, #18
 80027e8:	d034      	beq.n	8002854 <HAL_GPIO_Init+0xa4>
 80027ea:	2b12      	cmp	r3, #18
 80027ec:	d80d      	bhi.n	800280a <HAL_GPIO_Init+0x5a>
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d02b      	beq.n	800284a <HAL_GPIO_Init+0x9a>
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d804      	bhi.n	8002800 <HAL_GPIO_Init+0x50>
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d031      	beq.n	800285e <HAL_GPIO_Init+0xae>
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d01c      	beq.n	8002838 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027fe:	e048      	b.n	8002892 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002800:	2b03      	cmp	r3, #3
 8002802:	d043      	beq.n	800288c <HAL_GPIO_Init+0xdc>
 8002804:	2b11      	cmp	r3, #17
 8002806:	d01b      	beq.n	8002840 <HAL_GPIO_Init+0x90>
          break;
 8002808:	e043      	b.n	8002892 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800280a:	4a89      	ldr	r2, [pc, #548]	; (8002a30 <HAL_GPIO_Init+0x280>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d026      	beq.n	800285e <HAL_GPIO_Init+0xae>
 8002810:	4a87      	ldr	r2, [pc, #540]	; (8002a30 <HAL_GPIO_Init+0x280>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d806      	bhi.n	8002824 <HAL_GPIO_Init+0x74>
 8002816:	4a87      	ldr	r2, [pc, #540]	; (8002a34 <HAL_GPIO_Init+0x284>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d020      	beq.n	800285e <HAL_GPIO_Init+0xae>
 800281c:	4a86      	ldr	r2, [pc, #536]	; (8002a38 <HAL_GPIO_Init+0x288>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d01d      	beq.n	800285e <HAL_GPIO_Init+0xae>
          break;
 8002822:	e036      	b.n	8002892 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002824:	4a85      	ldr	r2, [pc, #532]	; (8002a3c <HAL_GPIO_Init+0x28c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d019      	beq.n	800285e <HAL_GPIO_Init+0xae>
 800282a:	4a85      	ldr	r2, [pc, #532]	; (8002a40 <HAL_GPIO_Init+0x290>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d016      	beq.n	800285e <HAL_GPIO_Init+0xae>
 8002830:	4a84      	ldr	r2, [pc, #528]	; (8002a44 <HAL_GPIO_Init+0x294>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d013      	beq.n	800285e <HAL_GPIO_Init+0xae>
          break;
 8002836:	e02c      	b.n	8002892 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	623b      	str	r3, [r7, #32]
          break;
 800283e:	e028      	b.n	8002892 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	3304      	adds	r3, #4
 8002846:	623b      	str	r3, [r7, #32]
          break;
 8002848:	e023      	b.n	8002892 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	3308      	adds	r3, #8
 8002850:	623b      	str	r3, [r7, #32]
          break;
 8002852:	e01e      	b.n	8002892 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	330c      	adds	r3, #12
 800285a:	623b      	str	r3, [r7, #32]
          break;
 800285c:	e019      	b.n	8002892 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d102      	bne.n	800286c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002866:	2304      	movs	r3, #4
 8002868:	623b      	str	r3, [r7, #32]
          break;
 800286a:	e012      	b.n	8002892 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d105      	bne.n	8002880 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002874:	2308      	movs	r3, #8
 8002876:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69fa      	ldr	r2, [r7, #28]
 800287c:	611a      	str	r2, [r3, #16]
          break;
 800287e:	e008      	b.n	8002892 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002880:	2308      	movs	r3, #8
 8002882:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	69fa      	ldr	r2, [r7, #28]
 8002888:	615a      	str	r2, [r3, #20]
          break;
 800288a:	e002      	b.n	8002892 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800288c:	2300      	movs	r3, #0
 800288e:	623b      	str	r3, [r7, #32]
          break;
 8002890:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	2bff      	cmp	r3, #255	; 0xff
 8002896:	d801      	bhi.n	800289c <HAL_GPIO_Init+0xec>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	e001      	b.n	80028a0 <HAL_GPIO_Init+0xf0>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3304      	adds	r3, #4
 80028a0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	2bff      	cmp	r3, #255	; 0xff
 80028a6:	d802      	bhi.n	80028ae <HAL_GPIO_Init+0xfe>
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	e002      	b.n	80028b4 <HAL_GPIO_Init+0x104>
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	3b08      	subs	r3, #8
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	210f      	movs	r1, #15
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	fa01 f303 	lsl.w	r3, r1, r3
 80028c2:	43db      	mvns	r3, r3
 80028c4:	401a      	ands	r2, r3
 80028c6:	6a39      	ldr	r1, [r7, #32]
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	fa01 f303 	lsl.w	r3, r1, r3
 80028ce:	431a      	orrs	r2, r3
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 8096 	beq.w	8002a0e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028e2:	4b59      	ldr	r3, [pc, #356]	; (8002a48 <HAL_GPIO_Init+0x298>)
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	4a58      	ldr	r2, [pc, #352]	; (8002a48 <HAL_GPIO_Init+0x298>)
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	6193      	str	r3, [r2, #24]
 80028ee:	4b56      	ldr	r3, [pc, #344]	; (8002a48 <HAL_GPIO_Init+0x298>)
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	60bb      	str	r3, [r7, #8]
 80028f8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028fa:	4a54      	ldr	r2, [pc, #336]	; (8002a4c <HAL_GPIO_Init+0x29c>)
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	089b      	lsrs	r3, r3, #2
 8002900:	3302      	adds	r3, #2
 8002902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002906:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	220f      	movs	r2, #15
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43db      	mvns	r3, r3
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	4013      	ands	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a4b      	ldr	r2, [pc, #300]	; (8002a50 <HAL_GPIO_Init+0x2a0>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d013      	beq.n	800294e <HAL_GPIO_Init+0x19e>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a4a      	ldr	r2, [pc, #296]	; (8002a54 <HAL_GPIO_Init+0x2a4>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d00d      	beq.n	800294a <HAL_GPIO_Init+0x19a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a49      	ldr	r2, [pc, #292]	; (8002a58 <HAL_GPIO_Init+0x2a8>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d007      	beq.n	8002946 <HAL_GPIO_Init+0x196>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a48      	ldr	r2, [pc, #288]	; (8002a5c <HAL_GPIO_Init+0x2ac>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d101      	bne.n	8002942 <HAL_GPIO_Init+0x192>
 800293e:	2303      	movs	r3, #3
 8002940:	e006      	b.n	8002950 <HAL_GPIO_Init+0x1a0>
 8002942:	2304      	movs	r3, #4
 8002944:	e004      	b.n	8002950 <HAL_GPIO_Init+0x1a0>
 8002946:	2302      	movs	r3, #2
 8002948:	e002      	b.n	8002950 <HAL_GPIO_Init+0x1a0>
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <HAL_GPIO_Init+0x1a0>
 800294e:	2300      	movs	r3, #0
 8002950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002952:	f002 0203 	and.w	r2, r2, #3
 8002956:	0092      	lsls	r2, r2, #2
 8002958:	4093      	lsls	r3, r2
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	4313      	orrs	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002960:	493a      	ldr	r1, [pc, #232]	; (8002a4c <HAL_GPIO_Init+0x29c>)
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	089b      	lsrs	r3, r3, #2
 8002966:	3302      	adds	r3, #2
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d006      	beq.n	8002988 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800297a:	4b39      	ldr	r3, [pc, #228]	; (8002a60 <HAL_GPIO_Init+0x2b0>)
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	4938      	ldr	r1, [pc, #224]	; (8002a60 <HAL_GPIO_Init+0x2b0>)
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	4313      	orrs	r3, r2
 8002984:	600b      	str	r3, [r1, #0]
 8002986:	e006      	b.n	8002996 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002988:	4b35      	ldr	r3, [pc, #212]	; (8002a60 <HAL_GPIO_Init+0x2b0>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	43db      	mvns	r3, r3
 8002990:	4933      	ldr	r1, [pc, #204]	; (8002a60 <HAL_GPIO_Init+0x2b0>)
 8002992:	4013      	ands	r3, r2
 8002994:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d006      	beq.n	80029b0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029a2:	4b2f      	ldr	r3, [pc, #188]	; (8002a60 <HAL_GPIO_Init+0x2b0>)
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	492e      	ldr	r1, [pc, #184]	; (8002a60 <HAL_GPIO_Init+0x2b0>)
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	604b      	str	r3, [r1, #4]
 80029ae:	e006      	b.n	80029be <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029b0:	4b2b      	ldr	r3, [pc, #172]	; (8002a60 <HAL_GPIO_Init+0x2b0>)
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	43db      	mvns	r3, r3
 80029b8:	4929      	ldr	r1, [pc, #164]	; (8002a60 <HAL_GPIO_Init+0x2b0>)
 80029ba:	4013      	ands	r3, r2
 80029bc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d006      	beq.n	80029d8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029ca:	4b25      	ldr	r3, [pc, #148]	; (8002a60 <HAL_GPIO_Init+0x2b0>)
 80029cc:	689a      	ldr	r2, [r3, #8]
 80029ce:	4924      	ldr	r1, [pc, #144]	; (8002a60 <HAL_GPIO_Init+0x2b0>)
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	608b      	str	r3, [r1, #8]
 80029d6:	e006      	b.n	80029e6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029d8:	4b21      	ldr	r3, [pc, #132]	; (8002a60 <HAL_GPIO_Init+0x2b0>)
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	43db      	mvns	r3, r3
 80029e0:	491f      	ldr	r1, [pc, #124]	; (8002a60 <HAL_GPIO_Init+0x2b0>)
 80029e2:	4013      	ands	r3, r2
 80029e4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d006      	beq.n	8002a00 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029f2:	4b1b      	ldr	r3, [pc, #108]	; (8002a60 <HAL_GPIO_Init+0x2b0>)
 80029f4:	68da      	ldr	r2, [r3, #12]
 80029f6:	491a      	ldr	r1, [pc, #104]	; (8002a60 <HAL_GPIO_Init+0x2b0>)
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	60cb      	str	r3, [r1, #12]
 80029fe:	e006      	b.n	8002a0e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a00:	4b17      	ldr	r3, [pc, #92]	; (8002a60 <HAL_GPIO_Init+0x2b0>)
 8002a02:	68da      	ldr	r2, [r3, #12]
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	43db      	mvns	r3, r3
 8002a08:	4915      	ldr	r1, [pc, #84]	; (8002a60 <HAL_GPIO_Init+0x2b0>)
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	3301      	adds	r3, #1
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f47f aed0 	bne.w	80027c4 <HAL_GPIO_Init+0x14>
  }
}
 8002a24:	bf00      	nop
 8002a26:	372c      	adds	r7, #44	; 0x2c
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	10210000 	.word	0x10210000
 8002a34:	10110000 	.word	0x10110000
 8002a38:	10120000 	.word	0x10120000
 8002a3c:	10310000 	.word	0x10310000
 8002a40:	10320000 	.word	0x10320000
 8002a44:	10220000 	.word	0x10220000
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	40010000 	.word	0x40010000
 8002a50:	40010800 	.word	0x40010800
 8002a54:	40010c00 	.word	0x40010c00
 8002a58:	40011000 	.word	0x40011000
 8002a5c:	40011400 	.word	0x40011400
 8002a60:	40010400 	.word	0x40010400

08002a64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	807b      	strh	r3, [r7, #2]
 8002a70:	4613      	mov	r3, r2
 8002a72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a74:	787b      	ldrb	r3, [r7, #1]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a7a:	887a      	ldrh	r2, [r7, #2]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a80:	e003      	b.n	8002a8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a82:	887b      	ldrh	r3, [r7, #2]
 8002a84:	041a      	lsls	r2, r3, #16
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	611a      	str	r2, [r3, #16]
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr

08002a94 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002aa6:	887a      	ldrh	r2, [r7, #2]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	041a      	lsls	r2, r3, #16
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	43d9      	mvns	r1, r3
 8002ab2:	887b      	ldrh	r3, [r7, #2]
 8002ab4:	400b      	ands	r3, r1
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	611a      	str	r2, [r3, #16]
}
 8002abc:	bf00      	nop
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bc80      	pop	{r7}
 8002ac4:	4770      	bx	lr
	...

08002ac8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e26c      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f000 8087 	beq.w	8002bf6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ae8:	4b92      	ldr	r3, [pc, #584]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 030c 	and.w	r3, r3, #12
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d00c      	beq.n	8002b0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002af4:	4b8f      	ldr	r3, [pc, #572]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f003 030c 	and.w	r3, r3, #12
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d112      	bne.n	8002b26 <HAL_RCC_OscConfig+0x5e>
 8002b00:	4b8c      	ldr	r3, [pc, #560]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b0c:	d10b      	bne.n	8002b26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b0e:	4b89      	ldr	r3, [pc, #548]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d06c      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x12c>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d168      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e246      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b2e:	d106      	bne.n	8002b3e <HAL_RCC_OscConfig+0x76>
 8002b30:	4b80      	ldr	r3, [pc, #512]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a7f      	ldr	r2, [pc, #508]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b3a:	6013      	str	r3, [r2, #0]
 8002b3c:	e02e      	b.n	8002b9c <HAL_RCC_OscConfig+0xd4>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10c      	bne.n	8002b60 <HAL_RCC_OscConfig+0x98>
 8002b46:	4b7b      	ldr	r3, [pc, #492]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a7a      	ldr	r2, [pc, #488]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b50:	6013      	str	r3, [r2, #0]
 8002b52:	4b78      	ldr	r3, [pc, #480]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a77      	ldr	r2, [pc, #476]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	e01d      	b.n	8002b9c <HAL_RCC_OscConfig+0xd4>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b68:	d10c      	bne.n	8002b84 <HAL_RCC_OscConfig+0xbc>
 8002b6a:	4b72      	ldr	r3, [pc, #456]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a71      	ldr	r2, [pc, #452]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	4b6f      	ldr	r3, [pc, #444]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a6e      	ldr	r2, [pc, #440]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	e00b      	b.n	8002b9c <HAL_RCC_OscConfig+0xd4>
 8002b84:	4b6b      	ldr	r3, [pc, #428]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a6a      	ldr	r2, [pc, #424]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b8e:	6013      	str	r3, [r2, #0]
 8002b90:	4b68      	ldr	r3, [pc, #416]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a67      	ldr	r2, [pc, #412]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d013      	beq.n	8002bcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba4:	f7fe fe72 	bl	800188c <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bac:	f7fe fe6e 	bl	800188c <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b64      	cmp	r3, #100	; 0x64
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e1fa      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bbe:	4b5d      	ldr	r3, [pc, #372]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0f0      	beq.n	8002bac <HAL_RCC_OscConfig+0xe4>
 8002bca:	e014      	b.n	8002bf6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bcc:	f7fe fe5e 	bl	800188c <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bd4:	f7fe fe5a 	bl	800188c <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b64      	cmp	r3, #100	; 0x64
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e1e6      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002be6:	4b53      	ldr	r3, [pc, #332]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f0      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x10c>
 8002bf2:	e000      	b.n	8002bf6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d063      	beq.n	8002cca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c02:	4b4c      	ldr	r3, [pc, #304]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f003 030c 	and.w	r3, r3, #12
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00b      	beq.n	8002c26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c0e:	4b49      	ldr	r3, [pc, #292]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f003 030c 	and.w	r3, r3, #12
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	d11c      	bne.n	8002c54 <HAL_RCC_OscConfig+0x18c>
 8002c1a:	4b46      	ldr	r3, [pc, #280]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d116      	bne.n	8002c54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c26:	4b43      	ldr	r3, [pc, #268]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d005      	beq.n	8002c3e <HAL_RCC_OscConfig+0x176>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d001      	beq.n	8002c3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e1ba      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c3e:	4b3d      	ldr	r3, [pc, #244]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	4939      	ldr	r1, [pc, #228]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c52:	e03a      	b.n	8002cca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d020      	beq.n	8002c9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c5c:	4b36      	ldr	r3, [pc, #216]	; (8002d38 <HAL_RCC_OscConfig+0x270>)
 8002c5e:	2201      	movs	r2, #1
 8002c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c62:	f7fe fe13 	bl	800188c <HAL_GetTick>
 8002c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c6a:	f7fe fe0f 	bl	800188c <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e19b      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c7c:	4b2d      	ldr	r3, [pc, #180]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0f0      	beq.n	8002c6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c88:	4b2a      	ldr	r3, [pc, #168]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	4927      	ldr	r1, [pc, #156]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	600b      	str	r3, [r1, #0]
 8002c9c:	e015      	b.n	8002cca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c9e:	4b26      	ldr	r3, [pc, #152]	; (8002d38 <HAL_RCC_OscConfig+0x270>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca4:	f7fe fdf2 	bl	800188c <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cac:	f7fe fdee 	bl	800188c <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e17a      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cbe:	4b1d      	ldr	r3, [pc, #116]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d03a      	beq.n	8002d4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d019      	beq.n	8002d12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cde:	4b17      	ldr	r3, [pc, #92]	; (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce4:	f7fe fdd2 	bl	800188c <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cec:	f7fe fdce 	bl	800188c <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e15a      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cfe:	4b0d      	ldr	r3, [pc, #52]	; (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0f0      	beq.n	8002cec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d0a:	2001      	movs	r0, #1
 8002d0c:	f000 faa8 	bl	8003260 <RCC_Delay>
 8002d10:	e01c      	b.n	8002d4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d12:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d18:	f7fe fdb8 	bl	800188c <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d1e:	e00f      	b.n	8002d40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d20:	f7fe fdb4 	bl	800188c <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d908      	bls.n	8002d40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e140      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4ec>
 8002d32:	bf00      	nop
 8002d34:	40021000 	.word	0x40021000
 8002d38:	42420000 	.word	0x42420000
 8002d3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d40:	4b9e      	ldr	r3, [pc, #632]	; (8002fbc <HAL_RCC_OscConfig+0x4f4>)
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1e9      	bne.n	8002d20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 80a6 	beq.w	8002ea6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d5e:	4b97      	ldr	r3, [pc, #604]	; (8002fbc <HAL_RCC_OscConfig+0x4f4>)
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10d      	bne.n	8002d86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d6a:	4b94      	ldr	r3, [pc, #592]	; (8002fbc <HAL_RCC_OscConfig+0x4f4>)
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	4a93      	ldr	r2, [pc, #588]	; (8002fbc <HAL_RCC_OscConfig+0x4f4>)
 8002d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d74:	61d3      	str	r3, [r2, #28]
 8002d76:	4b91      	ldr	r3, [pc, #580]	; (8002fbc <HAL_RCC_OscConfig+0x4f4>)
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7e:	60bb      	str	r3, [r7, #8]
 8002d80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d82:	2301      	movs	r3, #1
 8002d84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d86:	4b8e      	ldr	r3, [pc, #568]	; (8002fc0 <HAL_RCC_OscConfig+0x4f8>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d118      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d92:	4b8b      	ldr	r3, [pc, #556]	; (8002fc0 <HAL_RCC_OscConfig+0x4f8>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a8a      	ldr	r2, [pc, #552]	; (8002fc0 <HAL_RCC_OscConfig+0x4f8>)
 8002d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d9e:	f7fe fd75 	bl	800188c <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da6:	f7fe fd71 	bl	800188c <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b64      	cmp	r3, #100	; 0x64
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e0fd      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db8:	4b81      	ldr	r3, [pc, #516]	; (8002fc0 <HAL_RCC_OscConfig+0x4f8>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0f0      	beq.n	8002da6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d106      	bne.n	8002dda <HAL_RCC_OscConfig+0x312>
 8002dcc:	4b7b      	ldr	r3, [pc, #492]	; (8002fbc <HAL_RCC_OscConfig+0x4f4>)
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	4a7a      	ldr	r2, [pc, #488]	; (8002fbc <HAL_RCC_OscConfig+0x4f4>)
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	6213      	str	r3, [r2, #32]
 8002dd8:	e02d      	b.n	8002e36 <HAL_RCC_OscConfig+0x36e>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10c      	bne.n	8002dfc <HAL_RCC_OscConfig+0x334>
 8002de2:	4b76      	ldr	r3, [pc, #472]	; (8002fbc <HAL_RCC_OscConfig+0x4f4>)
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	4a75      	ldr	r2, [pc, #468]	; (8002fbc <HAL_RCC_OscConfig+0x4f4>)
 8002de8:	f023 0301 	bic.w	r3, r3, #1
 8002dec:	6213      	str	r3, [r2, #32]
 8002dee:	4b73      	ldr	r3, [pc, #460]	; (8002fbc <HAL_RCC_OscConfig+0x4f4>)
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	4a72      	ldr	r2, [pc, #456]	; (8002fbc <HAL_RCC_OscConfig+0x4f4>)
 8002df4:	f023 0304 	bic.w	r3, r3, #4
 8002df8:	6213      	str	r3, [r2, #32]
 8002dfa:	e01c      	b.n	8002e36 <HAL_RCC_OscConfig+0x36e>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	2b05      	cmp	r3, #5
 8002e02:	d10c      	bne.n	8002e1e <HAL_RCC_OscConfig+0x356>
 8002e04:	4b6d      	ldr	r3, [pc, #436]	; (8002fbc <HAL_RCC_OscConfig+0x4f4>)
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	4a6c      	ldr	r2, [pc, #432]	; (8002fbc <HAL_RCC_OscConfig+0x4f4>)
 8002e0a:	f043 0304 	orr.w	r3, r3, #4
 8002e0e:	6213      	str	r3, [r2, #32]
 8002e10:	4b6a      	ldr	r3, [pc, #424]	; (8002fbc <HAL_RCC_OscConfig+0x4f4>)
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	4a69      	ldr	r2, [pc, #420]	; (8002fbc <HAL_RCC_OscConfig+0x4f4>)
 8002e16:	f043 0301 	orr.w	r3, r3, #1
 8002e1a:	6213      	str	r3, [r2, #32]
 8002e1c:	e00b      	b.n	8002e36 <HAL_RCC_OscConfig+0x36e>
 8002e1e:	4b67      	ldr	r3, [pc, #412]	; (8002fbc <HAL_RCC_OscConfig+0x4f4>)
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	4a66      	ldr	r2, [pc, #408]	; (8002fbc <HAL_RCC_OscConfig+0x4f4>)
 8002e24:	f023 0301 	bic.w	r3, r3, #1
 8002e28:	6213      	str	r3, [r2, #32]
 8002e2a:	4b64      	ldr	r3, [pc, #400]	; (8002fbc <HAL_RCC_OscConfig+0x4f4>)
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	4a63      	ldr	r2, [pc, #396]	; (8002fbc <HAL_RCC_OscConfig+0x4f4>)
 8002e30:	f023 0304 	bic.w	r3, r3, #4
 8002e34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d015      	beq.n	8002e6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e3e:	f7fe fd25 	bl	800188c <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e44:	e00a      	b.n	8002e5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e46:	f7fe fd21 	bl	800188c <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e0ab      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e5c:	4b57      	ldr	r3, [pc, #348]	; (8002fbc <HAL_RCC_OscConfig+0x4f4>)
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0ee      	beq.n	8002e46 <HAL_RCC_OscConfig+0x37e>
 8002e68:	e014      	b.n	8002e94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e6a:	f7fe fd0f 	bl	800188c <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e70:	e00a      	b.n	8002e88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e72:	f7fe fd0b 	bl	800188c <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e095      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e88:	4b4c      	ldr	r3, [pc, #304]	; (8002fbc <HAL_RCC_OscConfig+0x4f4>)
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1ee      	bne.n	8002e72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e94:	7dfb      	ldrb	r3, [r7, #23]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d105      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e9a:	4b48      	ldr	r3, [pc, #288]	; (8002fbc <HAL_RCC_OscConfig+0x4f4>)
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	4a47      	ldr	r2, [pc, #284]	; (8002fbc <HAL_RCC_OscConfig+0x4f4>)
 8002ea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ea4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 8081 	beq.w	8002fb2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eb0:	4b42      	ldr	r3, [pc, #264]	; (8002fbc <HAL_RCC_OscConfig+0x4f4>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 030c 	and.w	r3, r3, #12
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d061      	beq.n	8002f80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	69db      	ldr	r3, [r3, #28]
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d146      	bne.n	8002f52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec4:	4b3f      	ldr	r3, [pc, #252]	; (8002fc4 <HAL_RCC_OscConfig+0x4fc>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eca:	f7fe fcdf 	bl	800188c <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed2:	f7fe fcdb 	bl	800188c <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e067      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ee4:	4b35      	ldr	r3, [pc, #212]	; (8002fbc <HAL_RCC_OscConfig+0x4f4>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1f0      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef8:	d108      	bne.n	8002f0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002efa:	4b30      	ldr	r3, [pc, #192]	; (8002fbc <HAL_RCC_OscConfig+0x4f4>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	492d      	ldr	r1, [pc, #180]	; (8002fbc <HAL_RCC_OscConfig+0x4f4>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f0c:	4b2b      	ldr	r3, [pc, #172]	; (8002fbc <HAL_RCC_OscConfig+0x4f4>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a19      	ldr	r1, [r3, #32]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	430b      	orrs	r3, r1
 8002f1e:	4927      	ldr	r1, [pc, #156]	; (8002fbc <HAL_RCC_OscConfig+0x4f4>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f24:	4b27      	ldr	r3, [pc, #156]	; (8002fc4 <HAL_RCC_OscConfig+0x4fc>)
 8002f26:	2201      	movs	r2, #1
 8002f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2a:	f7fe fcaf 	bl	800188c <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f30:	e008      	b.n	8002f44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f32:	f7fe fcab 	bl	800188c <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e037      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f44:	4b1d      	ldr	r3, [pc, #116]	; (8002fbc <HAL_RCC_OscConfig+0x4f4>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d0f0      	beq.n	8002f32 <HAL_RCC_OscConfig+0x46a>
 8002f50:	e02f      	b.n	8002fb2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f52:	4b1c      	ldr	r3, [pc, #112]	; (8002fc4 <HAL_RCC_OscConfig+0x4fc>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f58:	f7fe fc98 	bl	800188c <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f60:	f7fe fc94 	bl	800188c <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e020      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f72:	4b12      	ldr	r3, [pc, #72]	; (8002fbc <HAL_RCC_OscConfig+0x4f4>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1f0      	bne.n	8002f60 <HAL_RCC_OscConfig+0x498>
 8002f7e:	e018      	b.n	8002fb2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e013      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <HAL_RCC_OscConfig+0x4f4>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d106      	bne.n	8002fae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d001      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e000      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	40007000 	.word	0x40007000
 8002fc4:	42420060 	.word	0x42420060

08002fc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e0d0      	b.n	800317e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fdc:	4b6a      	ldr	r3, [pc, #424]	; (8003188 <HAL_RCC_ClockConfig+0x1c0>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d910      	bls.n	800300c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fea:	4b67      	ldr	r3, [pc, #412]	; (8003188 <HAL_RCC_ClockConfig+0x1c0>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f023 0207 	bic.w	r2, r3, #7
 8002ff2:	4965      	ldr	r1, [pc, #404]	; (8003188 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffa:	4b63      	ldr	r3, [pc, #396]	; (8003188 <HAL_RCC_ClockConfig+0x1c0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	429a      	cmp	r2, r3
 8003006:	d001      	beq.n	800300c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e0b8      	b.n	800317e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d020      	beq.n	800305a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	d005      	beq.n	8003030 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003024:	4b59      	ldr	r3, [pc, #356]	; (800318c <HAL_RCC_ClockConfig+0x1c4>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	4a58      	ldr	r2, [pc, #352]	; (800318c <HAL_RCC_ClockConfig+0x1c4>)
 800302a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800302e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0308 	and.w	r3, r3, #8
 8003038:	2b00      	cmp	r3, #0
 800303a:	d005      	beq.n	8003048 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800303c:	4b53      	ldr	r3, [pc, #332]	; (800318c <HAL_RCC_ClockConfig+0x1c4>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	4a52      	ldr	r2, [pc, #328]	; (800318c <HAL_RCC_ClockConfig+0x1c4>)
 8003042:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003046:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003048:	4b50      	ldr	r3, [pc, #320]	; (800318c <HAL_RCC_ClockConfig+0x1c4>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	494d      	ldr	r1, [pc, #308]	; (800318c <HAL_RCC_ClockConfig+0x1c4>)
 8003056:	4313      	orrs	r3, r2
 8003058:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d040      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d107      	bne.n	800307e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800306e:	4b47      	ldr	r3, [pc, #284]	; (800318c <HAL_RCC_ClockConfig+0x1c4>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d115      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e07f      	b.n	800317e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b02      	cmp	r3, #2
 8003084:	d107      	bne.n	8003096 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003086:	4b41      	ldr	r3, [pc, #260]	; (800318c <HAL_RCC_ClockConfig+0x1c4>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d109      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e073      	b.n	800317e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003096:	4b3d      	ldr	r3, [pc, #244]	; (800318c <HAL_RCC_ClockConfig+0x1c4>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e06b      	b.n	800317e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030a6:	4b39      	ldr	r3, [pc, #228]	; (800318c <HAL_RCC_ClockConfig+0x1c4>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f023 0203 	bic.w	r2, r3, #3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	4936      	ldr	r1, [pc, #216]	; (800318c <HAL_RCC_ClockConfig+0x1c4>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030b8:	f7fe fbe8 	bl	800188c <HAL_GetTick>
 80030bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030be:	e00a      	b.n	80030d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c0:	f7fe fbe4 	bl	800188c <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e053      	b.n	800317e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d6:	4b2d      	ldr	r3, [pc, #180]	; (800318c <HAL_RCC_ClockConfig+0x1c4>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f003 020c 	and.w	r2, r3, #12
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d1eb      	bne.n	80030c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030e8:	4b27      	ldr	r3, [pc, #156]	; (8003188 <HAL_RCC_ClockConfig+0x1c0>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d210      	bcs.n	8003118 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f6:	4b24      	ldr	r3, [pc, #144]	; (8003188 <HAL_RCC_ClockConfig+0x1c0>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f023 0207 	bic.w	r2, r3, #7
 80030fe:	4922      	ldr	r1, [pc, #136]	; (8003188 <HAL_RCC_ClockConfig+0x1c0>)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	4313      	orrs	r3, r2
 8003104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003106:	4b20      	ldr	r3, [pc, #128]	; (8003188 <HAL_RCC_ClockConfig+0x1c0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d001      	beq.n	8003118 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e032      	b.n	800317e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	d008      	beq.n	8003136 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003124:	4b19      	ldr	r3, [pc, #100]	; (800318c <HAL_RCC_ClockConfig+0x1c4>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	4916      	ldr	r1, [pc, #88]	; (800318c <HAL_RCC_ClockConfig+0x1c4>)
 8003132:	4313      	orrs	r3, r2
 8003134:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0308 	and.w	r3, r3, #8
 800313e:	2b00      	cmp	r3, #0
 8003140:	d009      	beq.n	8003156 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003142:	4b12      	ldr	r3, [pc, #72]	; (800318c <HAL_RCC_ClockConfig+0x1c4>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	490e      	ldr	r1, [pc, #56]	; (800318c <HAL_RCC_ClockConfig+0x1c4>)
 8003152:	4313      	orrs	r3, r2
 8003154:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003156:	f000 f821 	bl	800319c <HAL_RCC_GetSysClockFreq>
 800315a:	4601      	mov	r1, r0
 800315c:	4b0b      	ldr	r3, [pc, #44]	; (800318c <HAL_RCC_ClockConfig+0x1c4>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	091b      	lsrs	r3, r3, #4
 8003162:	f003 030f 	and.w	r3, r3, #15
 8003166:	4a0a      	ldr	r2, [pc, #40]	; (8003190 <HAL_RCC_ClockConfig+0x1c8>)
 8003168:	5cd3      	ldrb	r3, [r2, r3]
 800316a:	fa21 f303 	lsr.w	r3, r1, r3
 800316e:	4a09      	ldr	r2, [pc, #36]	; (8003194 <HAL_RCC_ClockConfig+0x1cc>)
 8003170:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003172:	4b09      	ldr	r3, [pc, #36]	; (8003198 <HAL_RCC_ClockConfig+0x1d0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f7fe fb46 	bl	8001808 <HAL_InitTick>

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	40022000 	.word	0x40022000
 800318c:	40021000 	.word	0x40021000
 8003190:	08003b58 	.word	0x08003b58
 8003194:	20000008 	.word	0x20000008
 8003198:	2000000c 	.word	0x2000000c

0800319c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800319c:	b490      	push	{r4, r7}
 800319e:	b08a      	sub	sp, #40	; 0x28
 80031a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80031a2:	4b2a      	ldr	r3, [pc, #168]	; (800324c <HAL_RCC_GetSysClockFreq+0xb0>)
 80031a4:	1d3c      	adds	r4, r7, #4
 80031a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80031ac:	4b28      	ldr	r3, [pc, #160]	; (8003250 <HAL_RCC_GetSysClockFreq+0xb4>)
 80031ae:	881b      	ldrh	r3, [r3, #0]
 80031b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61fb      	str	r3, [r7, #28]
 80031b6:	2300      	movs	r3, #0
 80031b8:	61bb      	str	r3, [r7, #24]
 80031ba:	2300      	movs	r3, #0
 80031bc:	627b      	str	r3, [r7, #36]	; 0x24
 80031be:	2300      	movs	r3, #0
 80031c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80031c6:	4b23      	ldr	r3, [pc, #140]	; (8003254 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	f003 030c 	and.w	r3, r3, #12
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d002      	beq.n	80031dc <HAL_RCC_GetSysClockFreq+0x40>
 80031d6:	2b08      	cmp	r3, #8
 80031d8:	d003      	beq.n	80031e2 <HAL_RCC_GetSysClockFreq+0x46>
 80031da:	e02d      	b.n	8003238 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031dc:	4b1e      	ldr	r3, [pc, #120]	; (8003258 <HAL_RCC_GetSysClockFreq+0xbc>)
 80031de:	623b      	str	r3, [r7, #32]
      break;
 80031e0:	e02d      	b.n	800323e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	0c9b      	lsrs	r3, r3, #18
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80031ee:	4413      	add	r3, r2
 80031f0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80031f4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d013      	beq.n	8003228 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003200:	4b14      	ldr	r3, [pc, #80]	; (8003254 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	0c5b      	lsrs	r3, r3, #17
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800320e:	4413      	add	r3, r2
 8003210:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003214:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	4a0f      	ldr	r2, [pc, #60]	; (8003258 <HAL_RCC_GetSysClockFreq+0xbc>)
 800321a:	fb02 f203 	mul.w	r2, r2, r3
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	fbb2 f3f3 	udiv	r3, r2, r3
 8003224:	627b      	str	r3, [r7, #36]	; 0x24
 8003226:	e004      	b.n	8003232 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	4a0c      	ldr	r2, [pc, #48]	; (800325c <HAL_RCC_GetSysClockFreq+0xc0>)
 800322c:	fb02 f303 	mul.w	r3, r2, r3
 8003230:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	623b      	str	r3, [r7, #32]
      break;
 8003236:	e002      	b.n	800323e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003238:	4b07      	ldr	r3, [pc, #28]	; (8003258 <HAL_RCC_GetSysClockFreq+0xbc>)
 800323a:	623b      	str	r3, [r7, #32]
      break;
 800323c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800323e:	6a3b      	ldr	r3, [r7, #32]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3728      	adds	r7, #40	; 0x28
 8003244:	46bd      	mov	sp, r7
 8003246:	bc90      	pop	{r4, r7}
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	08003b44 	.word	0x08003b44
 8003250:	08003b54 	.word	0x08003b54
 8003254:	40021000 	.word	0x40021000
 8003258:	007a1200 	.word	0x007a1200
 800325c:	003d0900 	.word	0x003d0900

08003260 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003268:	4b0a      	ldr	r3, [pc, #40]	; (8003294 <RCC_Delay+0x34>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a0a      	ldr	r2, [pc, #40]	; (8003298 <RCC_Delay+0x38>)
 800326e:	fba2 2303 	umull	r2, r3, r2, r3
 8003272:	0a5b      	lsrs	r3, r3, #9
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	fb02 f303 	mul.w	r3, r2, r3
 800327a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800327c:	bf00      	nop
  }
  while (Delay --);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	1e5a      	subs	r2, r3, #1
 8003282:	60fa      	str	r2, [r7, #12]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1f9      	bne.n	800327c <RCC_Delay+0x1c>
}
 8003288:	bf00      	nop
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	20000008 	.word	0x20000008
 8003298:	10624dd3 	.word	0x10624dd3

0800329c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e041      	b.n	8003332 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d106      	bne.n	80032c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7fe f9fa 	bl	80016bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2202      	movs	r2, #2
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3304      	adds	r3, #4
 80032d8:	4619      	mov	r1, r3
 80032da:	4610      	mov	r0, r2
 80032dc:	f000 fa92 	bl	8003804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
	...

0800333c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b01      	cmp	r3, #1
 800334e:	d001      	beq.n	8003354 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e03a      	b.n	80033ca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 0201 	orr.w	r2, r2, #1
 800336a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a18      	ldr	r2, [pc, #96]	; (80033d4 <HAL_TIM_Base_Start_IT+0x98>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d00e      	beq.n	8003394 <HAL_TIM_Base_Start_IT+0x58>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800337e:	d009      	beq.n	8003394 <HAL_TIM_Base_Start_IT+0x58>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a14      	ldr	r2, [pc, #80]	; (80033d8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d004      	beq.n	8003394 <HAL_TIM_Base_Start_IT+0x58>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a13      	ldr	r2, [pc, #76]	; (80033dc <HAL_TIM_Base_Start_IT+0xa0>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d111      	bne.n	80033b8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2b06      	cmp	r3, #6
 80033a4:	d010      	beq.n	80033c8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f042 0201 	orr.w	r2, r2, #1
 80033b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b6:	e007      	b.n	80033c8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0201 	orr.w	r2, r2, #1
 80033c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr
 80033d4:	40012c00 	.word	0x40012c00
 80033d8:	40000400 	.word	0x40000400
 80033dc:	40000800 	.word	0x40000800

080033e0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68da      	ldr	r2, [r3, #12]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0201 	bic.w	r2, r2, #1
 80033f6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6a1a      	ldr	r2, [r3, #32]
 80033fe:	f241 1311 	movw	r3, #4369	; 0x1111
 8003402:	4013      	ands	r3, r2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10f      	bne.n	8003428 <HAL_TIM_Base_Stop_IT+0x48>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6a1a      	ldr	r2, [r3, #32]
 800340e:	f240 4344 	movw	r3, #1092	; 0x444
 8003412:	4013      	ands	r3, r2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d107      	bne.n	8003428 <HAL_TIM_Base_Stop_IT+0x48>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0201 	bic.w	r2, r2, #1
 8003426:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr

0800343c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b02      	cmp	r3, #2
 8003450:	d122      	bne.n	8003498 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b02      	cmp	r3, #2
 800345e:	d11b      	bne.n	8003498 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f06f 0202 	mvn.w	r2, #2
 8003468:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f9a4 	bl	80037cc <HAL_TIM_IC_CaptureCallback>
 8003484:	e005      	b.n	8003492 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f997 	bl	80037ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 f9a6 	bl	80037de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	f003 0304 	and.w	r3, r3, #4
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	d122      	bne.n	80034ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b04      	cmp	r3, #4
 80034b2:	d11b      	bne.n	80034ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f06f 0204 	mvn.w	r2, #4
 80034bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2202      	movs	r2, #2
 80034c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f97a 	bl	80037cc <HAL_TIM_IC_CaptureCallback>
 80034d8:	e005      	b.n	80034e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f96d 	bl	80037ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 f97c 	bl	80037de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	2b08      	cmp	r3, #8
 80034f8:	d122      	bne.n	8003540 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	f003 0308 	and.w	r3, r3, #8
 8003504:	2b08      	cmp	r3, #8
 8003506:	d11b      	bne.n	8003540 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f06f 0208 	mvn.w	r2, #8
 8003510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2204      	movs	r2, #4
 8003516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f950 	bl	80037cc <HAL_TIM_IC_CaptureCallback>
 800352c:	e005      	b.n	800353a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f943 	bl	80037ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 f952 	bl	80037de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	f003 0310 	and.w	r3, r3, #16
 800354a:	2b10      	cmp	r3, #16
 800354c:	d122      	bne.n	8003594 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f003 0310 	and.w	r3, r3, #16
 8003558:	2b10      	cmp	r3, #16
 800355a:	d11b      	bne.n	8003594 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f06f 0210 	mvn.w	r2, #16
 8003564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2208      	movs	r2, #8
 800356a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f926 	bl	80037cc <HAL_TIM_IC_CaptureCallback>
 8003580:	e005      	b.n	800358e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f919 	bl	80037ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 f928 	bl	80037de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d10e      	bne.n	80035c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d107      	bne.n	80035c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f06f 0201 	mvn.w	r2, #1
 80035b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7fd fe48 	bl	8001250 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ca:	2b80      	cmp	r3, #128	; 0x80
 80035cc:	d10e      	bne.n	80035ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d8:	2b80      	cmp	r3, #128	; 0x80
 80035da:	d107      	bne.n	80035ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 fa6b 	bl	8003ac2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f6:	2b40      	cmp	r3, #64	; 0x40
 80035f8:	d10e      	bne.n	8003618 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003604:	2b40      	cmp	r3, #64	; 0x40
 8003606:	d107      	bne.n	8003618 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f8ec 	bl	80037f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	f003 0320 	and.w	r3, r3, #32
 8003622:	2b20      	cmp	r3, #32
 8003624:	d10e      	bne.n	8003644 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	f003 0320 	and.w	r3, r3, #32
 8003630:	2b20      	cmp	r3, #32
 8003632:	d107      	bne.n	8003644 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f06f 0220 	mvn.w	r2, #32
 800363c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 fa36 	bl	8003ab0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003644:	bf00      	nop
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800365c:	2b01      	cmp	r3, #1
 800365e:	d101      	bne.n	8003664 <HAL_TIM_ConfigClockSource+0x18>
 8003660:	2302      	movs	r3, #2
 8003662:	e0a6      	b.n	80037b2 <HAL_TIM_ConfigClockSource+0x166>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003682:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800368a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b40      	cmp	r3, #64	; 0x40
 800369a:	d067      	beq.n	800376c <HAL_TIM_ConfigClockSource+0x120>
 800369c:	2b40      	cmp	r3, #64	; 0x40
 800369e:	d80b      	bhi.n	80036b8 <HAL_TIM_ConfigClockSource+0x6c>
 80036a0:	2b10      	cmp	r3, #16
 80036a2:	d073      	beq.n	800378c <HAL_TIM_ConfigClockSource+0x140>
 80036a4:	2b10      	cmp	r3, #16
 80036a6:	d802      	bhi.n	80036ae <HAL_TIM_ConfigClockSource+0x62>
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d06f      	beq.n	800378c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80036ac:	e078      	b.n	80037a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80036ae:	2b20      	cmp	r3, #32
 80036b0:	d06c      	beq.n	800378c <HAL_TIM_ConfigClockSource+0x140>
 80036b2:	2b30      	cmp	r3, #48	; 0x30
 80036b4:	d06a      	beq.n	800378c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80036b6:	e073      	b.n	80037a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80036b8:	2b70      	cmp	r3, #112	; 0x70
 80036ba:	d00d      	beq.n	80036d8 <HAL_TIM_ConfigClockSource+0x8c>
 80036bc:	2b70      	cmp	r3, #112	; 0x70
 80036be:	d804      	bhi.n	80036ca <HAL_TIM_ConfigClockSource+0x7e>
 80036c0:	2b50      	cmp	r3, #80	; 0x50
 80036c2:	d033      	beq.n	800372c <HAL_TIM_ConfigClockSource+0xe0>
 80036c4:	2b60      	cmp	r3, #96	; 0x60
 80036c6:	d041      	beq.n	800374c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80036c8:	e06a      	b.n	80037a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80036ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ce:	d066      	beq.n	800379e <HAL_TIM_ConfigClockSource+0x152>
 80036d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036d4:	d017      	beq.n	8003706 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80036d6:	e063      	b.n	80037a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6818      	ldr	r0, [r3, #0]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	6899      	ldr	r1, [r3, #8]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	f000 f965 	bl	80039b6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036fa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	609a      	str	r2, [r3, #8]
      break;
 8003704:	e04c      	b.n	80037a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6818      	ldr	r0, [r3, #0]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	6899      	ldr	r1, [r3, #8]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	f000 f94e 	bl	80039b6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003728:	609a      	str	r2, [r3, #8]
      break;
 800372a:	e039      	b.n	80037a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6818      	ldr	r0, [r3, #0]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	6859      	ldr	r1, [r3, #4]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	461a      	mov	r2, r3
 800373a:	f000 f8c5 	bl	80038c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2150      	movs	r1, #80	; 0x50
 8003744:	4618      	mov	r0, r3
 8003746:	f000 f91c 	bl	8003982 <TIM_ITRx_SetConfig>
      break;
 800374a:	e029      	b.n	80037a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6818      	ldr	r0, [r3, #0]
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	6859      	ldr	r1, [r3, #4]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	461a      	mov	r2, r3
 800375a:	f000 f8e3 	bl	8003924 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2160      	movs	r1, #96	; 0x60
 8003764:	4618      	mov	r0, r3
 8003766:	f000 f90c 	bl	8003982 <TIM_ITRx_SetConfig>
      break;
 800376a:	e019      	b.n	80037a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6818      	ldr	r0, [r3, #0]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	6859      	ldr	r1, [r3, #4]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	461a      	mov	r2, r3
 800377a:	f000 f8a5 	bl	80038c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2140      	movs	r1, #64	; 0x40
 8003784:	4618      	mov	r0, r3
 8003786:	f000 f8fc 	bl	8003982 <TIM_ITRx_SetConfig>
      break;
 800378a:	e009      	b.n	80037a0 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4619      	mov	r1, r3
 8003796:	4610      	mov	r0, r2
 8003798:	f000 f8f3 	bl	8003982 <TIM_ITRx_SetConfig>
        break;
 800379c:	e000      	b.n	80037a0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800379e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bc80      	pop	{r7}
 80037ca:	4770      	bx	lr

080037cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr

080037de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bc80      	pop	{r7}
 80037ee:	4770      	bx	lr

080037f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bc80      	pop	{r7}
 8003800:	4770      	bx	lr
	...

08003804 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a29      	ldr	r2, [pc, #164]	; (80038bc <TIM_Base_SetConfig+0xb8>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d00b      	beq.n	8003834 <TIM_Base_SetConfig+0x30>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003822:	d007      	beq.n	8003834 <TIM_Base_SetConfig+0x30>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a26      	ldr	r2, [pc, #152]	; (80038c0 <TIM_Base_SetConfig+0xbc>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d003      	beq.n	8003834 <TIM_Base_SetConfig+0x30>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a25      	ldr	r2, [pc, #148]	; (80038c4 <TIM_Base_SetConfig+0xc0>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d108      	bne.n	8003846 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800383a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	4313      	orrs	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a1c      	ldr	r2, [pc, #112]	; (80038bc <TIM_Base_SetConfig+0xb8>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d00b      	beq.n	8003866 <TIM_Base_SetConfig+0x62>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003854:	d007      	beq.n	8003866 <TIM_Base_SetConfig+0x62>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a19      	ldr	r2, [pc, #100]	; (80038c0 <TIM_Base_SetConfig+0xbc>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d003      	beq.n	8003866 <TIM_Base_SetConfig+0x62>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a18      	ldr	r2, [pc, #96]	; (80038c4 <TIM_Base_SetConfig+0xc0>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d108      	bne.n	8003878 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800386c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	4313      	orrs	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	4313      	orrs	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a07      	ldr	r2, [pc, #28]	; (80038bc <TIM_Base_SetConfig+0xb8>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d103      	bne.n	80038ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	691a      	ldr	r2, [r3, #16]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	615a      	str	r2, [r3, #20]
}
 80038b2:	bf00      	nop
 80038b4:	3714      	adds	r7, #20
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr
 80038bc:	40012c00 	.word	0x40012c00
 80038c0:	40000400 	.word	0x40000400
 80038c4:	40000800 	.word	0x40000800

080038c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b087      	sub	sp, #28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	f023 0201 	bic.w	r2, r3, #1
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	011b      	lsls	r3, r3, #4
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f023 030a 	bic.w	r3, r3, #10
 8003904:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	4313      	orrs	r3, r2
 800390c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	621a      	str	r2, [r3, #32]
}
 800391a:	bf00      	nop
 800391c:	371c      	adds	r7, #28
 800391e:	46bd      	mov	sp, r7
 8003920:	bc80      	pop	{r7}
 8003922:	4770      	bx	lr

08003924 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	f023 0210 	bic.w	r2, r3, #16
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800394e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	031b      	lsls	r3, r3, #12
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	4313      	orrs	r3, r2
 8003958:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003960:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	4313      	orrs	r3, r2
 800396a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	621a      	str	r2, [r3, #32]
}
 8003978:	bf00      	nop
 800397a:	371c      	adds	r7, #28
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr

08003982 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003982:	b480      	push	{r7}
 8003984:	b085      	sub	sp, #20
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
 800398a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003998:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4313      	orrs	r3, r2
 80039a0:	f043 0307 	orr.w	r3, r3, #7
 80039a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	609a      	str	r2, [r3, #8]
}
 80039ac:	bf00      	nop
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc80      	pop	{r7}
 80039b4:	4770      	bx	lr

080039b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b087      	sub	sp, #28
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	60f8      	str	r0, [r7, #12]
 80039be:	60b9      	str	r1, [r7, #8]
 80039c0:	607a      	str	r2, [r7, #4]
 80039c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	021a      	lsls	r2, r3, #8
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	431a      	orrs	r2, r3
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	4313      	orrs	r3, r2
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	609a      	str	r2, [r3, #8]
}
 80039ea:	bf00      	nop
 80039ec:	371c      	adds	r7, #28
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr

080039f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d101      	bne.n	8003a0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	e046      	b.n	8003a9a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a16      	ldr	r2, [pc, #88]	; (8003aa4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d00e      	beq.n	8003a6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a58:	d009      	beq.n	8003a6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a12      	ldr	r2, [pc, #72]	; (8003aa8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d004      	beq.n	8003a6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a10      	ldr	r2, [pc, #64]	; (8003aac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d10c      	bne.n	8003a88 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr
 8003aa4:	40012c00 	.word	0x40012c00
 8003aa8:	40000400 	.word	0x40000400
 8003aac:	40000800 	.word	0x40000800

08003ab0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bc80      	pop	{r7}
 8003ac0:	4770      	bx	lr

08003ac2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b083      	sub	sp, #12
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003aca:	bf00      	nop
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr

08003ad4 <__libc_init_array>:
 8003ad4:	b570      	push	{r4, r5, r6, lr}
 8003ad6:	2500      	movs	r5, #0
 8003ad8:	4e0c      	ldr	r6, [pc, #48]	; (8003b0c <__libc_init_array+0x38>)
 8003ada:	4c0d      	ldr	r4, [pc, #52]	; (8003b10 <__libc_init_array+0x3c>)
 8003adc:	1ba4      	subs	r4, r4, r6
 8003ade:	10a4      	asrs	r4, r4, #2
 8003ae0:	42a5      	cmp	r5, r4
 8003ae2:	d109      	bne.n	8003af8 <__libc_init_array+0x24>
 8003ae4:	f000 f822 	bl	8003b2c <_init>
 8003ae8:	2500      	movs	r5, #0
 8003aea:	4e0a      	ldr	r6, [pc, #40]	; (8003b14 <__libc_init_array+0x40>)
 8003aec:	4c0a      	ldr	r4, [pc, #40]	; (8003b18 <__libc_init_array+0x44>)
 8003aee:	1ba4      	subs	r4, r4, r6
 8003af0:	10a4      	asrs	r4, r4, #2
 8003af2:	42a5      	cmp	r5, r4
 8003af4:	d105      	bne.n	8003b02 <__libc_init_array+0x2e>
 8003af6:	bd70      	pop	{r4, r5, r6, pc}
 8003af8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003afc:	4798      	blx	r3
 8003afe:	3501      	adds	r5, #1
 8003b00:	e7ee      	b.n	8003ae0 <__libc_init_array+0xc>
 8003b02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b06:	4798      	blx	r3
 8003b08:	3501      	adds	r5, #1
 8003b0a:	e7f2      	b.n	8003af2 <__libc_init_array+0x1e>
 8003b0c:	08003b68 	.word	0x08003b68
 8003b10:	08003b68 	.word	0x08003b68
 8003b14:	08003b68 	.word	0x08003b68
 8003b18:	08003b6c 	.word	0x08003b6c

08003b1c <memset>:
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	4402      	add	r2, r0
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d100      	bne.n	8003b26 <memset+0xa>
 8003b24:	4770      	bx	lr
 8003b26:	f803 1b01 	strb.w	r1, [r3], #1
 8003b2a:	e7f9      	b.n	8003b20 <memset+0x4>

08003b2c <_init>:
 8003b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2e:	bf00      	nop
 8003b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b32:	bc08      	pop	{r3}
 8003b34:	469e      	mov	lr, r3
 8003b36:	4770      	bx	lr

08003b38 <_fini>:
 8003b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3a:	bf00      	nop
 8003b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b3e:	bc08      	pop	{r3}
 8003b40:	469e      	mov	lr, r3
 8003b42:	4770      	bx	lr
