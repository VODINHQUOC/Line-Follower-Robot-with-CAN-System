
ReadTCR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004634  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08004740  08004740  00014740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004764  08004764  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08004764  08004764  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004764  08004764  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004764  08004764  00014764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004768  08004768  00014768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  0800476c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000034  080047a0  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  080047a0  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b554  00000000  00000000  0002005d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c14  00000000  00000000  0002b5b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c48  00000000  00000000  0002d1c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b60  00000000  00000000  0002de10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014290  00000000  00000000  0002e970  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009843  00000000  00000000  00042c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00073497  00000000  00000000  0004c443  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bf8da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000345c  00000000  00000000  000bf958  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000034 	.word	0x20000034
 8000128:	00000000 	.word	0x00000000
 800012c:	08004728 	.word	0x08004728

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000038 	.word	0x20000038
 8000148:	08004728 	.word	0x08004728

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2uiz>:
 80008e8:	004a      	lsls	r2, r1, #1
 80008ea:	d211      	bcs.n	8000910 <__aeabi_d2uiz+0x28>
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d211      	bcs.n	8000916 <__aeabi_d2uiz+0x2e>
 80008f2:	d50d      	bpl.n	8000910 <__aeabi_d2uiz+0x28>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d40e      	bmi.n	800091c <__aeabi_d2uiz+0x34>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	fa23 f002 	lsr.w	r0, r3, r2
 800090e:	4770      	bx	lr
 8000910:	f04f 0000 	mov.w	r0, #0
 8000914:	4770      	bx	lr
 8000916:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091a:	d102      	bne.n	8000922 <__aeabi_d2uiz+0x3a>
 800091c:	f04f 30ff 	mov.w	r0, #4294967295
 8000920:	4770      	bx	lr
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	4770      	bx	lr

08000928 <__aeabi_d2f>:
 8000928:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800092c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000930:	bf24      	itt	cs
 8000932:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000936:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800093a:	d90d      	bls.n	8000958 <__aeabi_d2f+0x30>
 800093c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000940:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000944:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000948:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800094c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000950:	bf08      	it	eq
 8000952:	f020 0001 	biceq.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800095c:	d121      	bne.n	80009a2 <__aeabi_d2f+0x7a>
 800095e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000962:	bfbc      	itt	lt
 8000964:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000968:	4770      	bxlt	lr
 800096a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000972:	f1c2 0218 	rsb	r2, r2, #24
 8000976:	f1c2 0c20 	rsb	ip, r2, #32
 800097a:	fa10 f30c 	lsls.w	r3, r0, ip
 800097e:	fa20 f002 	lsr.w	r0, r0, r2
 8000982:	bf18      	it	ne
 8000984:	f040 0001 	orrne.w	r0, r0, #1
 8000988:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000990:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000994:	ea40 000c 	orr.w	r0, r0, ip
 8000998:	fa23 f302 	lsr.w	r3, r3, r2
 800099c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009a0:	e7cc      	b.n	800093c <__aeabi_d2f+0x14>
 80009a2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009a6:	d107      	bne.n	80009b8 <__aeabi_d2f+0x90>
 80009a8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009ac:	bf1e      	ittt	ne
 80009ae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009b2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009b6:	4770      	bxne	lr
 80009b8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop

080009c8 <float2byte>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void float2byte(float float_input,uint8_t* data_in)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]
	union class1{
		float value_float;
		uint8_t data[4];
	};
	union class1 t;
	t.value_float=float_input;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	60fb      	str	r3, [r7, #12]
	data_in[0]=t.data[0];
 80009d6:	7b3a      	ldrb	r2, [r7, #12]
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	701a      	strb	r2, [r3, #0]
	data_in[1]=t.data[1];
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	3301      	adds	r3, #1
 80009e0:	7b7a      	ldrb	r2, [r7, #13]
 80009e2:	701a      	strb	r2, [r3, #0]
	data_in[2]=t.data[2];
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	3302      	adds	r3, #2
 80009e8:	7bba      	ldrb	r2, [r7, #14]
 80009ea:	701a      	strb	r2, [r3, #0]
	data_in[3]=t.data[3];
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	3303      	adds	r3, #3
 80009f0:	7bfa      	ldrb	r2, [r7, #15]
 80009f2:	701a      	strb	r2, [r3, #0]

}
 80009f4:	bf00      	nop
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bc80      	pop	{r7}
 80009fc:	4770      	bx	lr
	...

08000a00 <CANbus_Transmit>:
uint8_t TX_Message[8] = {0,0,0,0,0,0,0,0};
uint8_t RX_Message[8] = {0,0,0,0,0,0,0,0};


void CANbus_Transmit(uint32_t StdID, uint8_t can_DLC,uint8_t* can_Data)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	460b      	mov	r3, r1
 8000a0a:	607a      	str	r2, [r7, #4]
 8000a0c:	72fb      	strb	r3, [r7, #11]
	uint32_t TransmitMailbox;
	TxMessage.StdId=StdID;
 8000a0e:	4a18      	ldr	r2, [pc, #96]	; (8000a70 <CANbus_Transmit+0x70>)
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	6013      	str	r3, [r2, #0]
	TxMessage.ExtId=0;
 8000a14:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <CANbus_Transmit+0x70>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	605a      	str	r2, [r3, #4]
	TxMessage.RTR=CAN_RTR_DATA;
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <CANbus_Transmit+0x70>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
	TxMessage.DLC=can_DLC;
 8000a20:	7afb      	ldrb	r3, [r7, #11]
 8000a22:	4a13      	ldr	r2, [pc, #76]	; (8000a70 <CANbus_Transmit+0x70>)
 8000a24:	6113      	str	r3, [r2, #16]
	TxMessage.IDE=CAN_ID_STD;
 8000a26:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <CANbus_Transmit+0x70>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
	TxMessage.TransmitGlobalTime = DISABLE;
 8000a2c:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <CANbus_Transmit+0x70>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	751a      	strb	r2, [r3, #20]
	HAL_CAN_AddTxMessage(&hcan, &TxMessage, can_Data, &TransmitMailbox);
 8000a32:	f107 0310 	add.w	r3, r7, #16
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	490d      	ldr	r1, [pc, #52]	; (8000a70 <CANbus_Transmit+0x70>)
 8000a3a:	480e      	ldr	r0, [pc, #56]	; (8000a74 <CANbus_Transmit+0x74>)
 8000a3c:	f001 fd10 	bl	8002460 <HAL_CAN_AddTxMessage>
	uint32_t k=0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
	while((HAL_CAN_IsTxMessagePending(&hcan, TransmitMailbox) != 1) && (k!=0xFFFF))
 8000a44:	e002      	b.n	8000a4c <CANbus_Transmit+0x4c>
	{
		k++;
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	617b      	str	r3, [r7, #20]
	while((HAL_CAN_IsTxMessagePending(&hcan, TransmitMailbox) != 1) && (k!=0xFFFF))
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4808      	ldr	r0, [pc, #32]	; (8000a74 <CANbus_Transmit+0x74>)
 8000a52:	f001 fddf 	bl	8002614 <HAL_CAN_IsTxMessagePending>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d004      	beq.n	8000a66 <CANbus_Transmit+0x66>
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d1ef      	bne.n	8000a46 <CANbus_Transmit+0x46>

	}
}
 8000a66:	bf00      	nop
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000194 	.word	0x20000194
 8000a74:	200000b8 	.word	0x200000b8

08000a78 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxMessage, RX_Message); //Receive CAN bus message to canRX buffer
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <HAL_CAN_RxFifo1MsgPendingCallback+0x54>)
 8000a82:	4a13      	ldr	r2, [pc, #76]	; (8000ad0 <HAL_CAN_RxFifo1MsgPendingCallback+0x58>)
 8000a84:	2101      	movs	r1, #1
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f001 fde7 	bl	800265a <HAL_CAN_GetRxMessage>

	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	if (RxMessage.StdId == TCR_ID)
 8000a8c:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <HAL_CAN_RxFifo1MsgPendingCallback+0x58>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b1d      	cmp	r3, #29
 8000a92:	d116      	bne.n	8000ac2 <HAL_CAN_RxFifo1MsgPendingCallback+0x4a>
	{

		if((RX_Message[0] == 'R') && (RX_Message[0] == 'S'))
 8000a94:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <HAL_CAN_RxFifo1MsgPendingCallback+0x54>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b52      	cmp	r3, #82	; 0x52
 8000a9a:	d107      	bne.n	8000aac <HAL_CAN_RxFifo1MsgPendingCallback+0x34>
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <HAL_CAN_RxFifo1MsgPendingCallback+0x54>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b53      	cmp	r3, #83	; 0x53
 8000aa2:	d103      	bne.n	8000aac <HAL_CAN_RxFifo1MsgPendingCallback+0x34>
		{
			HAL_TIM_Base_Start_IT(&htim2);
 8000aa4:	480b      	ldr	r0, [pc, #44]	; (8000ad4 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 8000aa6:	f003 fa94 	bl	8003fd2 <HAL_TIM_Base_Start_IT>
		// Start TIMER2


	}

}
 8000aaa:	e00a      	b.n	8000ac2 <HAL_CAN_RxFifo1MsgPendingCallback+0x4a>
		else if ((RX_Message[0] == 'S') && (RX_Message[0] == 'T'))
 8000aac:	4b07      	ldr	r3, [pc, #28]	; (8000acc <HAL_CAN_RxFifo1MsgPendingCallback+0x54>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b53      	cmp	r3, #83	; 0x53
 8000ab2:	d106      	bne.n	8000ac2 <HAL_CAN_RxFifo1MsgPendingCallback+0x4a>
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <HAL_CAN_RxFifo1MsgPendingCallback+0x54>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b54      	cmp	r3, #84	; 0x54
 8000aba:	d102      	bne.n	8000ac2 <HAL_CAN_RxFifo1MsgPendingCallback+0x4a>
			HAL_TIM_Base_Stop_IT(&htim2);
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 8000abe:	f003 faab 	bl	8004018 <HAL_TIM_Base_Stop_IT>
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000058 	.word	0x20000058
 8000ad0:	200001ac 	.word	0x200001ac
 8000ad4:	20000154 	.word	0x20000154

08000ad8 <calibrate_linesensor>:
uint16_t PRE_DATA_TCR[7]={0,0,0,0,0,0,0};
uint16_t TCR_min[7]={125,180,150,180,175,210,190};
uint16_t TCR_max[7]={3100,3160,2900,3280,3348,3280,3400};
uint16_t ymax=3000,ymin=100;
void calibrate_linesensor(void)
{
 8000ad8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000adc:	b082      	sub	sp, #8
 8000ade:	af00      	add	r7, sp, #0
	for(uint8_t i=0;i<7;i++)
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	71fb      	strb	r3, [r7, #7]
 8000ae4:	e052      	b.n	8000b8c <calibrate_linesensor+0xb4>
	{
		DATA_TCR[i]=(uint16_t)(ymin+1.0*(ymax-ymin)*(PRE_DATA_TCR[i]-TCR_min[i])/(TCR_max[i]-TCR_min[i])*1.0);
 8000ae6:	4b2d      	ldr	r3, [pc, #180]	; (8000b9c <calibrate_linesensor+0xc4>)
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fc80 	bl	80003f0 <__aeabi_i2d>
 8000af0:	4604      	mov	r4, r0
 8000af2:	460d      	mov	r5, r1
 8000af4:	4b2a      	ldr	r3, [pc, #168]	; (8000ba0 <calibrate_linesensor+0xc8>)
 8000af6:	881b      	ldrh	r3, [r3, #0]
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b28      	ldr	r3, [pc, #160]	; (8000b9c <calibrate_linesensor+0xc4>)
 8000afc:	881b      	ldrh	r3, [r3, #0]
 8000afe:	1ad3      	subs	r3, r2, r3
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff fc75 	bl	80003f0 <__aeabi_i2d>
 8000b06:	4680      	mov	r8, r0
 8000b08:	4689      	mov	r9, r1
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	4a25      	ldr	r2, [pc, #148]	; (8000ba4 <calibrate_linesensor+0xcc>)
 8000b0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b12:	4619      	mov	r1, r3
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	4a24      	ldr	r2, [pc, #144]	; (8000ba8 <calibrate_linesensor+0xd0>)
 8000b18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b1c:	1acb      	subs	r3, r1, r3
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fc66 	bl	80003f0 <__aeabi_i2d>
 8000b24:	4602      	mov	r2, r0
 8000b26:	460b      	mov	r3, r1
 8000b28:	4640      	mov	r0, r8
 8000b2a:	4649      	mov	r1, r9
 8000b2c:	f7ff fcca 	bl	80004c4 <__aeabi_dmul>
 8000b30:	4602      	mov	r2, r0
 8000b32:	460b      	mov	r3, r1
 8000b34:	4690      	mov	r8, r2
 8000b36:	4699      	mov	r9, r3
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	4a1c      	ldr	r2, [pc, #112]	; (8000bac <calibrate_linesensor+0xd4>)
 8000b3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b40:	4619      	mov	r1, r3
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	4a18      	ldr	r2, [pc, #96]	; (8000ba8 <calibrate_linesensor+0xd0>)
 8000b46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b4a:	1acb      	subs	r3, r1, r3
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff fc4f 	bl	80003f0 <__aeabi_i2d>
 8000b52:	4602      	mov	r2, r0
 8000b54:	460b      	mov	r3, r1
 8000b56:	4640      	mov	r0, r8
 8000b58:	4649      	mov	r1, r9
 8000b5a:	f7ff fddd 	bl	8000718 <__aeabi_ddiv>
 8000b5e:	4602      	mov	r2, r0
 8000b60:	460b      	mov	r3, r1
 8000b62:	4620      	mov	r0, r4
 8000b64:	4629      	mov	r1, r5
 8000b66:	f7ff faf7 	bl	8000158 <__adddf3>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	461a      	mov	r2, r3
 8000b70:	4623      	mov	r3, r4
 8000b72:	79fc      	ldrb	r4, [r7, #7]
 8000b74:	4610      	mov	r0, r2
 8000b76:	4619      	mov	r1, r3
 8000b78:	f7ff feb6 	bl	80008e8 <__aeabi_d2uiz>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	b29a      	uxth	r2, r3
 8000b80:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <calibrate_linesensor+0xd8>)
 8000b82:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for(uint8_t i=0;i<7;i++)
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	71fb      	strb	r3, [r7, #7]
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	2b06      	cmp	r3, #6
 8000b90:	d9a9      	bls.n	8000ae6 <calibrate_linesensor+0xe>
	}

}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000b9c:	20000024 	.word	0x20000024
 8000ba0:	20000022 	.word	0x20000022
 8000ba4:	20000080 	.word	0x20000080
 8000ba8:	20000004 	.word	0x20000004
 8000bac:	20000014 	.word	0x20000014
 8000bb0:	20000068 	.word	0x20000068

08000bb4 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bb4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM2)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bc6:	f040 81d3 	bne.w	8000f70 <HAL_TIM_PeriodElapsedCallback+0x3bc>
	{
		HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8000bca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bce:	48c5      	ldr	r0, [pc, #788]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000bd0:	f002 fd1b 	bl	800360a <HAL_GPIO_TogglePin>
		  TCR_status=0x00;
 8000bd4:	4bc4      	ldr	r3, [pc, #784]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	701a      	strb	r2, [r3, #0]

		 // HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&DATA_TCR, 7);
		  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&PRE_DATA_TCR, 7);
 8000bda:	2207      	movs	r2, #7
 8000bdc:	49c3      	ldr	r1, [pc, #780]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000bde:	48c4      	ldr	r0, [pc, #784]	; (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8000be0:	f000 ff52 	bl	8001a88 <HAL_ADC_Start_DMA>
		  TCR1_Status=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8000be4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000be8:	48c2      	ldr	r0, [pc, #776]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8000bea:	f002 fcdf 	bl	80035ac <HAL_GPIO_ReadPin>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4bc1      	ldr	r3, [pc, #772]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8000bf4:	701a      	strb	r2, [r3, #0]
		  TCR2_Status=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 8000bf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bfa:	48c0      	ldr	r0, [pc, #768]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000bfc:	f002 fcd6 	bl	80035ac <HAL_GPIO_ReadPin>
 8000c00:	4603      	mov	r3, r0
 8000c02:	461a      	mov	r2, r3
 8000c04:	4bbe      	ldr	r3, [pc, #760]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8000c06:	701a      	strb	r2, [r3, #0]
		  TCR3_Status=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8000c08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c0c:	48bb      	ldr	r0, [pc, #748]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000c0e:	f002 fccd 	bl	80035ac <HAL_GPIO_ReadPin>
 8000c12:	4603      	mov	r3, r0
 8000c14:	461a      	mov	r2, r3
 8000c16:	4bbb      	ldr	r3, [pc, #748]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000c18:	701a      	strb	r2, [r3, #0]
		  TCR4_Status=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8000c1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c1e:	48b7      	ldr	r0, [pc, #732]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000c20:	f002 fcc4 	bl	80035ac <HAL_GPIO_ReadPin>
 8000c24:	4603      	mov	r3, r0
 8000c26:	461a      	mov	r2, r3
 8000c28:	4bb7      	ldr	r3, [pc, #732]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8000c2a:	701a      	strb	r2, [r3, #0]
		  TCR5_Status=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11);
 8000c2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c30:	48b2      	ldr	r0, [pc, #712]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000c32:	f002 fcbb 	bl	80035ac <HAL_GPIO_ReadPin>
 8000c36:	4603      	mov	r3, r0
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4bb4      	ldr	r3, [pc, #720]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000c3c:	701a      	strb	r2, [r3, #0]
		  TCR6_Status=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12);
 8000c3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c42:	48ae      	ldr	r0, [pc, #696]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000c44:	f002 fcb2 	bl	80035ac <HAL_GPIO_ReadPin>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	4bb0      	ldr	r3, [pc, #704]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8000c4e:	701a      	strb	r2, [r3, #0]
		  TCR7_Status=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8000c50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c54:	48a9      	ldr	r0, [pc, #676]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000c56:	f002 fca9 	bl	80035ac <HAL_GPIO_ReadPin>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4bad      	ldr	r3, [pc, #692]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8000c60:	701a      	strb	r2, [r3, #0]

		  calibrate_linesensor();
 8000c62:	f7ff ff39 	bl	8000ad8 <calibrate_linesensor>

		  TCR_status= TCR_status|(TCR1_Status<<6);
 8000c66:	4ba4      	ldr	r3, [pc, #656]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	019b      	lsls	r3, r3, #6
 8000c6c:	b25a      	sxtb	r2, r3
 8000c6e:	4b9e      	ldr	r3, [pc, #632]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	b25b      	sxtb	r3, r3
 8000c74:	4313      	orrs	r3, r2
 8000c76:	b25b      	sxtb	r3, r3
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4b9b      	ldr	r3, [pc, #620]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000c7c:	701a      	strb	r2, [r3, #0]
		  TCR_status= TCR_status|(TCR2_Status<<5);
 8000c7e:	4ba0      	ldr	r3, [pc, #640]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	015b      	lsls	r3, r3, #5
 8000c84:	b25a      	sxtb	r2, r3
 8000c86:	4b98      	ldr	r3, [pc, #608]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	b25b      	sxtb	r3, r3
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	b25b      	sxtb	r3, r3
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	4b95      	ldr	r3, [pc, #596]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000c94:	701a      	strb	r2, [r3, #0]
		  TCR_status= TCR_status|(TCR3_Status<<4);
 8000c96:	4b9b      	ldr	r3, [pc, #620]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	011b      	lsls	r3, r3, #4
 8000c9c:	b25a      	sxtb	r2, r3
 8000c9e:	4b92      	ldr	r3, [pc, #584]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	b25b      	sxtb	r3, r3
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	b25b      	sxtb	r3, r3
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4b8f      	ldr	r3, [pc, #572]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000cac:	701a      	strb	r2, [r3, #0]
		  TCR_status= TCR_status|(TCR4_Status<<3);
 8000cae:	4b96      	ldr	r3, [pc, #600]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	00db      	lsls	r3, r3, #3
 8000cb4:	b25a      	sxtb	r2, r3
 8000cb6:	4b8c      	ldr	r3, [pc, #560]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	b25b      	sxtb	r3, r3
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	b25b      	sxtb	r3, r3
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4b89      	ldr	r3, [pc, #548]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000cc4:	701a      	strb	r2, [r3, #0]
		  TCR_status= TCR_status|(TCR5_Status<<2);
 8000cc6:	4b91      	ldr	r3, [pc, #580]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	b25a      	sxtb	r2, r3
 8000cce:	4b86      	ldr	r3, [pc, #536]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	b25b      	sxtb	r3, r3
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	b25b      	sxtb	r3, r3
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4b83      	ldr	r3, [pc, #524]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000cdc:	701a      	strb	r2, [r3, #0]
		  TCR_status= TCR_status|(TCR6_Status<<1);
 8000cde:	4b8c      	ldr	r3, [pc, #560]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	b25a      	sxtb	r2, r3
 8000ce6:	4b80      	ldr	r3, [pc, #512]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	b25b      	sxtb	r3, r3
 8000cec:	4313      	orrs	r3, r2
 8000cee:	b25b      	sxtb	r3, r3
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4b7d      	ldr	r3, [pc, #500]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000cf4:	701a      	strb	r2, [r3, #0]
		  TCR_status= TCR_status|(TCR7_Status<<0);
 8000cf6:	4b7c      	ldr	r3, [pc, #496]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000cf8:	781a      	ldrb	r2, [r3, #0]
 8000cfa:	4b86      	ldr	r3, [pc, #536]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4b79      	ldr	r3, [pc, #484]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000d04:	701a      	strb	r2, [r3, #0]



		//  position_final = 3.14;
		  position_final =(float)((-3.0*DATA_TCR[0]-2.0*DATA_TCR[1]-1.0*DATA_TCR[2]+0.0*DATA_TCR[3]+1.0*DATA_TCR[4]+2.0*DATA_TCR[5]+3.0*DATA_TCR[6])/(1.0*DATA_TCR[0]+1.0*DATA_TCR[1]+1.0*DATA_TCR[2]+1.0*DATA_TCR[3]+1.0*DATA_TCR[4]+1.0*DATA_TCR[5]+1.0*DATA_TCR[6]));
 8000d06:	4b84      	ldr	r3, [pc, #528]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000d08:	881b      	ldrh	r3, [r3, #0]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fb70 	bl	80003f0 <__aeabi_i2d>
 8000d10:	f04f 0200 	mov.w	r2, #0
 8000d14:	4b81      	ldr	r3, [pc, #516]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x368>)
 8000d16:	f7ff fbd5 	bl	80004c4 <__aeabi_dmul>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	460c      	mov	r4, r1
 8000d1e:	4625      	mov	r5, r4
 8000d20:	461c      	mov	r4, r3
 8000d22:	4b7d      	ldr	r3, [pc, #500]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000d24:	885b      	ldrh	r3, [r3, #2]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fb62 	bl	80003f0 <__aeabi_i2d>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	460b      	mov	r3, r1
 8000d30:	f7ff fa12 	bl	8000158 <__adddf3>
 8000d34:	4602      	mov	r2, r0
 8000d36:	460b      	mov	r3, r1
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	f7ff fa0a 	bl	8000154 <__aeabi_dsub>
 8000d40:	4603      	mov	r3, r0
 8000d42:	460c      	mov	r4, r1
 8000d44:	4625      	mov	r5, r4
 8000d46:	461c      	mov	r4, r3
 8000d48:	4b73      	ldr	r3, [pc, #460]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000d4a:	889b      	ldrh	r3, [r3, #4]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fb4f 	bl	80003f0 <__aeabi_i2d>
 8000d52:	4602      	mov	r2, r0
 8000d54:	460b      	mov	r3, r1
 8000d56:	4620      	mov	r0, r4
 8000d58:	4629      	mov	r1, r5
 8000d5a:	f7ff f9fb 	bl	8000154 <__aeabi_dsub>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	460c      	mov	r4, r1
 8000d62:	4625      	mov	r5, r4
 8000d64:	461c      	mov	r4, r3
 8000d66:	4b6c      	ldr	r3, [pc, #432]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000d68:	88db      	ldrh	r3, [r3, #6]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fb40 	bl	80003f0 <__aeabi_i2d>
 8000d70:	f04f 0200 	mov.w	r2, #0
 8000d74:	f04f 0300 	mov.w	r3, #0
 8000d78:	f7ff fba4 	bl	80004c4 <__aeabi_dmul>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	460b      	mov	r3, r1
 8000d80:	4620      	mov	r0, r4
 8000d82:	4629      	mov	r1, r5
 8000d84:	f7ff f9e8 	bl	8000158 <__adddf3>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	460c      	mov	r4, r1
 8000d8c:	4625      	mov	r5, r4
 8000d8e:	461c      	mov	r4, r3
 8000d90:	4b61      	ldr	r3, [pc, #388]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000d92:	891b      	ldrh	r3, [r3, #8]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fb2b 	bl	80003f0 <__aeabi_i2d>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	4620      	mov	r0, r4
 8000da0:	4629      	mov	r1, r5
 8000da2:	f7ff f9d9 	bl	8000158 <__adddf3>
 8000da6:	4603      	mov	r3, r0
 8000da8:	460c      	mov	r4, r1
 8000daa:	4625      	mov	r5, r4
 8000dac:	461c      	mov	r4, r3
 8000dae:	4b5a      	ldr	r3, [pc, #360]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000db0:	895b      	ldrh	r3, [r3, #10]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fb1c 	bl	80003f0 <__aeabi_i2d>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	f7ff f9cc 	bl	8000158 <__adddf3>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	4629      	mov	r1, r5
 8000dc8:	f7ff f9c6 	bl	8000158 <__adddf3>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	460c      	mov	r4, r1
 8000dd0:	4625      	mov	r5, r4
 8000dd2:	461c      	mov	r4, r3
 8000dd4:	4b50      	ldr	r3, [pc, #320]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000dd6:	899b      	ldrh	r3, [r3, #12]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fb09 	bl	80003f0 <__aeabi_i2d>
 8000dde:	f04f 0200 	mov.w	r2, #0
 8000de2:	4b4f      	ldr	r3, [pc, #316]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000de4:	f7ff fb6e 	bl	80004c4 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4620      	mov	r0, r4
 8000dee:	4629      	mov	r1, r5
 8000df0:	f7ff f9b2 	bl	8000158 <__adddf3>
 8000df4:	4603      	mov	r3, r0
 8000df6:	460c      	mov	r4, r1
 8000df8:	4625      	mov	r5, r4
 8000dfa:	461c      	mov	r4, r3
 8000dfc:	4b46      	ldr	r3, [pc, #280]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000dfe:	881b      	ldrh	r3, [r3, #0]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff faf5 	bl	80003f0 <__aeabi_i2d>
 8000e06:	4680      	mov	r8, r0
 8000e08:	4689      	mov	r9, r1
 8000e0a:	4b43      	ldr	r3, [pc, #268]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000e0c:	885b      	ldrh	r3, [r3, #2]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff faee 	bl	80003f0 <__aeabi_i2d>
 8000e14:	4602      	mov	r2, r0
 8000e16:	460b      	mov	r3, r1
 8000e18:	4640      	mov	r0, r8
 8000e1a:	4649      	mov	r1, r9
 8000e1c:	f7ff f99c 	bl	8000158 <__adddf3>
 8000e20:	4602      	mov	r2, r0
 8000e22:	460b      	mov	r3, r1
 8000e24:	4690      	mov	r8, r2
 8000e26:	4699      	mov	r9, r3
 8000e28:	4b3b      	ldr	r3, [pc, #236]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000e2a:	889b      	ldrh	r3, [r3, #4]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fadf 	bl	80003f0 <__aeabi_i2d>
 8000e32:	4602      	mov	r2, r0
 8000e34:	460b      	mov	r3, r1
 8000e36:	4640      	mov	r0, r8
 8000e38:	4649      	mov	r1, r9
 8000e3a:	f7ff f98d 	bl	8000158 <__adddf3>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	460b      	mov	r3, r1
 8000e42:	4690      	mov	r8, r2
 8000e44:	4699      	mov	r9, r3
 8000e46:	4b34      	ldr	r3, [pc, #208]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000e48:	88db      	ldrh	r3, [r3, #6]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fad0 	bl	80003f0 <__aeabi_i2d>
 8000e50:	4602      	mov	r2, r0
 8000e52:	460b      	mov	r3, r1
 8000e54:	4640      	mov	r0, r8
 8000e56:	4649      	mov	r1, r9
 8000e58:	f7ff f97e 	bl	8000158 <__adddf3>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	460b      	mov	r3, r1
 8000e60:	4690      	mov	r8, r2
 8000e62:	4699      	mov	r9, r3
 8000e64:	4b2c      	ldr	r3, [pc, #176]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000e66:	891b      	ldrh	r3, [r3, #8]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fac1 	bl	80003f0 <__aeabi_i2d>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	460b      	mov	r3, r1
 8000e72:	4640      	mov	r0, r8
 8000e74:	4649      	mov	r1, r9
 8000e76:	f7ff f96f 	bl	8000158 <__adddf3>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	4690      	mov	r8, r2
 8000e80:	4699      	mov	r9, r3
 8000e82:	4b25      	ldr	r3, [pc, #148]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000e84:	895b      	ldrh	r3, [r3, #10]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fab2 	bl	80003f0 <__aeabi_i2d>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	460b      	mov	r3, r1
 8000e90:	4640      	mov	r0, r8
 8000e92:	4649      	mov	r1, r9
 8000e94:	f7ff f960 	bl	8000158 <__adddf3>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	4690      	mov	r8, r2
 8000e9e:	4699      	mov	r9, r3
 8000ea0:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000ea2:	899b      	ldrh	r3, [r3, #12]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff faa3 	bl	80003f0 <__aeabi_i2d>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	460b      	mov	r3, r1
 8000eae:	4640      	mov	r0, r8
 8000eb0:	4649      	mov	r1, r9
 8000eb2:	f7ff f951 	bl	8000158 <__adddf3>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	4620      	mov	r0, r4
 8000ebc:	4629      	mov	r1, r5
 8000ebe:	f7ff fc2b 	bl	8000718 <__aeabi_ddiv>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	460c      	mov	r4, r1
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	4621      	mov	r1, r4
 8000eca:	f7ff fd2d 	bl	8000928 <__aeabi_d2f>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8000ed2:	601a      	str	r2, [r3, #0]
		  float2byte(position_final, positon_arr);
 8000ed4:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4913      	ldr	r1, [pc, #76]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fd74 	bl	80009c8 <float2byte>
 8000ee0:	e024      	b.n	8000f2c <HAL_TIM_PeriodElapsedCallback+0x378>
 8000ee2:	bf00      	nop
 8000ee4:	40011000 	.word	0x40011000
 8000ee8:	2000007d 	.word	0x2000007d
 8000eec:	20000080 	.word	0x20000080
 8000ef0:	200000e0 	.word	0x200000e0
 8000ef4:	40010c00 	.word	0x40010c00
 8000ef8:	20000076 	.word	0x20000076
 8000efc:	40010800 	.word	0x40010800
 8000f00:	20000077 	.word	0x20000077
 8000f04:	20000078 	.word	0x20000078
 8000f08:	20000079 	.word	0x20000079
 8000f0c:	2000007a 	.word	0x2000007a
 8000f10:	2000007b 	.word	0x2000007b
 8000f14:	2000007c 	.word	0x2000007c
 8000f18:	20000068 	.word	0x20000068
 8000f1c:	c0080000 	.word	0xc0080000
 8000f20:	40080000 	.word	0x40080000
 8000f24:	20000060 	.word	0x20000060
 8000f28:	20000064 	.word	0x20000064
		 // byte2float(&test_number, positon_arr);

		  TX_Message[0] = 'L';
 8000f2c:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8000f2e:	224c      	movs	r2, #76	; 0x4c
 8000f30:	701a      	strb	r2, [r3, #0]
		  TX_Message[1] = 'S';
 8000f32:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8000f34:	2253      	movs	r2, #83	; 0x53
 8000f36:	705a      	strb	r2, [r3, #1]
		  TX_Message[2] = positon_arr[0];
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8000f3a:	781a      	ldrb	r2, [r3, #0]
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8000f3e:	709a      	strb	r2, [r3, #2]
		  TX_Message[3] = positon_arr[1];
 8000f40:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8000f42:	785a      	ldrb	r2, [r3, #1]
 8000f44:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8000f46:	70da      	strb	r2, [r3, #3]
		  TX_Message[4] = positon_arr[2];
 8000f48:	4b0d      	ldr	r3, [pc, #52]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8000f4a:	789a      	ldrb	r2, [r3, #2]
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8000f4e:	711a      	strb	r2, [r3, #4]
		  TX_Message[5] = positon_arr[3];
 8000f50:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8000f52:	78da      	ldrb	r2, [r3, #3]
 8000f54:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8000f56:	715a      	strb	r2, [r3, #5]
		  TX_Message[6] = TCR_status;
 8000f58:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8000f5a:	781a      	ldrb	r2, [r3, #0]
 8000f5c:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8000f5e:	719a      	strb	r2, [r3, #6]
		  TX_Message[7] = 0x00;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	71da      	strb	r2, [r3, #7]


		  CANbus_Transmit(ID_MAIN,8,TX_Message);
 8000f66:	4a05      	ldr	r2, [pc, #20]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8000f68:	2108      	movs	r1, #8
 8000f6a:	202c      	movs	r0, #44	; 0x2c
 8000f6c:	f7ff fd48 	bl	8000a00 <CANbus_Transmit>


	}
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000050 	.word	0x20000050
 8000f80:	20000064 	.word	0x20000064
 8000f84:	2000007d 	.word	0x2000007d

08000f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8c:	f000 fc20 	bl	80017d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f90:	f000 f814 	bl	8000fbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f94:	f000 f9d6 	bl	8001344 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f98:	f000 f9b6 	bl	8001308 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f9c:	f000 f86a 	bl	8001074 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000fa0:	f000 f966 	bl	8001270 <MX_TIM2_Init>
  MX_CAN_Init();
 8000fa4:	f000 f8fa 	bl	800119c <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Stop(&htim2);
  HAL_TIM_Base_Start_IT(&htim2);
 8000fa8:	4803      	ldr	r0, [pc, #12]	; (8000fb8 <main+0x30>)
 8000faa:	f003 f812 	bl	8003fd2 <HAL_TIM_Base_Start_IT>
  HAL_Delay(1000);
 8000fae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fb2:	f000 fc6f 	bl	8001894 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <main+0x2e>
 8000fb8:	20000154 	.word	0x20000154

08000fbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b094      	sub	sp, #80	; 0x50
 8000fc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fc6:	2228      	movs	r2, #40	; 0x28
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f003 fba4 	bl	8004718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe0:	1d3b      	adds	r3, r7, #4
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fec:	2301      	movs	r3, #1
 8000fee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ff0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffe:	2302      	movs	r3, #2
 8001000:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001002:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001006:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001008:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800100c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001012:	4618      	mov	r0, r3
 8001014:	f002 fb12 	bl	800363c <HAL_RCC_OscConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800101e:	f000 fa07 	bl	8001430 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001022:	230f      	movs	r3, #15
 8001024:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001026:	2302      	movs	r3, #2
 8001028:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800102e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001032:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	2102      	movs	r1, #2
 800103e:	4618      	mov	r0, r3
 8001040:	f002 fd7c 	bl	8003b3c <HAL_RCC_ClockConfig>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800104a:	f000 f9f1 	bl	8001430 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800104e:	2302      	movs	r3, #2
 8001050:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001056:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	4618      	mov	r0, r3
 800105c:	f002 fed8 	bl	8003e10 <HAL_RCCEx_PeriphCLKConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001066:	f000 f9e3 	bl	8001430 <Error_Handler>
  }
}
 800106a:	bf00      	nop
 800106c:	3750      	adds	r7, #80	; 0x50
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001084:	4b43      	ldr	r3, [pc, #268]	; (8001194 <MX_ADC1_Init+0x120>)
 8001086:	4a44      	ldr	r2, [pc, #272]	; (8001198 <MX_ADC1_Init+0x124>)
 8001088:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800108a:	4b42      	ldr	r3, [pc, #264]	; (8001194 <MX_ADC1_Init+0x120>)
 800108c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001090:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001092:	4b40      	ldr	r3, [pc, #256]	; (8001194 <MX_ADC1_Init+0x120>)
 8001094:	2200      	movs	r2, #0
 8001096:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001098:	4b3e      	ldr	r3, [pc, #248]	; (8001194 <MX_ADC1_Init+0x120>)
 800109a:	2200      	movs	r2, #0
 800109c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800109e:	4b3d      	ldr	r3, [pc, #244]	; (8001194 <MX_ADC1_Init+0x120>)
 80010a0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80010a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010a6:	4b3b      	ldr	r3, [pc, #236]	; (8001194 <MX_ADC1_Init+0x120>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 7;
 80010ac:	4b39      	ldr	r3, [pc, #228]	; (8001194 <MX_ADC1_Init+0x120>)
 80010ae:	2207      	movs	r2, #7
 80010b0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010b2:	4838      	ldr	r0, [pc, #224]	; (8001194 <MX_ADC1_Init+0x120>)
 80010b4:	f000 fc10 	bl	80018d8 <HAL_ADC_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80010be:	f000 f9b7 	bl	8001430 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010c6:	2301      	movs	r3, #1
 80010c8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	4619      	mov	r1, r3
 80010d2:	4830      	ldr	r0, [pc, #192]	; (8001194 <MX_ADC1_Init+0x120>)
 80010d4:	f000 fdd2 	bl	8001c7c <HAL_ADC_ConfigChannel>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80010de:	f000 f9a7 	bl	8001430 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010e2:	2301      	movs	r3, #1
 80010e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010e6:	2302      	movs	r3, #2
 80010e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	4619      	mov	r1, r3
 80010ee:	4829      	ldr	r0, [pc, #164]	; (8001194 <MX_ADC1_Init+0x120>)
 80010f0:	f000 fdc4 	bl	8001c7c <HAL_ADC_ConfigChannel>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80010fa:	f000 f999 	bl	8001430 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80010fe:	2302      	movs	r3, #2
 8001100:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001102:	2303      	movs	r3, #3
 8001104:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	4619      	mov	r1, r3
 800110a:	4822      	ldr	r0, [pc, #136]	; (8001194 <MX_ADC1_Init+0x120>)
 800110c:	f000 fdb6 	bl	8001c7c <HAL_ADC_ConfigChannel>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001116:	f000 f98b 	bl	8001430 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800111a:	2303      	movs	r3, #3
 800111c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800111e:	2304      	movs	r3, #4
 8001120:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	4619      	mov	r1, r3
 8001126:	481b      	ldr	r0, [pc, #108]	; (8001194 <MX_ADC1_Init+0x120>)
 8001128:	f000 fda8 	bl	8001c7c <HAL_ADC_ConfigChannel>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001132:	f000 f97d 	bl	8001430 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001136:	2304      	movs	r3, #4
 8001138:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800113a:	2305      	movs	r3, #5
 800113c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	4619      	mov	r1, r3
 8001142:	4814      	ldr	r0, [pc, #80]	; (8001194 <MX_ADC1_Init+0x120>)
 8001144:	f000 fd9a 	bl	8001c7c <HAL_ADC_ConfigChannel>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800114e:	f000 f96f 	bl	8001430 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001152:	2305      	movs	r3, #5
 8001154:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001156:	2306      	movs	r3, #6
 8001158:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	4619      	mov	r1, r3
 800115e:	480d      	ldr	r0, [pc, #52]	; (8001194 <MX_ADC1_Init+0x120>)
 8001160:	f000 fd8c 	bl	8001c7c <HAL_ADC_ConfigChannel>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800116a:	f000 f961 	bl	8001430 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800116e:	2306      	movs	r3, #6
 8001170:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001172:	2307      	movs	r3, #7
 8001174:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	4619      	mov	r1, r3
 800117a:	4806      	ldr	r0, [pc, #24]	; (8001194 <MX_ADC1_Init+0x120>)
 800117c:	f000 fd7e 	bl	8001c7c <HAL_ADC_ConfigChannel>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001186:	f000 f953 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200000e0 	.word	0x200000e0
 8001198:	40012400 	.word	0x40012400

0800119c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80011a0:	4b2e      	ldr	r3, [pc, #184]	; (800125c <MX_CAN_Init+0xc0>)
 80011a2:	4a2f      	ldr	r2, [pc, #188]	; (8001260 <MX_CAN_Init+0xc4>)
 80011a4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 80011a6:	4b2d      	ldr	r3, [pc, #180]	; (800125c <MX_CAN_Init+0xc0>)
 80011a8:	2202      	movs	r2, #2
 80011aa:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80011ac:	4b2b      	ldr	r3, [pc, #172]	; (800125c <MX_CAN_Init+0xc0>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80011b2:	4b2a      	ldr	r3, [pc, #168]	; (800125c <MX_CAN_Init+0xc0>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 80011b8:	4b28      	ldr	r3, [pc, #160]	; (800125c <MX_CAN_Init+0xc0>)
 80011ba:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 80011be:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 80011c0:	4b26      	ldr	r3, [pc, #152]	; (800125c <MX_CAN_Init+0xc0>)
 80011c2:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 80011c6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80011c8:	4b24      	ldr	r3, [pc, #144]	; (800125c <MX_CAN_Init+0xc0>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80011ce:	4b23      	ldr	r3, [pc, #140]	; (800125c <MX_CAN_Init+0xc0>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80011d4:	4b21      	ldr	r3, [pc, #132]	; (800125c <MX_CAN_Init+0xc0>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80011da:	4b20      	ldr	r3, [pc, #128]	; (800125c <MX_CAN_Init+0xc0>)
 80011dc:	2200      	movs	r2, #0
 80011de:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80011e0:	4b1e      	ldr	r3, [pc, #120]	; (800125c <MX_CAN_Init+0xc0>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80011e6:	4b1d      	ldr	r3, [pc, #116]	; (800125c <MX_CAN_Init+0xc0>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80011ec:	481b      	ldr	r0, [pc, #108]	; (800125c <MX_CAN_Init+0xc0>)
 80011ee:	f000 ff2f 	bl	8002050 <HAL_CAN_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80011f8:	f000 f91a 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  hcanfilter.FilterActivation=CAN_FILTER_ENABLE;
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <MX_CAN_Init+0xc8>)
 80011fe:	2201      	movs	r2, #1
 8001200:	621a      	str	r2, [r3, #32]
  hcanfilter.FilterMode=CAN_FILTERMODE_IDMASK;
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <MX_CAN_Init+0xc8>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  hcanfilter.FilterScale=CAN_FILTERSCALE_16BIT;
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <MX_CAN_Init+0xc8>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
  hcanfilter.FilterMaskIdHigh=(_FilterIdHigh << 5);
 800120e:	4b16      	ldr	r3, [pc, #88]	; (8001268 <MX_CAN_Init+0xcc>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	015b      	lsls	r3, r3, #5
 8001214:	461a      	mov	r2, r3
 8001216:	4b13      	ldr	r3, [pc, #76]	; (8001264 <MX_CAN_Init+0xc8>)
 8001218:	609a      	str	r2, [r3, #8]
  hcanfilter.FilterMaskIdLow=0x0000;
 800121a:	4b12      	ldr	r3, [pc, #72]	; (8001264 <MX_CAN_Init+0xc8>)
 800121c:	2200      	movs	r2, #0
 800121e:	60da      	str	r2, [r3, #12]

  hcanfilter.FilterBank=2;
 8001220:	4b10      	ldr	r3, [pc, #64]	; (8001264 <MX_CAN_Init+0xc8>)
 8001222:	2202      	movs	r2, #2
 8001224:	615a      	str	r2, [r3, #20]
  hcanfilter.FilterIdHigh=_IdHigh;
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <MX_CAN_Init+0xd0>)
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <MX_CAN_Init+0xc8>)
 800122e:	601a      	str	r2, [r3, #0]
  hcanfilter.FilterIdLow=0x0000;
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <MX_CAN_Init+0xc8>)
 8001232:	2200      	movs	r2, #0
 8001234:	605a      	str	r2, [r3, #4]
  hcanfilter.FilterFIFOAssignment=CAN_FILTER_FIFO1;
 8001236:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <MX_CAN_Init+0xc8>)
 8001238:	2201      	movs	r2, #1
 800123a:	611a      	str	r2, [r3, #16]
  hcanfilter.SlaveStartFilterBank=14;
 800123c:	4b09      	ldr	r3, [pc, #36]	; (8001264 <MX_CAN_Init+0xc8>)
 800123e:	220e      	movs	r2, #14
 8001240:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan,&hcanfilter); //Initialize CAN Filter
 8001242:	4908      	ldr	r1, [pc, #32]	; (8001264 <MX_CAN_Init+0xc8>)
 8001244:	4805      	ldr	r0, [pc, #20]	; (800125c <MX_CAN_Init+0xc0>)
 8001246:	f000 fffe 	bl	8002246 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan); //Initialize CAN Bus
 800124a:	4804      	ldr	r0, [pc, #16]	; (800125c <MX_CAN_Init+0xc0>)
 800124c:	f001 f8c4 	bl	80023d8 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO1_MSG_PENDING);// Initialize
 8001250:	2110      	movs	r1, #16
 8001252:	4802      	ldr	r0, [pc, #8]	; (800125c <MX_CAN_Init+0xc0>)
 8001254:	f001 fb12 	bl	800287c <HAL_CAN_ActivateNotification>
  /* USER CODE END CAN_Init 2 */

}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	200000b8 	.word	0x200000b8
 8001260:	40006400 	.word	0x40006400
 8001264:	20000090 	.word	0x20000090
 8001268:	20000000 	.word	0x20000000
 800126c:	20000002 	.word	0x20000002

08001270 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001276:	f107 0308 	add.w	r3, r7, #8
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001284:	463b      	mov	r3, r7
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800128c:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <MX_TIM2_Init+0x94>)
 800128e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001292:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <MX_TIM2_Init+0x94>)
 8001296:	2248      	movs	r2, #72	; 0x48
 8001298:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129a:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <MX_TIM2_Init+0x94>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80012a0:	4b18      	ldr	r3, [pc, #96]	; (8001304 <MX_TIM2_Init+0x94>)
 80012a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a8:	4b16      	ldr	r3, [pc, #88]	; (8001304 <MX_TIM2_Init+0x94>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <MX_TIM2_Init+0x94>)
 80012b0:	2280      	movs	r2, #128	; 0x80
 80012b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012b4:	4813      	ldr	r0, [pc, #76]	; (8001304 <MX_TIM2_Init+0x94>)
 80012b6:	f002 fe61 	bl	8003f7c <HAL_TIM_Base_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012c0:	f000 f8b6 	bl	8001430 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012ca:	f107 0308 	add.w	r3, r7, #8
 80012ce:	4619      	mov	r1, r3
 80012d0:	480c      	ldr	r0, [pc, #48]	; (8001304 <MX_TIM2_Init+0x94>)
 80012d2:	f002 ffd3 	bl	800427c <HAL_TIM_ConfigClockSource>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012dc:	f000 f8a8 	bl	8001430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e0:	2300      	movs	r3, #0
 80012e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012e8:	463b      	mov	r3, r7
 80012ea:	4619      	mov	r1, r3
 80012ec:	4805      	ldr	r0, [pc, #20]	; (8001304 <MX_TIM2_Init+0x94>)
 80012ee:	f003 f999 	bl	8004624 <HAL_TIMEx_MasterConfigSynchronization>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012f8:	f000 f89a 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000154 	.word	0x20000154

08001308 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800130e:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <MX_DMA_Init+0x38>)
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	4a0b      	ldr	r2, [pc, #44]	; (8001340 <MX_DMA_Init+0x38>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6153      	str	r3, [r2, #20]
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <MX_DMA_Init+0x38>)
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2101      	movs	r1, #1
 800132a:	200b      	movs	r0, #11
 800132c:	f001 fdbf 	bl	8002eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001330:	200b      	movs	r0, #11
 8001332:	f001 fdd8 	bl	8002ee6 <HAL_NVIC_EnableIRQ>

}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40021000 	.word	0x40021000

08001344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b088      	sub	sp, #32
 8001348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134a:	f107 0310 	add.w	r3, r7, #16
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001358:	4b31      	ldr	r3, [pc, #196]	; (8001420 <MX_GPIO_Init+0xdc>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	4a30      	ldr	r2, [pc, #192]	; (8001420 <MX_GPIO_Init+0xdc>)
 800135e:	f043 0310 	orr.w	r3, r3, #16
 8001362:	6193      	str	r3, [r2, #24]
 8001364:	4b2e      	ldr	r3, [pc, #184]	; (8001420 <MX_GPIO_Init+0xdc>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f003 0310 	and.w	r3, r3, #16
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001370:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <MX_GPIO_Init+0xdc>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	4a2a      	ldr	r2, [pc, #168]	; (8001420 <MX_GPIO_Init+0xdc>)
 8001376:	f043 0320 	orr.w	r3, r3, #32
 800137a:	6193      	str	r3, [r2, #24]
 800137c:	4b28      	ldr	r3, [pc, #160]	; (8001420 <MX_GPIO_Init+0xdc>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	f003 0320 	and.w	r3, r3, #32
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001388:	4b25      	ldr	r3, [pc, #148]	; (8001420 <MX_GPIO_Init+0xdc>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	4a24      	ldr	r2, [pc, #144]	; (8001420 <MX_GPIO_Init+0xdc>)
 800138e:	f043 0304 	orr.w	r3, r3, #4
 8001392:	6193      	str	r3, [r2, #24]
 8001394:	4b22      	ldr	r3, [pc, #136]	; (8001420 <MX_GPIO_Init+0xdc>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	f003 0304 	and.w	r3, r3, #4
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a0:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <MX_GPIO_Init+0xdc>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	4a1e      	ldr	r2, [pc, #120]	; (8001420 <MX_GPIO_Init+0xdc>)
 80013a6:	f043 0308 	orr.w	r3, r3, #8
 80013aa:	6193      	str	r3, [r2, #24]
 80013ac:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <MX_GPIO_Init+0xdc>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f003 0308 	and.w	r3, r3, #8
 80013b4:	603b      	str	r3, [r7, #0]
 80013b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80013b8:	2201      	movs	r2, #1
 80013ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013be:	4819      	ldr	r0, [pc, #100]	; (8001424 <MX_GPIO_Init+0xe0>)
 80013c0:	f002 f90b 	bl	80035da <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ca:	2301      	movs	r3, #1
 80013cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ce:	2301      	movs	r3, #1
 80013d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d2:	2303      	movs	r3, #3
 80013d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d6:	f107 0310 	add.w	r3, r7, #16
 80013da:	4619      	mov	r1, r3
 80013dc:	4811      	ldr	r0, [pc, #68]	; (8001424 <MX_GPIO_Init+0xe0>)
 80013de:	f001 ff8b 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013ec:	2302      	movs	r3, #2
 80013ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	4619      	mov	r1, r3
 80013f6:	480c      	ldr	r0, [pc, #48]	; (8001428 <MX_GPIO_Init+0xe4>)
 80013f8:	f001 ff7e 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80013fc:	f44f 431f 	mov.w	r3, #40704	; 0x9f00
 8001400:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001406:	2302      	movs	r3, #2
 8001408:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140a:	f107 0310 	add.w	r3, r7, #16
 800140e:	4619      	mov	r1, r3
 8001410:	4806      	ldr	r0, [pc, #24]	; (800142c <MX_GPIO_Init+0xe8>)
 8001412:	f001 ff71 	bl	80032f8 <HAL_GPIO_Init>

}
 8001416:	bf00      	nop
 8001418:	3720      	adds	r7, #32
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40021000 	.word	0x40021000
 8001424:	40011000 	.word	0x40011000
 8001428:	40010c00 	.word	0x40010c00
 800142c:	40010800 	.word	0x40010800

08001430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr

0800143c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_MspInit+0x5c>)
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	4a14      	ldr	r2, [pc, #80]	; (8001498 <HAL_MspInit+0x5c>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6193      	str	r3, [r2, #24]
 800144e:	4b12      	ldr	r3, [pc, #72]	; (8001498 <HAL_MspInit+0x5c>)
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145a:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <HAL_MspInit+0x5c>)
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	4a0e      	ldr	r2, [pc, #56]	; (8001498 <HAL_MspInit+0x5c>)
 8001460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001464:	61d3      	str	r3, [r2, #28]
 8001466:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <HAL_MspInit+0x5c>)
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001472:	4b0a      	ldr	r3, [pc, #40]	; (800149c <HAL_MspInit+0x60>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	4a04      	ldr	r2, [pc, #16]	; (800149c <HAL_MspInit+0x60>)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800148e:	bf00      	nop
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	40021000 	.word	0x40021000
 800149c:	40010000 	.word	0x40010000

080014a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 0310 	add.w	r3, r7, #16
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a29      	ldr	r2, [pc, #164]	; (8001560 <HAL_ADC_MspInit+0xc0>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d14a      	bne.n	8001556 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014c0:	4b28      	ldr	r3, [pc, #160]	; (8001564 <HAL_ADC_MspInit+0xc4>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	4a27      	ldr	r2, [pc, #156]	; (8001564 <HAL_ADC_MspInit+0xc4>)
 80014c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ca:	6193      	str	r3, [r2, #24]
 80014cc:	4b25      	ldr	r3, [pc, #148]	; (8001564 <HAL_ADC_MspInit+0xc4>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d8:	4b22      	ldr	r3, [pc, #136]	; (8001564 <HAL_ADC_MspInit+0xc4>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	4a21      	ldr	r2, [pc, #132]	; (8001564 <HAL_ADC_MspInit+0xc4>)
 80014de:	f043 0304 	orr.w	r3, r3, #4
 80014e2:	6193      	str	r3, [r2, #24]
 80014e4:	4b1f      	ldr	r3, [pc, #124]	; (8001564 <HAL_ADC_MspInit+0xc4>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80014f0:	237f      	movs	r3, #127	; 0x7f
 80014f2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014f4:	2303      	movs	r3, #3
 80014f6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f8:	f107 0310 	add.w	r3, r7, #16
 80014fc:	4619      	mov	r1, r3
 80014fe:	481a      	ldr	r0, [pc, #104]	; (8001568 <HAL_ADC_MspInit+0xc8>)
 8001500:	f001 fefa 	bl	80032f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001504:	4b19      	ldr	r3, [pc, #100]	; (800156c <HAL_ADC_MspInit+0xcc>)
 8001506:	4a1a      	ldr	r2, [pc, #104]	; (8001570 <HAL_ADC_MspInit+0xd0>)
 8001508:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800150a:	4b18      	ldr	r3, [pc, #96]	; (800156c <HAL_ADC_MspInit+0xcc>)
 800150c:	2200      	movs	r2, #0
 800150e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001510:	4b16      	ldr	r3, [pc, #88]	; (800156c <HAL_ADC_MspInit+0xcc>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001516:	4b15      	ldr	r3, [pc, #84]	; (800156c <HAL_ADC_MspInit+0xcc>)
 8001518:	2280      	movs	r2, #128	; 0x80
 800151a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800151c:	4b13      	ldr	r3, [pc, #76]	; (800156c <HAL_ADC_MspInit+0xcc>)
 800151e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001522:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <HAL_ADC_MspInit+0xcc>)
 8001526:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800152a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <HAL_ADC_MspInit+0xcc>)
 800152e:	2220      	movs	r2, #32
 8001530:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <HAL_ADC_MspInit+0xcc>)
 8001534:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001538:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800153a:	480c      	ldr	r0, [pc, #48]	; (800156c <HAL_ADC_MspInit+0xcc>)
 800153c:	f001 fcee 	bl	8002f1c <HAL_DMA_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8001546:	f7ff ff73 	bl	8001430 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a07      	ldr	r2, [pc, #28]	; (800156c <HAL_ADC_MspInit+0xcc>)
 800154e:	621a      	str	r2, [r3, #32]
 8001550:	4a06      	ldr	r2, [pc, #24]	; (800156c <HAL_ADC_MspInit+0xcc>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001556:	bf00      	nop
 8001558:	3720      	adds	r7, #32
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40012400 	.word	0x40012400
 8001564:	40021000 	.word	0x40021000
 8001568:	40010800 	.word	0x40010800
 800156c:	20000110 	.word	0x20000110
 8001570:	40020008 	.word	0x40020008

08001574 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	; 0x28
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a29      	ldr	r2, [pc, #164]	; (8001634 <HAL_CAN_MspInit+0xc0>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d14b      	bne.n	800162c <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001594:	4b28      	ldr	r3, [pc, #160]	; (8001638 <HAL_CAN_MspInit+0xc4>)
 8001596:	69db      	ldr	r3, [r3, #28]
 8001598:	4a27      	ldr	r2, [pc, #156]	; (8001638 <HAL_CAN_MspInit+0xc4>)
 800159a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800159e:	61d3      	str	r3, [r2, #28]
 80015a0:	4b25      	ldr	r3, [pc, #148]	; (8001638 <HAL_CAN_MspInit+0xc4>)
 80015a2:	69db      	ldr	r3, [r3, #28]
 80015a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ac:	4b22      	ldr	r3, [pc, #136]	; (8001638 <HAL_CAN_MspInit+0xc4>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	4a21      	ldr	r2, [pc, #132]	; (8001638 <HAL_CAN_MspInit+0xc4>)
 80015b2:	f043 0308 	orr.w	r3, r3, #8
 80015b6:	6193      	str	r3, [r2, #24]
 80015b8:	4b1f      	ldr	r3, [pc, #124]	; (8001638 <HAL_CAN_MspInit+0xc4>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	f003 0308 	and.w	r3, r3, #8
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ce:	2301      	movs	r3, #1
 80015d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	4818      	ldr	r0, [pc, #96]	; (800163c <HAL_CAN_MspInit+0xc8>)
 80015da:	f001 fe8d 	bl	80032f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015e8:	2303      	movs	r3, #3
 80015ea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	4619      	mov	r1, r3
 80015f2:	4812      	ldr	r0, [pc, #72]	; (800163c <HAL_CAN_MspInit+0xc8>)
 80015f4:	f001 fe80 	bl	80032f8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <HAL_CAN_MspInit+0xcc>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
 8001616:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <HAL_CAN_MspInit+0xcc>)
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800161c:	2200      	movs	r2, #0
 800161e:	2100      	movs	r1, #0
 8001620:	2015      	movs	r0, #21
 8001622:	f001 fc44 	bl	8002eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001626:	2015      	movs	r0, #21
 8001628:	f001 fc5d 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800162c:	bf00      	nop
 800162e:	3728      	adds	r7, #40	; 0x28
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40006400 	.word	0x40006400
 8001638:	40021000 	.word	0x40021000
 800163c:	40010c00 	.word	0x40010c00
 8001640:	40010000 	.word	0x40010000

08001644 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001654:	d113      	bne.n	800167e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001656:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <HAL_TIM_Base_MspInit+0x44>)
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	4a0b      	ldr	r2, [pc, #44]	; (8001688 <HAL_TIM_Base_MspInit+0x44>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	61d3      	str	r3, [r2, #28]
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <HAL_TIM_Base_MspInit+0x44>)
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	2100      	movs	r1, #0
 8001672:	201c      	movs	r0, #28
 8001674:	f001 fc1b 	bl	8002eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001678:	201c      	movs	r0, #28
 800167a:	f001 fc34 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40021000 	.word	0x40021000

0800168c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr

08001698 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800169c:	e7fe      	b.n	800169c <HardFault_Handler+0x4>

0800169e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a2:	e7fe      	b.n	80016a2 <MemManage_Handler+0x4>

080016a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <BusFault_Handler+0x4>

080016aa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016ae:	e7fe      	b.n	80016ae <UsageFault_Handler+0x4>

080016b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr

080016bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr

080016c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr

080016d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d8:	f000 f8c0 	bl	800185c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}

080016e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <DMA1_Channel1_IRQHandler+0x10>)
 80016e6:	f001 fcd3 	bl	8003090 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */


  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000110 	.word	0x20000110

080016f4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <CAN1_RX1_IRQHandler+0x10>)
 80016fa:	f001 f8e4 	bl	80028c6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200000b8 	.word	0x200000b8

08001708 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800170c:	4802      	ldr	r0, [pc, #8]	; (8001718 <TIM2_IRQHandler+0x10>)
 800170e:	f002 fcad 	bl	800406c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000154 	.word	0x20000154

0800171c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001720:	4b15      	ldr	r3, [pc, #84]	; (8001778 <SystemInit+0x5c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a14      	ldr	r2, [pc, #80]	; (8001778 <SystemInit+0x5c>)
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <SystemInit+0x5c>)
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	4911      	ldr	r1, [pc, #68]	; (8001778 <SystemInit+0x5c>)
 8001732:	4b12      	ldr	r3, [pc, #72]	; (800177c <SystemInit+0x60>)
 8001734:	4013      	ands	r3, r2
 8001736:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001738:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <SystemInit+0x5c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a0e      	ldr	r2, [pc, #56]	; (8001778 <SystemInit+0x5c>)
 800173e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001746:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <SystemInit+0x5c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <SystemInit+0x5c>)
 800174e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001752:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <SystemInit+0x5c>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	4a07      	ldr	r2, [pc, #28]	; (8001778 <SystemInit+0x5c>)
 800175a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800175e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <SystemInit+0x5c>)
 8001762:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001766:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <SystemInit+0x64>)
 800176a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800176e:	609a      	str	r2, [r3, #8]
#endif 
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr
 8001778:	40021000 	.word	0x40021000
 800177c:	f8ff0000 	.word	0xf8ff0000
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <Reset_Handler>:
 8001784:	2100      	movs	r1, #0
 8001786:	e003      	b.n	8001790 <LoopCopyDataInit>

08001788 <CopyDataInit>:
 8001788:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <LoopFillZerobss+0x14>)
 800178a:	585b      	ldr	r3, [r3, r1]
 800178c:	5043      	str	r3, [r0, r1]
 800178e:	3104      	adds	r1, #4

08001790 <LoopCopyDataInit>:
 8001790:	480a      	ldr	r0, [pc, #40]	; (80017bc <LoopFillZerobss+0x18>)
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <LoopFillZerobss+0x1c>)
 8001794:	1842      	adds	r2, r0, r1
 8001796:	429a      	cmp	r2, r3
 8001798:	d3f6      	bcc.n	8001788 <CopyDataInit>
 800179a:	4a0a      	ldr	r2, [pc, #40]	; (80017c4 <LoopFillZerobss+0x20>)
 800179c:	e002      	b.n	80017a4 <LoopFillZerobss>

0800179e <FillZerobss>:
 800179e:	2300      	movs	r3, #0
 80017a0:	f842 3b04 	str.w	r3, [r2], #4

080017a4 <LoopFillZerobss>:
 80017a4:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <LoopFillZerobss+0x24>)
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d3f9      	bcc.n	800179e <FillZerobss>
 80017aa:	f7ff ffb7 	bl	800171c <SystemInit>
 80017ae:	f002 ff8f 	bl	80046d0 <__libc_init_array>
 80017b2:	f7ff fbe9 	bl	8000f88 <main>
 80017b6:	4770      	bx	lr
 80017b8:	0800476c 	.word	0x0800476c
 80017bc:	20000000 	.word	0x20000000
 80017c0:	20000034 	.word	0x20000034
 80017c4:	20000034 	.word	0x20000034
 80017c8:	200001cc 	.word	0x200001cc

080017cc <ADC1_2_IRQHandler>:
 80017cc:	e7fe      	b.n	80017cc <ADC1_2_IRQHandler>
	...

080017d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017d4:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <HAL_Init+0x28>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a07      	ldr	r2, [pc, #28]	; (80017f8 <HAL_Init+0x28>)
 80017da:	f043 0310 	orr.w	r3, r3, #16
 80017de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e0:	2003      	movs	r0, #3
 80017e2:	f001 fb59 	bl	8002e98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017e6:	2000      	movs	r0, #0
 80017e8:	f000 f808 	bl	80017fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017ec:	f7ff fe26 	bl	800143c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40022000 	.word	0x40022000

080017fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <HAL_InitTick+0x54>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	4b12      	ldr	r3, [pc, #72]	; (8001854 <HAL_InitTick+0x58>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	4619      	mov	r1, r3
 800180e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001812:	fbb3 f3f1 	udiv	r3, r3, r1
 8001816:	fbb2 f3f3 	udiv	r3, r2, r3
 800181a:	4618      	mov	r0, r3
 800181c:	f001 fb71 	bl	8002f02 <HAL_SYSTICK_Config>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e00e      	b.n	8001848 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b0f      	cmp	r3, #15
 800182e:	d80a      	bhi.n	8001846 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001830:	2200      	movs	r2, #0
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	f04f 30ff 	mov.w	r0, #4294967295
 8001838:	f001 fb39 	bl	8002eae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800183c:	4a06      	ldr	r2, [pc, #24]	; (8001858 <HAL_InitTick+0x5c>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001842:	2300      	movs	r3, #0
 8001844:	e000      	b.n	8001848 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
}
 8001848:	4618      	mov	r0, r3
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20000028 	.word	0x20000028
 8001854:	20000030 	.word	0x20000030
 8001858:	2000002c 	.word	0x2000002c

0800185c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001860:	4b05      	ldr	r3, [pc, #20]	; (8001878 <HAL_IncTick+0x1c>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	461a      	mov	r2, r3
 8001866:	4b05      	ldr	r3, [pc, #20]	; (800187c <HAL_IncTick+0x20>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4413      	add	r3, r2
 800186c:	4a03      	ldr	r2, [pc, #12]	; (800187c <HAL_IncTick+0x20>)
 800186e:	6013      	str	r3, [r2, #0]
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr
 8001878:	20000030 	.word	0x20000030
 800187c:	200001c8 	.word	0x200001c8

08001880 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return uwTick;
 8001884:	4b02      	ldr	r3, [pc, #8]	; (8001890 <HAL_GetTick+0x10>)
 8001886:	681b      	ldr	r3, [r3, #0]
}
 8001888:	4618      	mov	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr
 8001890:	200001c8 	.word	0x200001c8

08001894 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800189c:	f7ff fff0 	bl	8001880 <HAL_GetTick>
 80018a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ac:	d005      	beq.n	80018ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <HAL_Delay+0x40>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	4413      	add	r3, r2
 80018b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ba:	bf00      	nop
 80018bc:	f7ff ffe0 	bl	8001880 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d8f7      	bhi.n	80018bc <HAL_Delay+0x28>
  {
  }
}
 80018cc:	bf00      	nop
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000030 	.word	0x20000030

080018d8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018e0:	2300      	movs	r3, #0
 80018e2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e0be      	b.n	8001a78 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001904:	2b00      	cmp	r3, #0
 8001906:	d109      	bne.n	800191c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff fdc2 	bl	80014a0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 faf7 	bl	8001f10 <ADC_ConversionStop_Disable>
 8001922:	4603      	mov	r3, r0
 8001924:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192a:	f003 0310 	and.w	r3, r3, #16
 800192e:	2b00      	cmp	r3, #0
 8001930:	f040 8099 	bne.w	8001a66 <HAL_ADC_Init+0x18e>
 8001934:	7dfb      	ldrb	r3, [r7, #23]
 8001936:	2b00      	cmp	r3, #0
 8001938:	f040 8095 	bne.w	8001a66 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001940:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001944:	f023 0302 	bic.w	r3, r3, #2
 8001948:	f043 0202 	orr.w	r2, r3, #2
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001958:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	7b1b      	ldrb	r3, [r3, #12]
 800195e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001960:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	4313      	orrs	r3, r2
 8001966:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001970:	d003      	beq.n	800197a <HAL_ADC_Init+0xa2>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d102      	bne.n	8001980 <HAL_ADC_Init+0xa8>
 800197a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800197e:	e000      	b.n	8001982 <HAL_ADC_Init+0xaa>
 8001980:	2300      	movs	r3, #0
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4313      	orrs	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	7d1b      	ldrb	r3, [r3, #20]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d119      	bne.n	80019c4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	7b1b      	ldrb	r3, [r3, #12]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d109      	bne.n	80019ac <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	3b01      	subs	r3, #1
 800199e:	035a      	lsls	r2, r3, #13
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	e00b      	b.n	80019c4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b0:	f043 0220 	orr.w	r2, r3, #32
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019bc:	f043 0201 	orr.w	r2, r3, #1
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	4b28      	ldr	r3, [pc, #160]	; (8001a80 <HAL_ADC_Init+0x1a8>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	68b9      	ldr	r1, [r7, #8]
 80019e8:	430b      	orrs	r3, r1
 80019ea:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019f4:	d003      	beq.n	80019fe <HAL_ADC_Init+0x126>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d104      	bne.n	8001a08 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	3b01      	subs	r3, #1
 8001a04:	051b      	lsls	r3, r3, #20
 8001a06:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <HAL_ADC_Init+0x1ac>)
 8001a24:	4013      	ands	r3, r2
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d10b      	bne.n	8001a44 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a36:	f023 0303 	bic.w	r3, r3, #3
 8001a3a:	f043 0201 	orr.w	r2, r3, #1
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a42:	e018      	b.n	8001a76 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a48:	f023 0312 	bic.w	r3, r3, #18
 8001a4c:	f043 0210 	orr.w	r2, r3, #16
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a58:	f043 0201 	orr.w	r2, r3, #1
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a64:	e007      	b.n	8001a76 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6a:	f043 0210 	orr.w	r2, r3, #16
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	ffe1f7fd 	.word	0xffe1f7fd
 8001a84:	ff1f0efe 	.word	0xff1f0efe

08001a88 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a94:	2300      	movs	r3, #0
 8001a96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a64      	ldr	r2, [pc, #400]	; (8001c30 <HAL_ADC_Start_DMA+0x1a8>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d004      	beq.n	8001aac <HAL_ADC_Start_DMA+0x24>
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a63      	ldr	r2, [pc, #396]	; (8001c34 <HAL_ADC_Start_DMA+0x1ac>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d106      	bne.n	8001aba <HAL_ADC_Start_DMA+0x32>
 8001aac:	4b60      	ldr	r3, [pc, #384]	; (8001c30 <HAL_ADC_Start_DMA+0x1a8>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f040 80b3 	bne.w	8001c20 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d101      	bne.n	8001ac8 <HAL_ADC_Start_DMA+0x40>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e0ae      	b.n	8001c26 <HAL_ADC_Start_DMA+0x19e>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f000 f9cb 	bl	8001e6c <ADC_Enable>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ada:	7dfb      	ldrb	r3, [r7, #23]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f040 809a 	bne.w	8001c16 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001aea:	f023 0301 	bic.w	r3, r3, #1
 8001aee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a4e      	ldr	r2, [pc, #312]	; (8001c34 <HAL_ADC_Start_DMA+0x1ac>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d105      	bne.n	8001b0c <HAL_ADC_Start_DMA+0x84>
 8001b00:	4b4b      	ldr	r3, [pc, #300]	; (8001c30 <HAL_ADC_Start_DMA+0x1a8>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d115      	bne.n	8001b38 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b10:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d026      	beq.n	8001b74 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b2e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b36:	e01d      	b.n	8001b74 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a39      	ldr	r2, [pc, #228]	; (8001c30 <HAL_ADC_Start_DMA+0x1a8>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d004      	beq.n	8001b58 <HAL_ADC_Start_DMA+0xd0>
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a38      	ldr	r2, [pc, #224]	; (8001c34 <HAL_ADC_Start_DMA+0x1ac>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d10d      	bne.n	8001b74 <HAL_ADC_Start_DMA+0xec>
 8001b58:	4b35      	ldr	r3, [pc, #212]	; (8001c30 <HAL_ADC_Start_DMA+0x1a8>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d007      	beq.n	8001b74 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b68:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b6c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d006      	beq.n	8001b8e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b84:	f023 0206 	bic.w	r2, r3, #6
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b8c:	e002      	b.n	8001b94 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2200      	movs	r2, #0
 8001b92:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	4a25      	ldr	r2, [pc, #148]	; (8001c38 <HAL_ADC_Start_DMA+0x1b0>)
 8001ba2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	4a24      	ldr	r2, [pc, #144]	; (8001c3c <HAL_ADC_Start_DMA+0x1b4>)
 8001baa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	4a23      	ldr	r2, [pc, #140]	; (8001c40 <HAL_ADC_Start_DMA+0x1b8>)
 8001bb2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f06f 0202 	mvn.w	r2, #2
 8001bbc:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bcc:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6a18      	ldr	r0, [r3, #32]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	334c      	adds	r3, #76	; 0x4c
 8001bd8:	4619      	mov	r1, r3
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f001 f9f7 	bl	8002fd0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001bec:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001bf0:	d108      	bne.n	8001c04 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001c00:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001c02:	e00f      	b.n	8001c24 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001c12:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001c14:	e006      	b.n	8001c24 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001c1e:	e001      	b.n	8001c24 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c24:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40012400 	.word	0x40012400
 8001c34:	40012800 	.word	0x40012800
 8001c38:	08001f85 	.word	0x08001f85
 8001c3c:	08002001 	.word	0x08002001
 8001c40:	0800201d 	.word	0x0800201d

08001c44 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr

08001c56 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr

08001c68 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr
	...

08001c7c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c86:	2300      	movs	r3, #0
 8001c88:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d101      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0x20>
 8001c98:	2302      	movs	r3, #2
 8001c9a:	e0dc      	b.n	8001e56 <HAL_ADC_ConfigChannel+0x1da>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b06      	cmp	r3, #6
 8001caa:	d81c      	bhi.n	8001ce6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	3b05      	subs	r3, #5
 8001cbe:	221f      	movs	r2, #31
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	4019      	ands	r1, r3
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	6818      	ldr	r0, [r3, #0]
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3b05      	subs	r3, #5
 8001cd8:	fa00 f203 	lsl.w	r2, r0, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	635a      	str	r2, [r3, #52]	; 0x34
 8001ce4:	e03c      	b.n	8001d60 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b0c      	cmp	r3, #12
 8001cec:	d81c      	bhi.n	8001d28 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	3b23      	subs	r3, #35	; 0x23
 8001d00:	221f      	movs	r2, #31
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43db      	mvns	r3, r3
 8001d08:	4019      	ands	r1, r3
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	6818      	ldr	r0, [r3, #0]
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	3b23      	subs	r3, #35	; 0x23
 8001d1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	631a      	str	r2, [r3, #48]	; 0x30
 8001d26:	e01b      	b.n	8001d60 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	3b41      	subs	r3, #65	; 0x41
 8001d3a:	221f      	movs	r2, #31
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	4019      	ands	r1, r3
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	6818      	ldr	r0, [r3, #0]
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	3b41      	subs	r3, #65	; 0x41
 8001d54:	fa00 f203 	lsl.w	r2, r0, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b09      	cmp	r3, #9
 8001d66:	d91c      	bls.n	8001da2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68d9      	ldr	r1, [r3, #12]
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	4613      	mov	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4413      	add	r3, r2
 8001d78:	3b1e      	subs	r3, #30
 8001d7a:	2207      	movs	r2, #7
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	4019      	ands	r1, r3
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	6898      	ldr	r0, [r3, #8]
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4413      	add	r3, r2
 8001d92:	3b1e      	subs	r3, #30
 8001d94:	fa00 f203 	lsl.w	r2, r0, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	60da      	str	r2, [r3, #12]
 8001da0:	e019      	b.n	8001dd6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6919      	ldr	r1, [r3, #16]
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4613      	mov	r3, r2
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	4413      	add	r3, r2
 8001db2:	2207      	movs	r2, #7
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	4019      	ands	r1, r3
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	6898      	ldr	r0, [r3, #8]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	4413      	add	r3, r2
 8001dca:	fa00 f203 	lsl.w	r2, r0, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2b10      	cmp	r3, #16
 8001ddc:	d003      	beq.n	8001de6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001de2:	2b11      	cmp	r3, #17
 8001de4:	d132      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a1d      	ldr	r2, [pc, #116]	; (8001e60 <HAL_ADC_ConfigChannel+0x1e4>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d125      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d126      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001e0c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b10      	cmp	r3, #16
 8001e14:	d11a      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e16:	4b13      	ldr	r3, [pc, #76]	; (8001e64 <HAL_ADC_ConfigChannel+0x1e8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a13      	ldr	r2, [pc, #76]	; (8001e68 <HAL_ADC_ConfigChannel+0x1ec>)
 8001e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e20:	0c9a      	lsrs	r2, r3, #18
 8001e22:	4613      	mov	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e2c:	e002      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	3b01      	subs	r3, #1
 8001e32:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f9      	bne.n	8001e2e <HAL_ADC_ConfigChannel+0x1b2>
 8001e3a:	e007      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e40:	f043 0220 	orr.w	r2, r3, #32
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr
 8001e60:	40012400 	.word	0x40012400
 8001e64:	20000028 	.word	0x20000028
 8001e68:	431bde83 	.word	0x431bde83

08001e6c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d039      	beq.n	8001efe <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f042 0201 	orr.w	r2, r2, #1
 8001e98:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e9a:	4b1b      	ldr	r3, [pc, #108]	; (8001f08 <ADC_Enable+0x9c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a1b      	ldr	r2, [pc, #108]	; (8001f0c <ADC_Enable+0xa0>)
 8001ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea4:	0c9b      	lsrs	r3, r3, #18
 8001ea6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ea8:	e002      	b.n	8001eb0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	3b01      	subs	r3, #1
 8001eae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f9      	bne.n	8001eaa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001eb6:	f7ff fce3 	bl	8001880 <HAL_GetTick>
 8001eba:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ebc:	e018      	b.n	8001ef0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ebe:	f7ff fcdf 	bl	8001880 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d911      	bls.n	8001ef0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed0:	f043 0210 	orr.w	r2, r3, #16
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001edc:	f043 0201 	orr.w	r2, r3, #1
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e007      	b.n	8001f00 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d1df      	bne.n	8001ebe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20000028 	.word	0x20000028
 8001f0c:	431bde83 	.word	0x431bde83

08001f10 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d127      	bne.n	8001f7a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 0201 	bic.w	r2, r2, #1
 8001f38:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f3a:	f7ff fca1 	bl	8001880 <HAL_GetTick>
 8001f3e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f40:	e014      	b.n	8001f6c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f42:	f7ff fc9d 	bl	8001880 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d90d      	bls.n	8001f6c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f54:	f043 0210 	orr.w	r2, r3, #16
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f60:	f043 0201 	orr.w	r2, r3, #1
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e007      	b.n	8001f7c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d0e3      	beq.n	8001f42 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f96:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d127      	bne.n	8001fee <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001fb4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001fb8:	d115      	bne.n	8001fe6 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d111      	bne.n	8001fe6 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d105      	bne.n	8001fe6 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fde:	f043 0201 	orr.w	r2, r3, #1
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f7ff fe2c 	bl	8001c44 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001fec:	e004      	b.n	8001ff8 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	4798      	blx	r3
}
 8001ff8:	bf00      	nop
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f7ff fe21 	bl	8001c56 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002014:	bf00      	nop
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203a:	f043 0204 	orr.w	r2, r3, #4
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f7ff fe10 	bl	8001c68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002048:	bf00      	nop
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e0ed      	b.n	800223e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d102      	bne.n	8002074 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff fa80 	bl	8001574 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0202 	bic.w	r2, r2, #2
 8002082:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002084:	f7ff fbfc 	bl	8001880 <HAL_GetTick>
 8002088:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800208a:	e012      	b.n	80020b2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800208c:	f7ff fbf8 	bl	8001880 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b0a      	cmp	r3, #10
 8002098:	d90b      	bls.n	80020b2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2205      	movs	r2, #5
 80020aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e0c5      	b.n	800223e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1e5      	bne.n	800208c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0201 	orr.w	r2, r2, #1
 80020ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020d0:	f7ff fbd6 	bl	8001880 <HAL_GetTick>
 80020d4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020d6:	e012      	b.n	80020fe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020d8:	f7ff fbd2 	bl	8001880 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b0a      	cmp	r3, #10
 80020e4:	d90b      	bls.n	80020fe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2205      	movs	r2, #5
 80020f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e09f      	b.n	800223e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0e5      	beq.n	80020d8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	7e1b      	ldrb	r3, [r3, #24]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d108      	bne.n	8002126 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	e007      	b.n	8002136 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002134:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	7e5b      	ldrb	r3, [r3, #25]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d108      	bne.n	8002150 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	e007      	b.n	8002160 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800215e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	7e9b      	ldrb	r3, [r3, #26]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d108      	bne.n	800217a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0220 	orr.w	r2, r2, #32
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	e007      	b.n	800218a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 0220 	bic.w	r2, r2, #32
 8002188:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	7edb      	ldrb	r3, [r3, #27]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d108      	bne.n	80021a4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0210 	bic.w	r2, r2, #16
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	e007      	b.n	80021b4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 0210 	orr.w	r2, r2, #16
 80021b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	7f1b      	ldrb	r3, [r3, #28]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d108      	bne.n	80021ce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f042 0208 	orr.w	r2, r2, #8
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	e007      	b.n	80021de <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0208 	bic.w	r2, r2, #8
 80021dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	7f5b      	ldrb	r3, [r3, #29]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d108      	bne.n	80021f8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f042 0204 	orr.w	r2, r2, #4
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	e007      	b.n	8002208 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 0204 	bic.w	r2, r2, #4
 8002206:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	431a      	orrs	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	ea42 0103 	orr.w	r1, r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	1e5a      	subs	r2, r3, #1
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002246:	b480      	push	{r7}
 8002248:	b087      	sub	sp, #28
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 3020 	ldrb.w	r3, [r3, #32]
 800225c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800225e:	7cfb      	ldrb	r3, [r7, #19]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d003      	beq.n	800226c <HAL_CAN_ConfigFilter+0x26>
 8002264:	7cfb      	ldrb	r3, [r7, #19]
 8002266:	2b02      	cmp	r3, #2
 8002268:	f040 80aa 	bne.w	80023c0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002272:	f043 0201 	orr.w	r2, r3, #1
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	f003 031f 	and.w	r3, r3, #31
 8002284:	2201      	movs	r2, #1
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	43db      	mvns	r3, r3
 8002296:	401a      	ands	r2, r3
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d123      	bne.n	80022ee <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	43db      	mvns	r3, r3
 80022b0:	401a      	ands	r2, r3
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80022c8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	3248      	adds	r2, #72	; 0x48
 80022ce:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022e2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022e4:	6979      	ldr	r1, [r7, #20]
 80022e6:	3348      	adds	r3, #72	; 0x48
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	440b      	add	r3, r1
 80022ec:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d122      	bne.n	800233c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	431a      	orrs	r2, r3
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002316:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	3248      	adds	r2, #72	; 0x48
 800231c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002330:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002332:	6979      	ldr	r1, [r7, #20]
 8002334:	3348      	adds	r3, #72	; 0x48
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	440b      	add	r3, r1
 800233a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d109      	bne.n	8002358 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	43db      	mvns	r3, r3
 800234e:	401a      	ands	r2, r3
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002356:	e007      	b.n	8002368 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	431a      	orrs	r2, r3
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d109      	bne.n	8002384 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	43db      	mvns	r3, r3
 800237a:	401a      	ands	r2, r3
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002382:	e007      	b.n	8002394 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	431a      	orrs	r2, r3
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d107      	bne.n	80023ac <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	431a      	orrs	r2, r3
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023b2:	f023 0201 	bic.w	r2, r3, #1
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80023bc:	2300      	movs	r3, #0
 80023be:	e006      	b.n	80023ce <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
  }
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	371c      	adds	r7, #28
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr

080023d8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d12e      	bne.n	800244a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2202      	movs	r2, #2
 80023f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0201 	bic.w	r2, r2, #1
 8002402:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002404:	f7ff fa3c 	bl	8001880 <HAL_GetTick>
 8002408:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800240a:	e012      	b.n	8002432 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800240c:	f7ff fa38 	bl	8001880 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b0a      	cmp	r3, #10
 8002418:	d90b      	bls.n	8002432 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2205      	movs	r2, #5
 800242a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e012      	b.n	8002458 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1e5      	bne.n	800240c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002446:	2300      	movs	r3, #0
 8002448:	e006      	b.n	8002458 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
  }
}
 8002458:	4618      	mov	r0, r3
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002460:	b480      	push	{r7}
 8002462:	b089      	sub	sp, #36	; 0x24
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
 800246c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002474:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800247e:	7ffb      	ldrb	r3, [r7, #31]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d003      	beq.n	800248c <HAL_CAN_AddTxMessage+0x2c>
 8002484:	7ffb      	ldrb	r3, [r7, #31]
 8002486:	2b02      	cmp	r3, #2
 8002488:	f040 80b8 	bne.w	80025fc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10a      	bne.n	80024ac <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800249c:	2b00      	cmp	r3, #0
 800249e:	d105      	bne.n	80024ac <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 80a0 	beq.w	80025ec <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	0e1b      	lsrs	r3, r3, #24
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d907      	bls.n	80024cc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e09e      	b.n	800260a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80024cc:	2201      	movs	r2, #1
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	409a      	lsls	r2, r3
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10d      	bne.n	80024fa <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80024e8:	68f9      	ldr	r1, [r7, #12]
 80024ea:	6809      	ldr	r1, [r1, #0]
 80024ec:	431a      	orrs	r2, r3
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	3318      	adds	r3, #24
 80024f2:	011b      	lsls	r3, r3, #4
 80024f4:	440b      	add	r3, r1
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	e00f      	b.n	800251a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002504:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800250a:	68f9      	ldr	r1, [r7, #12]
 800250c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800250e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	3318      	adds	r3, #24
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	440b      	add	r3, r1
 8002518:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6819      	ldr	r1, [r3, #0]
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	691a      	ldr	r2, [r3, #16]
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	3318      	adds	r3, #24
 8002526:	011b      	lsls	r3, r3, #4
 8002528:	440b      	add	r3, r1
 800252a:	3304      	adds	r3, #4
 800252c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	7d1b      	ldrb	r3, [r3, #20]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d111      	bne.n	800255a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	3318      	adds	r3, #24
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	4413      	add	r3, r2
 8002542:	3304      	adds	r3, #4
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	6811      	ldr	r1, [r2, #0]
 800254a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	3318      	adds	r3, #24
 8002552:	011b      	lsls	r3, r3, #4
 8002554:	440b      	add	r3, r1
 8002556:	3304      	adds	r3, #4
 8002558:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3307      	adds	r3, #7
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	061a      	lsls	r2, r3, #24
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	3306      	adds	r3, #6
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	041b      	lsls	r3, r3, #16
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3305      	adds	r3, #5
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	021b      	lsls	r3, r3, #8
 8002574:	4313      	orrs	r3, r2
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	3204      	adds	r2, #4
 800257a:	7812      	ldrb	r2, [r2, #0]
 800257c:	4610      	mov	r0, r2
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	6811      	ldr	r1, [r2, #0]
 8002582:	ea43 0200 	orr.w	r2, r3, r0
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	011b      	lsls	r3, r3, #4
 800258a:	440b      	add	r3, r1
 800258c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002590:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3303      	adds	r3, #3
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	061a      	lsls	r2, r3, #24
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3302      	adds	r3, #2
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	041b      	lsls	r3, r3, #16
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3301      	adds	r3, #1
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	021b      	lsls	r3, r3, #8
 80025ac:	4313      	orrs	r3, r2
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	7812      	ldrb	r2, [r2, #0]
 80025b2:	4610      	mov	r0, r2
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	6811      	ldr	r1, [r2, #0]
 80025b8:	ea43 0200 	orr.w	r2, r3, r0
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	440b      	add	r3, r1
 80025c2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80025c6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	3318      	adds	r3, #24
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	4413      	add	r3, r2
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	6811      	ldr	r1, [r2, #0]
 80025da:	f043 0201 	orr.w	r2, r3, #1
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	3318      	adds	r3, #24
 80025e2:	011b      	lsls	r3, r3, #4
 80025e4:	440b      	add	r3, r1
 80025e6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	e00e      	b.n	800260a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e006      	b.n	800260a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
  }
}
 800260a:	4618      	mov	r0, r3
 800260c:	3724      	adds	r7, #36	; 0x24
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002628:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 800262a:	7afb      	ldrb	r3, [r7, #11]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d002      	beq.n	8002636 <HAL_CAN_IsTxMessagePending+0x22>
 8002630:	7afb      	ldrb	r3, [r7, #11]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d10b      	bne.n	800264e <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	069b      	lsls	r3, r3, #26
 8002640:	401a      	ands	r2, r3
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	069b      	lsls	r3, r3, #26
 8002646:	429a      	cmp	r2, r3
 8002648:	d001      	beq.n	800264e <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 800264a:	2301      	movs	r3, #1
 800264c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 800264e:	68fb      	ldr	r3, [r7, #12]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr

0800265a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800265a:	b480      	push	{r7}
 800265c:	b087      	sub	sp, #28
 800265e:	af00      	add	r7, sp, #0
 8002660:	60f8      	str	r0, [r7, #12]
 8002662:	60b9      	str	r1, [r7, #8]
 8002664:	607a      	str	r2, [r7, #4]
 8002666:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800266e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002670:	7dfb      	ldrb	r3, [r7, #23]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d003      	beq.n	800267e <HAL_CAN_GetRxMessage+0x24>
 8002676:	7dfb      	ldrb	r3, [r7, #23]
 8002678:	2b02      	cmp	r3, #2
 800267a:	f040 80f3 	bne.w	8002864 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10e      	bne.n	80026a2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d116      	bne.n	80026c0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e0e7      	b.n	8002872 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	f003 0303 	and.w	r3, r3, #3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d107      	bne.n	80026c0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0d8      	b.n	8002872 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	331b      	adds	r3, #27
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	4413      	add	r3, r2
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0204 	and.w	r2, r3, #4
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10c      	bne.n	80026f8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	331b      	adds	r3, #27
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	4413      	add	r3, r2
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	0d5b      	lsrs	r3, r3, #21
 80026ee:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	e00b      	b.n	8002710 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	331b      	adds	r3, #27
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	4413      	add	r3, r2
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	08db      	lsrs	r3, r3, #3
 8002708:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	331b      	adds	r3, #27
 8002718:	011b      	lsls	r3, r3, #4
 800271a:	4413      	add	r3, r2
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0202 	and.w	r2, r3, #2
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	331b      	adds	r3, #27
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	4413      	add	r3, r2
 8002732:	3304      	adds	r3, #4
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 020f 	and.w	r2, r3, #15
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	331b      	adds	r3, #27
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	4413      	add	r3, r2
 800274a:	3304      	adds	r3, #4
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	0a1b      	lsrs	r3, r3, #8
 8002750:	b2da      	uxtb	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	331b      	adds	r3, #27
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	4413      	add	r3, r2
 8002762:	3304      	adds	r3, #4
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	0c1b      	lsrs	r3, r3, #16
 8002768:	b29a      	uxth	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	011b      	lsls	r3, r3, #4
 8002776:	4413      	add	r3, r2
 8002778:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	b2da      	uxtb	r2, r3
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	4413      	add	r3, r2
 800278e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	0a1a      	lsrs	r2, r3, #8
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	3301      	adds	r3, #1
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	011b      	lsls	r3, r3, #4
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	0c1a      	lsrs	r2, r3, #16
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	3302      	adds	r3, #2
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	4413      	add	r3, r2
 80027c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	0e1a      	lsrs	r2, r3, #24
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	3303      	adds	r3, #3
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	011b      	lsls	r3, r3, #4
 80027da:	4413      	add	r3, r2
 80027dc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	3304      	adds	r3, #4
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	4413      	add	r3, r2
 80027f4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	0a1a      	lsrs	r2, r3, #8
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	3305      	adds	r3, #5
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	011b      	lsls	r3, r3, #4
 800280c:	4413      	add	r3, r2
 800280e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	0c1a      	lsrs	r2, r3, #16
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	3306      	adds	r3, #6
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	011b      	lsls	r3, r3, #4
 8002826:	4413      	add	r3, r2
 8002828:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	0e1a      	lsrs	r2, r3, #24
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	3307      	adds	r3, #7
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d108      	bne.n	8002850 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f042 0220 	orr.w	r2, r2, #32
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	e007      	b.n	8002860 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691a      	ldr	r2, [r3, #16]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f042 0220 	orr.w	r2, r2, #32
 800285e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002860:	2300      	movs	r3, #0
 8002862:	e006      	b.n	8002872 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
  }
}
 8002872:	4618      	mov	r0, r3
 8002874:	371c      	adds	r7, #28
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr

0800287c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 3020 	ldrb.w	r3, [r3, #32]
 800288c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800288e:	7bfb      	ldrb	r3, [r7, #15]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d002      	beq.n	800289a <HAL_CAN_ActivateNotification+0x1e>
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d109      	bne.n	80028ae <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6959      	ldr	r1, [r3, #20]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80028aa:	2300      	movs	r3, #0
 80028ac:	e006      	b.n	80028bc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
  }
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr

080028c6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b08a      	sub	sp, #40	; 0x28
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80028ce:	2300      	movs	r3, #0
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002902:	6a3b      	ldr	r3, [r7, #32]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b00      	cmp	r3, #0
 800290a:	d07c      	beq.n	8002a06 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d023      	beq.n	800295e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2201      	movs	r2, #1
 800291c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f97d 	bl	8002c28 <HAL_CAN_TxMailbox0CompleteCallback>
 800292e:	e016      	b.n	800295e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	f003 0304 	and.w	r3, r3, #4
 8002936:	2b00      	cmp	r3, #0
 8002938:	d004      	beq.n	8002944 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
 8002942:	e00c      	b.n	800295e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b00      	cmp	r3, #0
 800294c:	d004      	beq.n	8002958 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
 8002956:	e002      	b.n	800295e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 f980 	bl	8002c5e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002964:	2b00      	cmp	r3, #0
 8002966:	d024      	beq.n	80029b2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002970:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f95c 	bl	8002c3a <HAL_CAN_TxMailbox1CompleteCallback>
 8002982:	e016      	b.n	80029b2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298a:	2b00      	cmp	r3, #0
 800298c:	d004      	beq.n	8002998 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
 8002996:	e00c      	b.n	80029b2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d004      	beq.n	80029ac <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
 80029aa:	e002      	b.n	80029b2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f95f 	bl	8002c70 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d024      	beq.n	8002a06 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 f93b 	bl	8002c4c <HAL_CAN_TxMailbox2CompleteCallback>
 80029d6:	e016      	b.n	8002a06 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d004      	beq.n	80029ec <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ea:	e00c      	b.n	8002a06 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d004      	beq.n	8002a00 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24
 80029fe:	e002      	b.n	8002a06 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f93e 	bl	8002c82 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	f003 0308 	and.w	r3, r3, #8
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00c      	beq.n	8002a2a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f003 0310 	and.w	r3, r3, #16
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d007      	beq.n	8002a2a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2210      	movs	r2, #16
 8002a28:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002a2a:	6a3b      	ldr	r3, [r7, #32]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00b      	beq.n	8002a4c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d006      	beq.n	8002a4c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2208      	movs	r2, #8
 8002a44:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f92d 	bl	8002ca6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d009      	beq.n	8002a6a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d002      	beq.n	8002a6a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 f915 	bl	8002c94 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
 8002a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00c      	beq.n	8002a8e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	f003 0310 	and.w	r3, r3, #16
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a84:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2210      	movs	r2, #16
 8002a8c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	f003 0320 	and.w	r3, r3, #32
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00b      	beq.n	8002ab0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d006      	beq.n	8002ab0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2208      	movs	r2, #8
 8002aa8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f904 	bl	8002cb8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	f003 0310 	and.w	r3, r3, #16
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d009      	beq.n	8002ace <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7fd ffd5 	bl	8000a78 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00b      	beq.n	8002af0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f003 0310 	and.w	r3, r3, #16
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d006      	beq.n	8002af0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2210      	movs	r2, #16
 8002ae8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f8ed 	bl	8002cca <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00b      	beq.n	8002b12 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	f003 0308 	and.w	r3, r3, #8
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d006      	beq.n	8002b12 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2208      	movs	r2, #8
 8002b0a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 f8e5 	bl	8002cdc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002b12:	6a3b      	ldr	r3, [r7, #32]
 8002b14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d075      	beq.n	8002c08 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d06c      	beq.n	8002c00 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d008      	beq.n	8002b42 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b42:	6a3b      	ldr	r3, [r7, #32]
 8002b44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	f043 0302 	orr.w	r3, r3, #2
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d008      	beq.n	8002b7a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	f043 0304 	orr.w	r3, r3, #4
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d03d      	beq.n	8002c00 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d038      	beq.n	8002c00 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b94:	2b30      	cmp	r3, #48	; 0x30
 8002b96:	d017      	beq.n	8002bc8 <HAL_CAN_IRQHandler+0x302>
 8002b98:	2b30      	cmp	r3, #48	; 0x30
 8002b9a:	d804      	bhi.n	8002ba6 <HAL_CAN_IRQHandler+0x2e0>
 8002b9c:	2b10      	cmp	r3, #16
 8002b9e:	d009      	beq.n	8002bb4 <HAL_CAN_IRQHandler+0x2ee>
 8002ba0:	2b20      	cmp	r3, #32
 8002ba2:	d00c      	beq.n	8002bbe <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002ba4:	e024      	b.n	8002bf0 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8002ba6:	2b50      	cmp	r3, #80	; 0x50
 8002ba8:	d018      	beq.n	8002bdc <HAL_CAN_IRQHandler+0x316>
 8002baa:	2b60      	cmp	r3, #96	; 0x60
 8002bac:	d01b      	beq.n	8002be6 <HAL_CAN_IRQHandler+0x320>
 8002bae:	2b40      	cmp	r3, #64	; 0x40
 8002bb0:	d00f      	beq.n	8002bd2 <HAL_CAN_IRQHandler+0x30c>
            break;
 8002bb2:	e01d      	b.n	8002bf0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	f043 0308 	orr.w	r3, r3, #8
 8002bba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bbc:	e018      	b.n	8002bf0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	f043 0310 	orr.w	r3, r3, #16
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bc6:	e013      	b.n	8002bf0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	f043 0320 	orr.w	r3, r3, #32
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bd0:	e00e      	b.n	8002bf0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bda:	e009      	b.n	8002bf0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002be4:	e004      	b.n	8002bf0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bee:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	699a      	ldr	r2, [r3, #24]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002bfe:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2204      	movs	r2, #4
 8002c06:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d008      	beq.n	8002c20 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	431a      	orrs	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f867 	bl	8002cee <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002c20:	bf00      	nop
 8002c22:	3728      	adds	r7, #40	; 0x28
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	4770      	bx	lr

08002c3a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr

08002c4c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bc80      	pop	{r7}
 8002c5c:	4770      	bx	lr

08002c5e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr

08002c70 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bc80      	pop	{r7}
 8002c80:	4770      	bx	lr

08002c82 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr

08002c94 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr

08002ca6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bc80      	pop	{r7}
 8002cc8:	4770      	bx	lr

08002cca <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr

08002cdc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr

08002cee <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr

08002d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d10:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <__NVIC_SetPriorityGrouping+0x44>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d32:	4a04      	ldr	r2, [pc, #16]	; (8002d44 <__NVIC_SetPriorityGrouping+0x44>)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	60d3      	str	r3, [r2, #12]
}
 8002d38:	bf00      	nop
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	e000ed00 	.word	0xe000ed00

08002d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d4c:	4b04      	ldr	r3, [pc, #16]	; (8002d60 <__NVIC_GetPriorityGrouping+0x18>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	0a1b      	lsrs	r3, r3, #8
 8002d52:	f003 0307 	and.w	r3, r3, #7
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	e000ed00 	.word	0xe000ed00

08002d64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	db0b      	blt.n	8002d8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d76:	79fb      	ldrb	r3, [r7, #7]
 8002d78:	f003 021f 	and.w	r2, r3, #31
 8002d7c:	4906      	ldr	r1, [pc, #24]	; (8002d98 <__NVIC_EnableIRQ+0x34>)
 8002d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d82:	095b      	lsrs	r3, r3, #5
 8002d84:	2001      	movs	r0, #1
 8002d86:	fa00 f202 	lsl.w	r2, r0, r2
 8002d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr
 8002d98:	e000e100 	.word	0xe000e100

08002d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	6039      	str	r1, [r7, #0]
 8002da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	db0a      	blt.n	8002dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	490c      	ldr	r1, [pc, #48]	; (8002de8 <__NVIC_SetPriority+0x4c>)
 8002db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dba:	0112      	lsls	r2, r2, #4
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dc4:	e00a      	b.n	8002ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	4908      	ldr	r1, [pc, #32]	; (8002dec <__NVIC_SetPriority+0x50>)
 8002dcc:	79fb      	ldrb	r3, [r7, #7]
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	3b04      	subs	r3, #4
 8002dd4:	0112      	lsls	r2, r2, #4
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	440b      	add	r3, r1
 8002dda:	761a      	strb	r2, [r3, #24]
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	e000e100 	.word	0xe000e100
 8002dec:	e000ed00 	.word	0xe000ed00

08002df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b089      	sub	sp, #36	; 0x24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f1c3 0307 	rsb	r3, r3, #7
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	bf28      	it	cs
 8002e0e:	2304      	movcs	r3, #4
 8002e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	3304      	adds	r3, #4
 8002e16:	2b06      	cmp	r3, #6
 8002e18:	d902      	bls.n	8002e20 <NVIC_EncodePriority+0x30>
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	3b03      	subs	r3, #3
 8002e1e:	e000      	b.n	8002e22 <NVIC_EncodePriority+0x32>
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e24:	f04f 32ff 	mov.w	r2, #4294967295
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43da      	mvns	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	401a      	ands	r2, r3
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e38:	f04f 31ff 	mov.w	r1, #4294967295
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e42:	43d9      	mvns	r1, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e48:	4313      	orrs	r3, r2
         );
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3724      	adds	r7, #36	; 0x24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr

08002e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e64:	d301      	bcc.n	8002e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e66:	2301      	movs	r3, #1
 8002e68:	e00f      	b.n	8002e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e6a:	4a0a      	ldr	r2, [pc, #40]	; (8002e94 <SysTick_Config+0x40>)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e72:	210f      	movs	r1, #15
 8002e74:	f04f 30ff 	mov.w	r0, #4294967295
 8002e78:	f7ff ff90 	bl	8002d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e7c:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <SysTick_Config+0x40>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e82:	4b04      	ldr	r3, [pc, #16]	; (8002e94 <SysTick_Config+0x40>)
 8002e84:	2207      	movs	r2, #7
 8002e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	e000e010 	.word	0xe000e010

08002e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7ff ff2d 	bl	8002d00 <__NVIC_SetPriorityGrouping>
}
 8002ea6:	bf00      	nop
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b086      	sub	sp, #24
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	60b9      	str	r1, [r7, #8]
 8002eb8:	607a      	str	r2, [r7, #4]
 8002eba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ec0:	f7ff ff42 	bl	8002d48 <__NVIC_GetPriorityGrouping>
 8002ec4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	68b9      	ldr	r1, [r7, #8]
 8002eca:	6978      	ldr	r0, [r7, #20]
 8002ecc:	f7ff ff90 	bl	8002df0 <NVIC_EncodePriority>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff ff5f 	bl	8002d9c <__NVIC_SetPriority>
}
 8002ede:	bf00      	nop
 8002ee0:	3718      	adds	r7, #24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b082      	sub	sp, #8
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	4603      	mov	r3, r0
 8002eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff ff35 	bl	8002d64 <__NVIC_EnableIRQ>
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7ff ffa2 	bl	8002e54 <SysTick_Config>
 8002f10:	4603      	mov	r3, r0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
	...

08002f1c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e043      	b.n	8002fba <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	461a      	mov	r2, r3
 8002f38:	4b22      	ldr	r3, [pc, #136]	; (8002fc4 <HAL_DMA_Init+0xa8>)
 8002f3a:	4413      	add	r3, r2
 8002f3c:	4a22      	ldr	r2, [pc, #136]	; (8002fc8 <HAL_DMA_Init+0xac>)
 8002f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f42:	091b      	lsrs	r3, r3, #4
 8002f44:	009a      	lsls	r2, r3, #2
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a1f      	ldr	r2, [pc, #124]	; (8002fcc <HAL_DMA_Init+0xb0>)
 8002f4e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2202      	movs	r2, #2
 8002f54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002f66:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002f6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002f74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3714      	adds	r7, #20
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr
 8002fc4:	bffdfff8 	.word	0xbffdfff8
 8002fc8:	cccccccd 	.word	0xcccccccd
 8002fcc:	40020000 	.word	0x40020000

08002fd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
 8002fdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d101      	bne.n	8002ff0 <HAL_DMA_Start_IT+0x20>
 8002fec:	2302      	movs	r3, #2
 8002fee:	e04a      	b.n	8003086 <HAL_DMA_Start_IT+0xb6>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d13a      	bne.n	8003078 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2202      	movs	r2, #2
 8003006:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0201 	bic.w	r2, r2, #1
 800301e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	68b9      	ldr	r1, [r7, #8]
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 f938 	bl	800329c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003030:	2b00      	cmp	r3, #0
 8003032:	d008      	beq.n	8003046 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 020e 	orr.w	r2, r2, #14
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	e00f      	b.n	8003066 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 0204 	bic.w	r2, r2, #4
 8003054:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f042 020a 	orr.w	r2, r2, #10
 8003064:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f042 0201 	orr.w	r2, r2, #1
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	e005      	b.n	8003084 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003080:	2302      	movs	r3, #2
 8003082:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003084:	7dfb      	ldrb	r3, [r7, #23]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	2204      	movs	r2, #4
 80030ae:	409a      	lsls	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4013      	ands	r3, r2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d04f      	beq.n	8003158 <HAL_DMA_IRQHandler+0xc8>
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f003 0304 	and.w	r3, r3, #4
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d04a      	beq.n	8003158 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0320 	and.w	r3, r3, #32
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d107      	bne.n	80030e0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0204 	bic.w	r2, r2, #4
 80030de:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a66      	ldr	r2, [pc, #408]	; (8003280 <HAL_DMA_IRQHandler+0x1f0>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d029      	beq.n	800313e <HAL_DMA_IRQHandler+0xae>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a65      	ldr	r2, [pc, #404]	; (8003284 <HAL_DMA_IRQHandler+0x1f4>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d022      	beq.n	800313a <HAL_DMA_IRQHandler+0xaa>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a63      	ldr	r2, [pc, #396]	; (8003288 <HAL_DMA_IRQHandler+0x1f8>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d01a      	beq.n	8003134 <HAL_DMA_IRQHandler+0xa4>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a62      	ldr	r2, [pc, #392]	; (800328c <HAL_DMA_IRQHandler+0x1fc>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d012      	beq.n	800312e <HAL_DMA_IRQHandler+0x9e>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a60      	ldr	r2, [pc, #384]	; (8003290 <HAL_DMA_IRQHandler+0x200>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d00a      	beq.n	8003128 <HAL_DMA_IRQHandler+0x98>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a5f      	ldr	r2, [pc, #380]	; (8003294 <HAL_DMA_IRQHandler+0x204>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d102      	bne.n	8003122 <HAL_DMA_IRQHandler+0x92>
 800311c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003120:	e00e      	b.n	8003140 <HAL_DMA_IRQHandler+0xb0>
 8003122:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003126:	e00b      	b.n	8003140 <HAL_DMA_IRQHandler+0xb0>
 8003128:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800312c:	e008      	b.n	8003140 <HAL_DMA_IRQHandler+0xb0>
 800312e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003132:	e005      	b.n	8003140 <HAL_DMA_IRQHandler+0xb0>
 8003134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003138:	e002      	b.n	8003140 <HAL_DMA_IRQHandler+0xb0>
 800313a:	2340      	movs	r3, #64	; 0x40
 800313c:	e000      	b.n	8003140 <HAL_DMA_IRQHandler+0xb0>
 800313e:	2304      	movs	r3, #4
 8003140:	4a55      	ldr	r2, [pc, #340]	; (8003298 <HAL_DMA_IRQHandler+0x208>)
 8003142:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 8094 	beq.w	8003276 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003156:	e08e      	b.n	8003276 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315c:	2202      	movs	r2, #2
 800315e:	409a      	lsls	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	4013      	ands	r3, r2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d056      	beq.n	8003216 <HAL_DMA_IRQHandler+0x186>
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d051      	beq.n	8003216 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0320 	and.w	r3, r3, #32
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10b      	bne.n	8003198 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 020a 	bic.w	r2, r2, #10
 800318e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a38      	ldr	r2, [pc, #224]	; (8003280 <HAL_DMA_IRQHandler+0x1f0>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d029      	beq.n	80031f6 <HAL_DMA_IRQHandler+0x166>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a37      	ldr	r2, [pc, #220]	; (8003284 <HAL_DMA_IRQHandler+0x1f4>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d022      	beq.n	80031f2 <HAL_DMA_IRQHandler+0x162>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a35      	ldr	r2, [pc, #212]	; (8003288 <HAL_DMA_IRQHandler+0x1f8>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d01a      	beq.n	80031ec <HAL_DMA_IRQHandler+0x15c>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a34      	ldr	r2, [pc, #208]	; (800328c <HAL_DMA_IRQHandler+0x1fc>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d012      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x156>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a32      	ldr	r2, [pc, #200]	; (8003290 <HAL_DMA_IRQHandler+0x200>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d00a      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x150>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a31      	ldr	r2, [pc, #196]	; (8003294 <HAL_DMA_IRQHandler+0x204>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d102      	bne.n	80031da <HAL_DMA_IRQHandler+0x14a>
 80031d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80031d8:	e00e      	b.n	80031f8 <HAL_DMA_IRQHandler+0x168>
 80031da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031de:	e00b      	b.n	80031f8 <HAL_DMA_IRQHandler+0x168>
 80031e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031e4:	e008      	b.n	80031f8 <HAL_DMA_IRQHandler+0x168>
 80031e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031ea:	e005      	b.n	80031f8 <HAL_DMA_IRQHandler+0x168>
 80031ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031f0:	e002      	b.n	80031f8 <HAL_DMA_IRQHandler+0x168>
 80031f2:	2320      	movs	r3, #32
 80031f4:	e000      	b.n	80031f8 <HAL_DMA_IRQHandler+0x168>
 80031f6:	2302      	movs	r3, #2
 80031f8:	4a27      	ldr	r2, [pc, #156]	; (8003298 <HAL_DMA_IRQHandler+0x208>)
 80031fa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003208:	2b00      	cmp	r3, #0
 800320a:	d034      	beq.n	8003276 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003214:	e02f      	b.n	8003276 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	2208      	movs	r2, #8
 800321c:	409a      	lsls	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	4013      	ands	r3, r2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d028      	beq.n	8003278 <HAL_DMA_IRQHandler+0x1e8>
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	f003 0308 	and.w	r3, r3, #8
 800322c:	2b00      	cmp	r3, #0
 800322e:	d023      	beq.n	8003278 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 020e 	bic.w	r2, r2, #14
 800323e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003248:	2101      	movs	r1, #1
 800324a:	fa01 f202 	lsl.w	r2, r1, r2
 800324e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	2b00      	cmp	r3, #0
 800326c:	d004      	beq.n	8003278 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	4798      	blx	r3
    }
  }
  return;
 8003276:	bf00      	nop
 8003278:	bf00      	nop
}
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40020008 	.word	0x40020008
 8003284:	4002001c 	.word	0x4002001c
 8003288:	40020030 	.word	0x40020030
 800328c:	40020044 	.word	0x40020044
 8003290:	40020058 	.word	0x40020058
 8003294:	4002006c 	.word	0x4002006c
 8003298:	40020000 	.word	0x40020000

0800329c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
 80032a8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b2:	2101      	movs	r1, #1
 80032b4:	fa01 f202 	lsl.w	r2, r1, r2
 80032b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b10      	cmp	r3, #16
 80032c8:	d108      	bne.n	80032dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80032da:	e007      	b.n	80032ec <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	60da      	str	r2, [r3, #12]
}
 80032ec:	bf00      	nop
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bc80      	pop	{r7}
 80032f4:	4770      	bx	lr
	...

080032f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b08b      	sub	sp, #44	; 0x2c
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003302:	2300      	movs	r3, #0
 8003304:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003306:	2300      	movs	r3, #0
 8003308:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800330a:	e127      	b.n	800355c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800330c:	2201      	movs	r2, #1
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	69fa      	ldr	r2, [r7, #28]
 800331c:	4013      	ands	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	429a      	cmp	r2, r3
 8003326:	f040 8116 	bne.w	8003556 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b12      	cmp	r3, #18
 8003330:	d034      	beq.n	800339c <HAL_GPIO_Init+0xa4>
 8003332:	2b12      	cmp	r3, #18
 8003334:	d80d      	bhi.n	8003352 <HAL_GPIO_Init+0x5a>
 8003336:	2b02      	cmp	r3, #2
 8003338:	d02b      	beq.n	8003392 <HAL_GPIO_Init+0x9a>
 800333a:	2b02      	cmp	r3, #2
 800333c:	d804      	bhi.n	8003348 <HAL_GPIO_Init+0x50>
 800333e:	2b00      	cmp	r3, #0
 8003340:	d031      	beq.n	80033a6 <HAL_GPIO_Init+0xae>
 8003342:	2b01      	cmp	r3, #1
 8003344:	d01c      	beq.n	8003380 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003346:	e048      	b.n	80033da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003348:	2b03      	cmp	r3, #3
 800334a:	d043      	beq.n	80033d4 <HAL_GPIO_Init+0xdc>
 800334c:	2b11      	cmp	r3, #17
 800334e:	d01b      	beq.n	8003388 <HAL_GPIO_Init+0x90>
          break;
 8003350:	e043      	b.n	80033da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003352:	4a89      	ldr	r2, [pc, #548]	; (8003578 <HAL_GPIO_Init+0x280>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d026      	beq.n	80033a6 <HAL_GPIO_Init+0xae>
 8003358:	4a87      	ldr	r2, [pc, #540]	; (8003578 <HAL_GPIO_Init+0x280>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d806      	bhi.n	800336c <HAL_GPIO_Init+0x74>
 800335e:	4a87      	ldr	r2, [pc, #540]	; (800357c <HAL_GPIO_Init+0x284>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d020      	beq.n	80033a6 <HAL_GPIO_Init+0xae>
 8003364:	4a86      	ldr	r2, [pc, #536]	; (8003580 <HAL_GPIO_Init+0x288>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d01d      	beq.n	80033a6 <HAL_GPIO_Init+0xae>
          break;
 800336a:	e036      	b.n	80033da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800336c:	4a85      	ldr	r2, [pc, #532]	; (8003584 <HAL_GPIO_Init+0x28c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d019      	beq.n	80033a6 <HAL_GPIO_Init+0xae>
 8003372:	4a85      	ldr	r2, [pc, #532]	; (8003588 <HAL_GPIO_Init+0x290>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d016      	beq.n	80033a6 <HAL_GPIO_Init+0xae>
 8003378:	4a84      	ldr	r2, [pc, #528]	; (800358c <HAL_GPIO_Init+0x294>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d013      	beq.n	80033a6 <HAL_GPIO_Init+0xae>
          break;
 800337e:	e02c      	b.n	80033da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	623b      	str	r3, [r7, #32]
          break;
 8003386:	e028      	b.n	80033da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	3304      	adds	r3, #4
 800338e:	623b      	str	r3, [r7, #32]
          break;
 8003390:	e023      	b.n	80033da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	3308      	adds	r3, #8
 8003398:	623b      	str	r3, [r7, #32]
          break;
 800339a:	e01e      	b.n	80033da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	330c      	adds	r3, #12
 80033a2:	623b      	str	r3, [r7, #32]
          break;
 80033a4:	e019      	b.n	80033da <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d102      	bne.n	80033b4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80033ae:	2304      	movs	r3, #4
 80033b0:	623b      	str	r3, [r7, #32]
          break;
 80033b2:	e012      	b.n	80033da <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d105      	bne.n	80033c8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033bc:	2308      	movs	r3, #8
 80033be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	69fa      	ldr	r2, [r7, #28]
 80033c4:	611a      	str	r2, [r3, #16]
          break;
 80033c6:	e008      	b.n	80033da <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033c8:	2308      	movs	r3, #8
 80033ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	69fa      	ldr	r2, [r7, #28]
 80033d0:	615a      	str	r2, [r3, #20]
          break;
 80033d2:	e002      	b.n	80033da <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80033d4:	2300      	movs	r3, #0
 80033d6:	623b      	str	r3, [r7, #32]
          break;
 80033d8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	2bff      	cmp	r3, #255	; 0xff
 80033de:	d801      	bhi.n	80033e4 <HAL_GPIO_Init+0xec>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	e001      	b.n	80033e8 <HAL_GPIO_Init+0xf0>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3304      	adds	r3, #4
 80033e8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	2bff      	cmp	r3, #255	; 0xff
 80033ee:	d802      	bhi.n	80033f6 <HAL_GPIO_Init+0xfe>
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	e002      	b.n	80033fc <HAL_GPIO_Init+0x104>
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	3b08      	subs	r3, #8
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	210f      	movs	r1, #15
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	fa01 f303 	lsl.w	r3, r1, r3
 800340a:	43db      	mvns	r3, r3
 800340c:	401a      	ands	r2, r3
 800340e:	6a39      	ldr	r1, [r7, #32]
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	fa01 f303 	lsl.w	r3, r1, r3
 8003416:	431a      	orrs	r2, r3
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 8096 	beq.w	8003556 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800342a:	4b59      	ldr	r3, [pc, #356]	; (8003590 <HAL_GPIO_Init+0x298>)
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	4a58      	ldr	r2, [pc, #352]	; (8003590 <HAL_GPIO_Init+0x298>)
 8003430:	f043 0301 	orr.w	r3, r3, #1
 8003434:	6193      	str	r3, [r2, #24]
 8003436:	4b56      	ldr	r3, [pc, #344]	; (8003590 <HAL_GPIO_Init+0x298>)
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	60bb      	str	r3, [r7, #8]
 8003440:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003442:	4a54      	ldr	r2, [pc, #336]	; (8003594 <HAL_GPIO_Init+0x29c>)
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	089b      	lsrs	r3, r3, #2
 8003448:	3302      	adds	r3, #2
 800344a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800344e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	220f      	movs	r2, #15
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	43db      	mvns	r3, r3
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	4013      	ands	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a4b      	ldr	r2, [pc, #300]	; (8003598 <HAL_GPIO_Init+0x2a0>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d013      	beq.n	8003496 <HAL_GPIO_Init+0x19e>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a4a      	ldr	r2, [pc, #296]	; (800359c <HAL_GPIO_Init+0x2a4>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d00d      	beq.n	8003492 <HAL_GPIO_Init+0x19a>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a49      	ldr	r2, [pc, #292]	; (80035a0 <HAL_GPIO_Init+0x2a8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d007      	beq.n	800348e <HAL_GPIO_Init+0x196>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a48      	ldr	r2, [pc, #288]	; (80035a4 <HAL_GPIO_Init+0x2ac>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d101      	bne.n	800348a <HAL_GPIO_Init+0x192>
 8003486:	2303      	movs	r3, #3
 8003488:	e006      	b.n	8003498 <HAL_GPIO_Init+0x1a0>
 800348a:	2304      	movs	r3, #4
 800348c:	e004      	b.n	8003498 <HAL_GPIO_Init+0x1a0>
 800348e:	2302      	movs	r3, #2
 8003490:	e002      	b.n	8003498 <HAL_GPIO_Init+0x1a0>
 8003492:	2301      	movs	r3, #1
 8003494:	e000      	b.n	8003498 <HAL_GPIO_Init+0x1a0>
 8003496:	2300      	movs	r3, #0
 8003498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800349a:	f002 0203 	and.w	r2, r2, #3
 800349e:	0092      	lsls	r2, r2, #2
 80034a0:	4093      	lsls	r3, r2
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80034a8:	493a      	ldr	r1, [pc, #232]	; (8003594 <HAL_GPIO_Init+0x29c>)
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	089b      	lsrs	r3, r3, #2
 80034ae:	3302      	adds	r3, #2
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d006      	beq.n	80034d0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80034c2:	4b39      	ldr	r3, [pc, #228]	; (80035a8 <HAL_GPIO_Init+0x2b0>)
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	4938      	ldr	r1, [pc, #224]	; (80035a8 <HAL_GPIO_Init+0x2b0>)
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	600b      	str	r3, [r1, #0]
 80034ce:	e006      	b.n	80034de <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80034d0:	4b35      	ldr	r3, [pc, #212]	; (80035a8 <HAL_GPIO_Init+0x2b0>)
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	43db      	mvns	r3, r3
 80034d8:	4933      	ldr	r1, [pc, #204]	; (80035a8 <HAL_GPIO_Init+0x2b0>)
 80034da:	4013      	ands	r3, r2
 80034dc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d006      	beq.n	80034f8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80034ea:	4b2f      	ldr	r3, [pc, #188]	; (80035a8 <HAL_GPIO_Init+0x2b0>)
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	492e      	ldr	r1, [pc, #184]	; (80035a8 <HAL_GPIO_Init+0x2b0>)
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	604b      	str	r3, [r1, #4]
 80034f6:	e006      	b.n	8003506 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80034f8:	4b2b      	ldr	r3, [pc, #172]	; (80035a8 <HAL_GPIO_Init+0x2b0>)
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	43db      	mvns	r3, r3
 8003500:	4929      	ldr	r1, [pc, #164]	; (80035a8 <HAL_GPIO_Init+0x2b0>)
 8003502:	4013      	ands	r3, r2
 8003504:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d006      	beq.n	8003520 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003512:	4b25      	ldr	r3, [pc, #148]	; (80035a8 <HAL_GPIO_Init+0x2b0>)
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	4924      	ldr	r1, [pc, #144]	; (80035a8 <HAL_GPIO_Init+0x2b0>)
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	4313      	orrs	r3, r2
 800351c:	608b      	str	r3, [r1, #8]
 800351e:	e006      	b.n	800352e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003520:	4b21      	ldr	r3, [pc, #132]	; (80035a8 <HAL_GPIO_Init+0x2b0>)
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	43db      	mvns	r3, r3
 8003528:	491f      	ldr	r1, [pc, #124]	; (80035a8 <HAL_GPIO_Init+0x2b0>)
 800352a:	4013      	ands	r3, r2
 800352c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d006      	beq.n	8003548 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800353a:	4b1b      	ldr	r3, [pc, #108]	; (80035a8 <HAL_GPIO_Init+0x2b0>)
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	491a      	ldr	r1, [pc, #104]	; (80035a8 <HAL_GPIO_Init+0x2b0>)
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	4313      	orrs	r3, r2
 8003544:	60cb      	str	r3, [r1, #12]
 8003546:	e006      	b.n	8003556 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003548:	4b17      	ldr	r3, [pc, #92]	; (80035a8 <HAL_GPIO_Init+0x2b0>)
 800354a:	68da      	ldr	r2, [r3, #12]
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	43db      	mvns	r3, r3
 8003550:	4915      	ldr	r1, [pc, #84]	; (80035a8 <HAL_GPIO_Init+0x2b0>)
 8003552:	4013      	ands	r3, r2
 8003554:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	3301      	adds	r3, #1
 800355a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	fa22 f303 	lsr.w	r3, r2, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	f47f aed0 	bne.w	800330c <HAL_GPIO_Init+0x14>
  }
}
 800356c:	bf00      	nop
 800356e:	372c      	adds	r7, #44	; 0x2c
 8003570:	46bd      	mov	sp, r7
 8003572:	bc80      	pop	{r7}
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	10210000 	.word	0x10210000
 800357c:	10110000 	.word	0x10110000
 8003580:	10120000 	.word	0x10120000
 8003584:	10310000 	.word	0x10310000
 8003588:	10320000 	.word	0x10320000
 800358c:	10220000 	.word	0x10220000
 8003590:	40021000 	.word	0x40021000
 8003594:	40010000 	.word	0x40010000
 8003598:	40010800 	.word	0x40010800
 800359c:	40010c00 	.word	0x40010c00
 80035a0:	40011000 	.word	0x40011000
 80035a4:	40011400 	.word	0x40011400
 80035a8:	40010400 	.word	0x40010400

080035ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	460b      	mov	r3, r1
 80035b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	887b      	ldrh	r3, [r7, #2]
 80035be:	4013      	ands	r3, r2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d002      	beq.n	80035ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035c4:	2301      	movs	r3, #1
 80035c6:	73fb      	strb	r3, [r7, #15]
 80035c8:	e001      	b.n	80035ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035ca:	2300      	movs	r3, #0
 80035cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bc80      	pop	{r7}
 80035d8:	4770      	bx	lr

080035da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
 80035e2:	460b      	mov	r3, r1
 80035e4:	807b      	strh	r3, [r7, #2]
 80035e6:	4613      	mov	r3, r2
 80035e8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035ea:	787b      	ldrb	r3, [r7, #1]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035f0:	887a      	ldrh	r2, [r7, #2]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80035f6:	e003      	b.n	8003600 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80035f8:	887b      	ldrh	r3, [r7, #2]
 80035fa:	041a      	lsls	r2, r3, #16
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	611a      	str	r2, [r3, #16]
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr

0800360a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
 8003612:	460b      	mov	r3, r1
 8003614:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	887b      	ldrh	r3, [r7, #2]
 800361c:	4013      	ands	r3, r2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003622:	887a      	ldrh	r2, [r7, #2]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003628:	e002      	b.n	8003630 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800362a:	887a      	ldrh	r2, [r7, #2]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	611a      	str	r2, [r3, #16]
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	bc80      	pop	{r7}
 8003638:	4770      	bx	lr
	...

0800363c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e26c      	b.n	8003b28 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 8087 	beq.w	800376a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800365c:	4b92      	ldr	r3, [pc, #584]	; (80038a8 <HAL_RCC_OscConfig+0x26c>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f003 030c 	and.w	r3, r3, #12
 8003664:	2b04      	cmp	r3, #4
 8003666:	d00c      	beq.n	8003682 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003668:	4b8f      	ldr	r3, [pc, #572]	; (80038a8 <HAL_RCC_OscConfig+0x26c>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f003 030c 	and.w	r3, r3, #12
 8003670:	2b08      	cmp	r3, #8
 8003672:	d112      	bne.n	800369a <HAL_RCC_OscConfig+0x5e>
 8003674:	4b8c      	ldr	r3, [pc, #560]	; (80038a8 <HAL_RCC_OscConfig+0x26c>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800367c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003680:	d10b      	bne.n	800369a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003682:	4b89      	ldr	r3, [pc, #548]	; (80038a8 <HAL_RCC_OscConfig+0x26c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d06c      	beq.n	8003768 <HAL_RCC_OscConfig+0x12c>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d168      	bne.n	8003768 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e246      	b.n	8003b28 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036a2:	d106      	bne.n	80036b2 <HAL_RCC_OscConfig+0x76>
 80036a4:	4b80      	ldr	r3, [pc, #512]	; (80038a8 <HAL_RCC_OscConfig+0x26c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a7f      	ldr	r2, [pc, #508]	; (80038a8 <HAL_RCC_OscConfig+0x26c>)
 80036aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ae:	6013      	str	r3, [r2, #0]
 80036b0:	e02e      	b.n	8003710 <HAL_RCC_OscConfig+0xd4>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10c      	bne.n	80036d4 <HAL_RCC_OscConfig+0x98>
 80036ba:	4b7b      	ldr	r3, [pc, #492]	; (80038a8 <HAL_RCC_OscConfig+0x26c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a7a      	ldr	r2, [pc, #488]	; (80038a8 <HAL_RCC_OscConfig+0x26c>)
 80036c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c4:	6013      	str	r3, [r2, #0]
 80036c6:	4b78      	ldr	r3, [pc, #480]	; (80038a8 <HAL_RCC_OscConfig+0x26c>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a77      	ldr	r2, [pc, #476]	; (80038a8 <HAL_RCC_OscConfig+0x26c>)
 80036cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036d0:	6013      	str	r3, [r2, #0]
 80036d2:	e01d      	b.n	8003710 <HAL_RCC_OscConfig+0xd4>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036dc:	d10c      	bne.n	80036f8 <HAL_RCC_OscConfig+0xbc>
 80036de:	4b72      	ldr	r3, [pc, #456]	; (80038a8 <HAL_RCC_OscConfig+0x26c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a71      	ldr	r2, [pc, #452]	; (80038a8 <HAL_RCC_OscConfig+0x26c>)
 80036e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	4b6f      	ldr	r3, [pc, #444]	; (80038a8 <HAL_RCC_OscConfig+0x26c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a6e      	ldr	r2, [pc, #440]	; (80038a8 <HAL_RCC_OscConfig+0x26c>)
 80036f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	e00b      	b.n	8003710 <HAL_RCC_OscConfig+0xd4>
 80036f8:	4b6b      	ldr	r3, [pc, #428]	; (80038a8 <HAL_RCC_OscConfig+0x26c>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a6a      	ldr	r2, [pc, #424]	; (80038a8 <HAL_RCC_OscConfig+0x26c>)
 80036fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003702:	6013      	str	r3, [r2, #0]
 8003704:	4b68      	ldr	r3, [pc, #416]	; (80038a8 <HAL_RCC_OscConfig+0x26c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a67      	ldr	r2, [pc, #412]	; (80038a8 <HAL_RCC_OscConfig+0x26c>)
 800370a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800370e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d013      	beq.n	8003740 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003718:	f7fe f8b2 	bl	8001880 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003720:	f7fe f8ae 	bl	8001880 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b64      	cmp	r3, #100	; 0x64
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e1fa      	b.n	8003b28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003732:	4b5d      	ldr	r3, [pc, #372]	; (80038a8 <HAL_RCC_OscConfig+0x26c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0f0      	beq.n	8003720 <HAL_RCC_OscConfig+0xe4>
 800373e:	e014      	b.n	800376a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003740:	f7fe f89e 	bl	8001880 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003748:	f7fe f89a 	bl	8001880 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b64      	cmp	r3, #100	; 0x64
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e1e6      	b.n	8003b28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800375a:	4b53      	ldr	r3, [pc, #332]	; (80038a8 <HAL_RCC_OscConfig+0x26c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f0      	bne.n	8003748 <HAL_RCC_OscConfig+0x10c>
 8003766:	e000      	b.n	800376a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d063      	beq.n	800383e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003776:	4b4c      	ldr	r3, [pc, #304]	; (80038a8 <HAL_RCC_OscConfig+0x26c>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f003 030c 	and.w	r3, r3, #12
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00b      	beq.n	800379a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003782:	4b49      	ldr	r3, [pc, #292]	; (80038a8 <HAL_RCC_OscConfig+0x26c>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f003 030c 	and.w	r3, r3, #12
 800378a:	2b08      	cmp	r3, #8
 800378c:	d11c      	bne.n	80037c8 <HAL_RCC_OscConfig+0x18c>
 800378e:	4b46      	ldr	r3, [pc, #280]	; (80038a8 <HAL_RCC_OscConfig+0x26c>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d116      	bne.n	80037c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800379a:	4b43      	ldr	r3, [pc, #268]	; (80038a8 <HAL_RCC_OscConfig+0x26c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d005      	beq.n	80037b2 <HAL_RCC_OscConfig+0x176>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d001      	beq.n	80037b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e1ba      	b.n	8003b28 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b2:	4b3d      	ldr	r3, [pc, #244]	; (80038a8 <HAL_RCC_OscConfig+0x26c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	4939      	ldr	r1, [pc, #228]	; (80038a8 <HAL_RCC_OscConfig+0x26c>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037c6:	e03a      	b.n	800383e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d020      	beq.n	8003812 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037d0:	4b36      	ldr	r3, [pc, #216]	; (80038ac <HAL_RCC_OscConfig+0x270>)
 80037d2:	2201      	movs	r2, #1
 80037d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d6:	f7fe f853 	bl	8001880 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037dc:	e008      	b.n	80037f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037de:	f7fe f84f 	bl	8001880 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e19b      	b.n	8003b28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f0:	4b2d      	ldr	r3, [pc, #180]	; (80038a8 <HAL_RCC_OscConfig+0x26c>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0f0      	beq.n	80037de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037fc:	4b2a      	ldr	r3, [pc, #168]	; (80038a8 <HAL_RCC_OscConfig+0x26c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	4927      	ldr	r1, [pc, #156]	; (80038a8 <HAL_RCC_OscConfig+0x26c>)
 800380c:	4313      	orrs	r3, r2
 800380e:	600b      	str	r3, [r1, #0]
 8003810:	e015      	b.n	800383e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003812:	4b26      	ldr	r3, [pc, #152]	; (80038ac <HAL_RCC_OscConfig+0x270>)
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003818:	f7fe f832 	bl	8001880 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003820:	f7fe f82e 	bl	8001880 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e17a      	b.n	8003b28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003832:	4b1d      	ldr	r3, [pc, #116]	; (80038a8 <HAL_RCC_OscConfig+0x26c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1f0      	bne.n	8003820 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0308 	and.w	r3, r3, #8
 8003846:	2b00      	cmp	r3, #0
 8003848:	d03a      	beq.n	80038c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d019      	beq.n	8003886 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003852:	4b17      	ldr	r3, [pc, #92]	; (80038b0 <HAL_RCC_OscConfig+0x274>)
 8003854:	2201      	movs	r2, #1
 8003856:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003858:	f7fe f812 	bl	8001880 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003860:	f7fe f80e 	bl	8001880 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e15a      	b.n	8003b28 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003872:	4b0d      	ldr	r3, [pc, #52]	; (80038a8 <HAL_RCC_OscConfig+0x26c>)
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d0f0      	beq.n	8003860 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800387e:	2001      	movs	r0, #1
 8003880:	f000 faa8 	bl	8003dd4 <RCC_Delay>
 8003884:	e01c      	b.n	80038c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003886:	4b0a      	ldr	r3, [pc, #40]	; (80038b0 <HAL_RCC_OscConfig+0x274>)
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800388c:	f7fd fff8 	bl	8001880 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003892:	e00f      	b.n	80038b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003894:	f7fd fff4 	bl	8001880 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d908      	bls.n	80038b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e140      	b.n	8003b28 <HAL_RCC_OscConfig+0x4ec>
 80038a6:	bf00      	nop
 80038a8:	40021000 	.word	0x40021000
 80038ac:	42420000 	.word	0x42420000
 80038b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038b4:	4b9e      	ldr	r3, [pc, #632]	; (8003b30 <HAL_RCC_OscConfig+0x4f4>)
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1e9      	bne.n	8003894 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 80a6 	beq.w	8003a1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ce:	2300      	movs	r3, #0
 80038d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038d2:	4b97      	ldr	r3, [pc, #604]	; (8003b30 <HAL_RCC_OscConfig+0x4f4>)
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10d      	bne.n	80038fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038de:	4b94      	ldr	r3, [pc, #592]	; (8003b30 <HAL_RCC_OscConfig+0x4f4>)
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	4a93      	ldr	r2, [pc, #588]	; (8003b30 <HAL_RCC_OscConfig+0x4f4>)
 80038e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e8:	61d3      	str	r3, [r2, #28]
 80038ea:	4b91      	ldr	r3, [pc, #580]	; (8003b30 <HAL_RCC_OscConfig+0x4f4>)
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f2:	60bb      	str	r3, [r7, #8]
 80038f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038f6:	2301      	movs	r3, #1
 80038f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038fa:	4b8e      	ldr	r3, [pc, #568]	; (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003902:	2b00      	cmp	r3, #0
 8003904:	d118      	bne.n	8003938 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003906:	4b8b      	ldr	r3, [pc, #556]	; (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a8a      	ldr	r2, [pc, #552]	; (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 800390c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003910:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003912:	f7fd ffb5 	bl	8001880 <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003918:	e008      	b.n	800392c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800391a:	f7fd ffb1 	bl	8001880 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b64      	cmp	r3, #100	; 0x64
 8003926:	d901      	bls.n	800392c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e0fd      	b.n	8003b28 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800392c:	4b81      	ldr	r3, [pc, #516]	; (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0f0      	beq.n	800391a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d106      	bne.n	800394e <HAL_RCC_OscConfig+0x312>
 8003940:	4b7b      	ldr	r3, [pc, #492]	; (8003b30 <HAL_RCC_OscConfig+0x4f4>)
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	4a7a      	ldr	r2, [pc, #488]	; (8003b30 <HAL_RCC_OscConfig+0x4f4>)
 8003946:	f043 0301 	orr.w	r3, r3, #1
 800394a:	6213      	str	r3, [r2, #32]
 800394c:	e02d      	b.n	80039aa <HAL_RCC_OscConfig+0x36e>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10c      	bne.n	8003970 <HAL_RCC_OscConfig+0x334>
 8003956:	4b76      	ldr	r3, [pc, #472]	; (8003b30 <HAL_RCC_OscConfig+0x4f4>)
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	4a75      	ldr	r2, [pc, #468]	; (8003b30 <HAL_RCC_OscConfig+0x4f4>)
 800395c:	f023 0301 	bic.w	r3, r3, #1
 8003960:	6213      	str	r3, [r2, #32]
 8003962:	4b73      	ldr	r3, [pc, #460]	; (8003b30 <HAL_RCC_OscConfig+0x4f4>)
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	4a72      	ldr	r2, [pc, #456]	; (8003b30 <HAL_RCC_OscConfig+0x4f4>)
 8003968:	f023 0304 	bic.w	r3, r3, #4
 800396c:	6213      	str	r3, [r2, #32]
 800396e:	e01c      	b.n	80039aa <HAL_RCC_OscConfig+0x36e>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	2b05      	cmp	r3, #5
 8003976:	d10c      	bne.n	8003992 <HAL_RCC_OscConfig+0x356>
 8003978:	4b6d      	ldr	r3, [pc, #436]	; (8003b30 <HAL_RCC_OscConfig+0x4f4>)
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	4a6c      	ldr	r2, [pc, #432]	; (8003b30 <HAL_RCC_OscConfig+0x4f4>)
 800397e:	f043 0304 	orr.w	r3, r3, #4
 8003982:	6213      	str	r3, [r2, #32]
 8003984:	4b6a      	ldr	r3, [pc, #424]	; (8003b30 <HAL_RCC_OscConfig+0x4f4>)
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	4a69      	ldr	r2, [pc, #420]	; (8003b30 <HAL_RCC_OscConfig+0x4f4>)
 800398a:	f043 0301 	orr.w	r3, r3, #1
 800398e:	6213      	str	r3, [r2, #32]
 8003990:	e00b      	b.n	80039aa <HAL_RCC_OscConfig+0x36e>
 8003992:	4b67      	ldr	r3, [pc, #412]	; (8003b30 <HAL_RCC_OscConfig+0x4f4>)
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	4a66      	ldr	r2, [pc, #408]	; (8003b30 <HAL_RCC_OscConfig+0x4f4>)
 8003998:	f023 0301 	bic.w	r3, r3, #1
 800399c:	6213      	str	r3, [r2, #32]
 800399e:	4b64      	ldr	r3, [pc, #400]	; (8003b30 <HAL_RCC_OscConfig+0x4f4>)
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	4a63      	ldr	r2, [pc, #396]	; (8003b30 <HAL_RCC_OscConfig+0x4f4>)
 80039a4:	f023 0304 	bic.w	r3, r3, #4
 80039a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d015      	beq.n	80039de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039b2:	f7fd ff65 	bl	8001880 <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b8:	e00a      	b.n	80039d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ba:	f7fd ff61 	bl	8001880 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e0ab      	b.n	8003b28 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d0:	4b57      	ldr	r3, [pc, #348]	; (8003b30 <HAL_RCC_OscConfig+0x4f4>)
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0ee      	beq.n	80039ba <HAL_RCC_OscConfig+0x37e>
 80039dc:	e014      	b.n	8003a08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039de:	f7fd ff4f 	bl	8001880 <HAL_GetTick>
 80039e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039e4:	e00a      	b.n	80039fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039e6:	f7fd ff4b 	bl	8001880 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e095      	b.n	8003b28 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039fc:	4b4c      	ldr	r3, [pc, #304]	; (8003b30 <HAL_RCC_OscConfig+0x4f4>)
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1ee      	bne.n	80039e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a08:	7dfb      	ldrb	r3, [r7, #23]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d105      	bne.n	8003a1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a0e:	4b48      	ldr	r3, [pc, #288]	; (8003b30 <HAL_RCC_OscConfig+0x4f4>)
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	4a47      	ldr	r2, [pc, #284]	; (8003b30 <HAL_RCC_OscConfig+0x4f4>)
 8003a14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 8081 	beq.w	8003b26 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a24:	4b42      	ldr	r3, [pc, #264]	; (8003b30 <HAL_RCC_OscConfig+0x4f4>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f003 030c 	and.w	r3, r3, #12
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d061      	beq.n	8003af4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d146      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a38:	4b3f      	ldr	r3, [pc, #252]	; (8003b38 <HAL_RCC_OscConfig+0x4fc>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3e:	f7fd ff1f 	bl	8001880 <HAL_GetTick>
 8003a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a44:	e008      	b.n	8003a58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a46:	f7fd ff1b 	bl	8001880 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e067      	b.n	8003b28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a58:	4b35      	ldr	r3, [pc, #212]	; (8003b30 <HAL_RCC_OscConfig+0x4f4>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1f0      	bne.n	8003a46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a6c:	d108      	bne.n	8003a80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a6e:	4b30      	ldr	r3, [pc, #192]	; (8003b30 <HAL_RCC_OscConfig+0x4f4>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	492d      	ldr	r1, [pc, #180]	; (8003b30 <HAL_RCC_OscConfig+0x4f4>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a80:	4b2b      	ldr	r3, [pc, #172]	; (8003b30 <HAL_RCC_OscConfig+0x4f4>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a19      	ldr	r1, [r3, #32]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	430b      	orrs	r3, r1
 8003a92:	4927      	ldr	r1, [pc, #156]	; (8003b30 <HAL_RCC_OscConfig+0x4f4>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a98:	4b27      	ldr	r3, [pc, #156]	; (8003b38 <HAL_RCC_OscConfig+0x4fc>)
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9e:	f7fd feef 	bl	8001880 <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aa6:	f7fd feeb 	bl	8001880 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e037      	b.n	8003b28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ab8:	4b1d      	ldr	r3, [pc, #116]	; (8003b30 <HAL_RCC_OscConfig+0x4f4>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0f0      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x46a>
 8003ac4:	e02f      	b.n	8003b26 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ac6:	4b1c      	ldr	r3, [pc, #112]	; (8003b38 <HAL_RCC_OscConfig+0x4fc>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003acc:	f7fd fed8 	bl	8001880 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad4:	f7fd fed4 	bl	8001880 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e020      	b.n	8003b28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ae6:	4b12      	ldr	r3, [pc, #72]	; (8003b30 <HAL_RCC_OscConfig+0x4f4>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1f0      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x498>
 8003af2:	e018      	b.n	8003b26 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d101      	bne.n	8003b00 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e013      	b.n	8003b28 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b00:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <HAL_RCC_OscConfig+0x4f4>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d106      	bne.n	8003b22 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d001      	beq.n	8003b26 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e000      	b.n	8003b28 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3718      	adds	r7, #24
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40021000 	.word	0x40021000
 8003b34:	40007000 	.word	0x40007000
 8003b38:	42420060 	.word	0x42420060

08003b3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e0d0      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b50:	4b6a      	ldr	r3, [pc, #424]	; (8003cfc <HAL_RCC_ClockConfig+0x1c0>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d910      	bls.n	8003b80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b5e:	4b67      	ldr	r3, [pc, #412]	; (8003cfc <HAL_RCC_ClockConfig+0x1c0>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f023 0207 	bic.w	r2, r3, #7
 8003b66:	4965      	ldr	r1, [pc, #404]	; (8003cfc <HAL_RCC_ClockConfig+0x1c0>)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6e:	4b63      	ldr	r3, [pc, #396]	; (8003cfc <HAL_RCC_ClockConfig+0x1c0>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0307 	and.w	r3, r3, #7
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d001      	beq.n	8003b80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e0b8      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d020      	beq.n	8003bce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d005      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b98:	4b59      	ldr	r3, [pc, #356]	; (8003d00 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	4a58      	ldr	r2, [pc, #352]	; (8003d00 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ba2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0308 	and.w	r3, r3, #8
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d005      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bb0:	4b53      	ldr	r3, [pc, #332]	; (8003d00 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	4a52      	ldr	r2, [pc, #328]	; (8003d00 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003bba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bbc:	4b50      	ldr	r3, [pc, #320]	; (8003d00 <HAL_RCC_ClockConfig+0x1c4>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	494d      	ldr	r1, [pc, #308]	; (8003d00 <HAL_RCC_ClockConfig+0x1c4>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d040      	beq.n	8003c5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d107      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be2:	4b47      	ldr	r3, [pc, #284]	; (8003d00 <HAL_RCC_ClockConfig+0x1c4>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d115      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e07f      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d107      	bne.n	8003c0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bfa:	4b41      	ldr	r3, [pc, #260]	; (8003d00 <HAL_RCC_ClockConfig+0x1c4>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d109      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e073      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c0a:	4b3d      	ldr	r3, [pc, #244]	; (8003d00 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e06b      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c1a:	4b39      	ldr	r3, [pc, #228]	; (8003d00 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f023 0203 	bic.w	r2, r3, #3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	4936      	ldr	r1, [pc, #216]	; (8003d00 <HAL_RCC_ClockConfig+0x1c4>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c2c:	f7fd fe28 	bl	8001880 <HAL_GetTick>
 8003c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c32:	e00a      	b.n	8003c4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c34:	f7fd fe24 	bl	8001880 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e053      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c4a:	4b2d      	ldr	r3, [pc, #180]	; (8003d00 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f003 020c 	and.w	r2, r3, #12
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d1eb      	bne.n	8003c34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c5c:	4b27      	ldr	r3, [pc, #156]	; (8003cfc <HAL_RCC_ClockConfig+0x1c0>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d210      	bcs.n	8003c8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c6a:	4b24      	ldr	r3, [pc, #144]	; (8003cfc <HAL_RCC_ClockConfig+0x1c0>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f023 0207 	bic.w	r2, r3, #7
 8003c72:	4922      	ldr	r1, [pc, #136]	; (8003cfc <HAL_RCC_ClockConfig+0x1c0>)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c7a:	4b20      	ldr	r3, [pc, #128]	; (8003cfc <HAL_RCC_ClockConfig+0x1c0>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0307 	and.w	r3, r3, #7
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d001      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e032      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d008      	beq.n	8003caa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c98:	4b19      	ldr	r3, [pc, #100]	; (8003d00 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	4916      	ldr	r1, [pc, #88]	; (8003d00 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d009      	beq.n	8003cca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cb6:	4b12      	ldr	r3, [pc, #72]	; (8003d00 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	490e      	ldr	r1, [pc, #56]	; (8003d00 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cca:	f000 f821 	bl	8003d10 <HAL_RCC_GetSysClockFreq>
 8003cce:	4601      	mov	r1, r0
 8003cd0:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	091b      	lsrs	r3, r3, #4
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	4a0a      	ldr	r2, [pc, #40]	; (8003d04 <HAL_RCC_ClockConfig+0x1c8>)
 8003cdc:	5cd3      	ldrb	r3, [r2, r3]
 8003cde:	fa21 f303 	lsr.w	r3, r1, r3
 8003ce2:	4a09      	ldr	r2, [pc, #36]	; (8003d08 <HAL_RCC_ClockConfig+0x1cc>)
 8003ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ce6:	4b09      	ldr	r3, [pc, #36]	; (8003d0c <HAL_RCC_ClockConfig+0x1d0>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fd fd86 	bl	80017fc <HAL_InitTick>

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	40022000 	.word	0x40022000
 8003d00:	40021000 	.word	0x40021000
 8003d04:	08004754 	.word	0x08004754
 8003d08:	20000028 	.word	0x20000028
 8003d0c:	2000002c 	.word	0x2000002c

08003d10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d10:	b490      	push	{r4, r7}
 8003d12:	b08a      	sub	sp, #40	; 0x28
 8003d14:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003d16:	4b2a      	ldr	r3, [pc, #168]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003d18:	1d3c      	adds	r4, r7, #4
 8003d1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003d20:	4b28      	ldr	r3, [pc, #160]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d22:	881b      	ldrh	r3, [r3, #0]
 8003d24:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	2300      	movs	r3, #0
 8003d30:	627b      	str	r3, [r7, #36]	; 0x24
 8003d32:	2300      	movs	r3, #0
 8003d34:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d3a:	4b23      	ldr	r3, [pc, #140]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f003 030c 	and.w	r3, r3, #12
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	d002      	beq.n	8003d50 <HAL_RCC_GetSysClockFreq+0x40>
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d003      	beq.n	8003d56 <HAL_RCC_GetSysClockFreq+0x46>
 8003d4e:	e02d      	b.n	8003dac <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d50:	4b1e      	ldr	r3, [pc, #120]	; (8003dcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d52:	623b      	str	r3, [r7, #32]
      break;
 8003d54:	e02d      	b.n	8003db2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	0c9b      	lsrs	r3, r3, #18
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d62:	4413      	add	r3, r2
 8003d64:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d68:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d013      	beq.n	8003d9c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d74:	4b14      	ldr	r3, [pc, #80]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	0c5b      	lsrs	r3, r3, #17
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d82:	4413      	add	r3, r2
 8003d84:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d88:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	4a0f      	ldr	r2, [pc, #60]	; (8003dcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d8e:	fb02 f203 	mul.w	r2, r2, r3
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
 8003d9a:	e004      	b.n	8003da6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	4a0c      	ldr	r2, [pc, #48]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003da0:	fb02 f303 	mul.w	r3, r2, r3
 8003da4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	623b      	str	r3, [r7, #32]
      break;
 8003daa:	e002      	b.n	8003db2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003dac:	4b07      	ldr	r3, [pc, #28]	; (8003dcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003dae:	623b      	str	r3, [r7, #32]
      break;
 8003db0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003db2:	6a3b      	ldr	r3, [r7, #32]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3728      	adds	r7, #40	; 0x28
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bc90      	pop	{r4, r7}
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	08004740 	.word	0x08004740
 8003dc4:	08004750 	.word	0x08004750
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	007a1200 	.word	0x007a1200
 8003dd0:	003d0900 	.word	0x003d0900

08003dd4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ddc:	4b0a      	ldr	r3, [pc, #40]	; (8003e08 <RCC_Delay+0x34>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a0a      	ldr	r2, [pc, #40]	; (8003e0c <RCC_Delay+0x38>)
 8003de2:	fba2 2303 	umull	r2, r3, r2, r3
 8003de6:	0a5b      	lsrs	r3, r3, #9
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	fb02 f303 	mul.w	r3, r2, r3
 8003dee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003df0:	bf00      	nop
  }
  while (Delay --);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	1e5a      	subs	r2, r3, #1
 8003df6:	60fa      	str	r2, [r7, #12]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1f9      	bne.n	8003df0 <RCC_Delay+0x1c>
}
 8003dfc:	bf00      	nop
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bc80      	pop	{r7}
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	20000028 	.word	0x20000028
 8003e0c:	10624dd3 	.word	0x10624dd3

08003e10 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	613b      	str	r3, [r7, #16]
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d07d      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e30:	4b4f      	ldr	r3, [pc, #316]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10d      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e3c:	4b4c      	ldr	r3, [pc, #304]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e3e:	69db      	ldr	r3, [r3, #28]
 8003e40:	4a4b      	ldr	r2, [pc, #300]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e46:	61d3      	str	r3, [r2, #28]
 8003e48:	4b49      	ldr	r3, [pc, #292]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e4a:	69db      	ldr	r3, [r3, #28]
 8003e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e50:	60bb      	str	r3, [r7, #8]
 8003e52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e54:	2301      	movs	r3, #1
 8003e56:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e58:	4b46      	ldr	r3, [pc, #280]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d118      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e64:	4b43      	ldr	r3, [pc, #268]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a42      	ldr	r2, [pc, #264]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e70:	f7fd fd06 	bl	8001880 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e76:	e008      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e78:	f7fd fd02 	bl	8001880 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b64      	cmp	r3, #100	; 0x64
 8003e84:	d901      	bls.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e06d      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8a:	4b3a      	ldr	r3, [pc, #232]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0f0      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e96:	4b36      	ldr	r3, [pc, #216]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e9e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d02e      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d027      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003eb4:	4b2e      	ldr	r3, [pc, #184]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ebc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ebe:	4b2e      	ldr	r3, [pc, #184]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ec4:	4b2c      	ldr	r3, [pc, #176]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003eca:	4a29      	ldr	r2, [pc, #164]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d014      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eda:	f7fd fcd1 	bl	8001880 <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee0:	e00a      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee2:	f7fd fccd 	bl	8001880 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e036      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef8:	4b1d      	ldr	r3, [pc, #116]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0ee      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f04:	4b1a      	ldr	r3, [pc, #104]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	4917      	ldr	r1, [pc, #92]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f16:	7dfb      	ldrb	r3, [r7, #23]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d105      	bne.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f1c:	4b14      	ldr	r3, [pc, #80]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	4a13      	ldr	r2, [pc, #76]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f26:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d008      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f34:	4b0e      	ldr	r3, [pc, #56]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	490b      	ldr	r1, [pc, #44]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0310 	and.w	r3, r3, #16
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d008      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f52:	4b07      	ldr	r3, [pc, #28]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	4904      	ldr	r1, [pc, #16]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3718      	adds	r7, #24
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	40021000 	.word	0x40021000
 8003f74:	40007000 	.word	0x40007000
 8003f78:	42420440 	.word	0x42420440

08003f7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e01d      	b.n	8003fca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7fd fb4e 	bl	8001644 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4610      	mov	r0, r2
 8003fbc:	f000 fa3a 	bl	8004434 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b085      	sub	sp, #20
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f042 0201 	orr.w	r2, r2, #1
 8003fe8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2b06      	cmp	r3, #6
 8003ffa:	d007      	beq.n	800400c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3714      	adds	r7, #20
 8004012:	46bd      	mov	sp, r7
 8004014:	bc80      	pop	{r7}
 8004016:	4770      	bx	lr

08004018 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68da      	ldr	r2, [r3, #12]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 0201 	bic.w	r2, r2, #1
 800402e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6a1a      	ldr	r2, [r3, #32]
 8004036:	f241 1311 	movw	r3, #4369	; 0x1111
 800403a:	4013      	ands	r3, r2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10f      	bne.n	8004060 <HAL_TIM_Base_Stop_IT+0x48>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6a1a      	ldr	r2, [r3, #32]
 8004046:	f240 4344 	movw	r3, #1092	; 0x444
 800404a:	4013      	ands	r3, r2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d107      	bne.n	8004060 <HAL_TIM_Base_Stop_IT+0x48>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 0201 	bic.w	r2, r2, #1
 800405e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	bc80      	pop	{r7}
 800406a:	4770      	bx	lr

0800406c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b02      	cmp	r3, #2
 8004080:	d122      	bne.n	80040c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b02      	cmp	r3, #2
 800408e:	d11b      	bne.n	80040c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f06f 0202 	mvn.w	r2, #2
 8004098:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f9a4 	bl	80043fc <HAL_TIM_IC_CaptureCallback>
 80040b4:	e005      	b.n	80040c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f997 	bl	80043ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f9a6 	bl	800440e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	f003 0304 	and.w	r3, r3, #4
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	d122      	bne.n	800411c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b04      	cmp	r3, #4
 80040e2:	d11b      	bne.n	800411c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f06f 0204 	mvn.w	r2, #4
 80040ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2202      	movs	r2, #2
 80040f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f97a 	bl	80043fc <HAL_TIM_IC_CaptureCallback>
 8004108:	e005      	b.n	8004116 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f96d 	bl	80043ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f97c 	bl	800440e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b08      	cmp	r3, #8
 8004128:	d122      	bne.n	8004170 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f003 0308 	and.w	r3, r3, #8
 8004134:	2b08      	cmp	r3, #8
 8004136:	d11b      	bne.n	8004170 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f06f 0208 	mvn.w	r2, #8
 8004140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2204      	movs	r2, #4
 8004146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f950 	bl	80043fc <HAL_TIM_IC_CaptureCallback>
 800415c:	e005      	b.n	800416a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f943 	bl	80043ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 f952 	bl	800440e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	f003 0310 	and.w	r3, r3, #16
 800417a:	2b10      	cmp	r3, #16
 800417c:	d122      	bne.n	80041c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	f003 0310 	and.w	r3, r3, #16
 8004188:	2b10      	cmp	r3, #16
 800418a:	d11b      	bne.n	80041c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f06f 0210 	mvn.w	r2, #16
 8004194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2208      	movs	r2, #8
 800419a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f926 	bl	80043fc <HAL_TIM_IC_CaptureCallback>
 80041b0:	e005      	b.n	80041be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f919 	bl	80043ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f928 	bl	800440e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d10e      	bne.n	80041f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d107      	bne.n	80041f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f06f 0201 	mvn.w	r2, #1
 80041e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fc fce2 	bl	8000bb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041fa:	2b80      	cmp	r3, #128	; 0x80
 80041fc:	d10e      	bne.n	800421c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004208:	2b80      	cmp	r3, #128	; 0x80
 800420a:	d107      	bne.n	800421c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 fa51 	bl	80046be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004226:	2b40      	cmp	r3, #64	; 0x40
 8004228:	d10e      	bne.n	8004248 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004234:	2b40      	cmp	r3, #64	; 0x40
 8004236:	d107      	bne.n	8004248 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f8ec 	bl	8004420 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	f003 0320 	and.w	r3, r3, #32
 8004252:	2b20      	cmp	r3, #32
 8004254:	d10e      	bne.n	8004274 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	f003 0320 	and.w	r3, r3, #32
 8004260:	2b20      	cmp	r3, #32
 8004262:	d107      	bne.n	8004274 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f06f 0220 	mvn.w	r2, #32
 800426c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 fa1c 	bl	80046ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004274:	bf00      	nop
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800428c:	2b01      	cmp	r3, #1
 800428e:	d101      	bne.n	8004294 <HAL_TIM_ConfigClockSource+0x18>
 8004290:	2302      	movs	r3, #2
 8004292:	e0a6      	b.n	80043e2 <HAL_TIM_ConfigClockSource+0x166>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2202      	movs	r2, #2
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b40      	cmp	r3, #64	; 0x40
 80042ca:	d067      	beq.n	800439c <HAL_TIM_ConfigClockSource+0x120>
 80042cc:	2b40      	cmp	r3, #64	; 0x40
 80042ce:	d80b      	bhi.n	80042e8 <HAL_TIM_ConfigClockSource+0x6c>
 80042d0:	2b10      	cmp	r3, #16
 80042d2:	d073      	beq.n	80043bc <HAL_TIM_ConfigClockSource+0x140>
 80042d4:	2b10      	cmp	r3, #16
 80042d6:	d802      	bhi.n	80042de <HAL_TIM_ConfigClockSource+0x62>
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d06f      	beq.n	80043bc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80042dc:	e078      	b.n	80043d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80042de:	2b20      	cmp	r3, #32
 80042e0:	d06c      	beq.n	80043bc <HAL_TIM_ConfigClockSource+0x140>
 80042e2:	2b30      	cmp	r3, #48	; 0x30
 80042e4:	d06a      	beq.n	80043bc <HAL_TIM_ConfigClockSource+0x140>
      break;
 80042e6:	e073      	b.n	80043d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80042e8:	2b70      	cmp	r3, #112	; 0x70
 80042ea:	d00d      	beq.n	8004308 <HAL_TIM_ConfigClockSource+0x8c>
 80042ec:	2b70      	cmp	r3, #112	; 0x70
 80042ee:	d804      	bhi.n	80042fa <HAL_TIM_ConfigClockSource+0x7e>
 80042f0:	2b50      	cmp	r3, #80	; 0x50
 80042f2:	d033      	beq.n	800435c <HAL_TIM_ConfigClockSource+0xe0>
 80042f4:	2b60      	cmp	r3, #96	; 0x60
 80042f6:	d041      	beq.n	800437c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80042f8:	e06a      	b.n	80043d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80042fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042fe:	d066      	beq.n	80043ce <HAL_TIM_ConfigClockSource+0x152>
 8004300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004304:	d017      	beq.n	8004336 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004306:	e063      	b.n	80043d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6818      	ldr	r0, [r3, #0]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	6899      	ldr	r1, [r3, #8]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f000 f965 	bl	80045e6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800432a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	609a      	str	r2, [r3, #8]
      break;
 8004334:	e04c      	b.n	80043d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6818      	ldr	r0, [r3, #0]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	6899      	ldr	r1, [r3, #8]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f000 f94e 	bl	80045e6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004358:	609a      	str	r2, [r3, #8]
      break;
 800435a:	e039      	b.n	80043d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6818      	ldr	r0, [r3, #0]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	6859      	ldr	r1, [r3, #4]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	461a      	mov	r2, r3
 800436a:	f000 f8c5 	bl	80044f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2150      	movs	r1, #80	; 0x50
 8004374:	4618      	mov	r0, r3
 8004376:	f000 f91c 	bl	80045b2 <TIM_ITRx_SetConfig>
      break;
 800437a:	e029      	b.n	80043d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6818      	ldr	r0, [r3, #0]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	6859      	ldr	r1, [r3, #4]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	461a      	mov	r2, r3
 800438a:	f000 f8e3 	bl	8004554 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2160      	movs	r1, #96	; 0x60
 8004394:	4618      	mov	r0, r3
 8004396:	f000 f90c 	bl	80045b2 <TIM_ITRx_SetConfig>
      break;
 800439a:	e019      	b.n	80043d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6818      	ldr	r0, [r3, #0]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	6859      	ldr	r1, [r3, #4]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	461a      	mov	r2, r3
 80043aa:	f000 f8a5 	bl	80044f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2140      	movs	r1, #64	; 0x40
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 f8fc 	bl	80045b2 <TIM_ITRx_SetConfig>
      break;
 80043ba:	e009      	b.n	80043d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4619      	mov	r1, r3
 80043c6:	4610      	mov	r0, r2
 80043c8:	f000 f8f3 	bl	80045b2 <TIM_ITRx_SetConfig>
      break;
 80043cc:	e000      	b.n	80043d0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80043ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b083      	sub	sp, #12
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bc80      	pop	{r7}
 80043fa:	4770      	bx	lr

080043fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	bc80      	pop	{r7}
 800440c:	4770      	bx	lr

0800440e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004416:	bf00      	nop
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	bc80      	pop	{r7}
 800441e:	4770      	bx	lr

08004420 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	bc80      	pop	{r7}
 8004430:	4770      	bx	lr
	...

08004434 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a29      	ldr	r2, [pc, #164]	; (80044ec <TIM_Base_SetConfig+0xb8>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d00b      	beq.n	8004464 <TIM_Base_SetConfig+0x30>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004452:	d007      	beq.n	8004464 <TIM_Base_SetConfig+0x30>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a26      	ldr	r2, [pc, #152]	; (80044f0 <TIM_Base_SetConfig+0xbc>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d003      	beq.n	8004464 <TIM_Base_SetConfig+0x30>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a25      	ldr	r2, [pc, #148]	; (80044f4 <TIM_Base_SetConfig+0xc0>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d108      	bne.n	8004476 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800446a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	4313      	orrs	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a1c      	ldr	r2, [pc, #112]	; (80044ec <TIM_Base_SetConfig+0xb8>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d00b      	beq.n	8004496 <TIM_Base_SetConfig+0x62>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004484:	d007      	beq.n	8004496 <TIM_Base_SetConfig+0x62>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a19      	ldr	r2, [pc, #100]	; (80044f0 <TIM_Base_SetConfig+0xbc>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d003      	beq.n	8004496 <TIM_Base_SetConfig+0x62>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a18      	ldr	r2, [pc, #96]	; (80044f4 <TIM_Base_SetConfig+0xc0>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d108      	bne.n	80044a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800449c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a07      	ldr	r2, [pc, #28]	; (80044ec <TIM_Base_SetConfig+0xb8>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d103      	bne.n	80044dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	615a      	str	r2, [r3, #20]
}
 80044e2:	bf00      	nop
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bc80      	pop	{r7}
 80044ea:	4770      	bx	lr
 80044ec:	40012c00 	.word	0x40012c00
 80044f0:	40000400 	.word	0x40000400
 80044f4:	40000800 	.word	0x40000800

080044f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	f023 0201 	bic.w	r2, r3, #1
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004522:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	011b      	lsls	r3, r3, #4
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	4313      	orrs	r3, r2
 800452c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f023 030a 	bic.w	r3, r3, #10
 8004534:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	4313      	orrs	r3, r2
 800453c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	621a      	str	r2, [r3, #32]
}
 800454a:	bf00      	nop
 800454c:	371c      	adds	r7, #28
 800454e:	46bd      	mov	sp, r7
 8004550:	bc80      	pop	{r7}
 8004552:	4770      	bx	lr

08004554 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	f023 0210 	bic.w	r2, r3, #16
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800457e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	031b      	lsls	r3, r3, #12
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	4313      	orrs	r3, r2
 8004588:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004590:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	4313      	orrs	r3, r2
 800459a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	621a      	str	r2, [r3, #32]
}
 80045a8:	bf00      	nop
 80045aa:	371c      	adds	r7, #28
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bc80      	pop	{r7}
 80045b0:	4770      	bx	lr

080045b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b085      	sub	sp, #20
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
 80045ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f043 0307 	orr.w	r3, r3, #7
 80045d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	609a      	str	r2, [r3, #8]
}
 80045dc:	bf00      	nop
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bc80      	pop	{r7}
 80045e4:	4770      	bx	lr

080045e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b087      	sub	sp, #28
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	60f8      	str	r0, [r7, #12]
 80045ee:	60b9      	str	r1, [r7, #8]
 80045f0:	607a      	str	r2, [r7, #4]
 80045f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004600:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	021a      	lsls	r2, r3, #8
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	431a      	orrs	r2, r3
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	4313      	orrs	r3, r2
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	4313      	orrs	r3, r2
 8004612:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	609a      	str	r2, [r3, #8]
}
 800461a:	bf00      	nop
 800461c:	371c      	adds	r7, #28
 800461e:	46bd      	mov	sp, r7
 8004620:	bc80      	pop	{r7}
 8004622:	4770      	bx	lr

08004624 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004634:	2b01      	cmp	r3, #1
 8004636:	d101      	bne.n	800463c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004638:	2302      	movs	r3, #2
 800463a:	e032      	b.n	80046a2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004662:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004674:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	4313      	orrs	r3, r2
 800467e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bc80      	pop	{r7}
 80046aa:	4770      	bx	lr

080046ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bc80      	pop	{r7}
 80046bc:	4770      	bx	lr

080046be <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046be:	b480      	push	{r7}
 80046c0:	b083      	sub	sp, #12
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046c6:	bf00      	nop
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bc80      	pop	{r7}
 80046ce:	4770      	bx	lr

080046d0 <__libc_init_array>:
 80046d0:	b570      	push	{r4, r5, r6, lr}
 80046d2:	2500      	movs	r5, #0
 80046d4:	4e0c      	ldr	r6, [pc, #48]	; (8004708 <__libc_init_array+0x38>)
 80046d6:	4c0d      	ldr	r4, [pc, #52]	; (800470c <__libc_init_array+0x3c>)
 80046d8:	1ba4      	subs	r4, r4, r6
 80046da:	10a4      	asrs	r4, r4, #2
 80046dc:	42a5      	cmp	r5, r4
 80046de:	d109      	bne.n	80046f4 <__libc_init_array+0x24>
 80046e0:	f000 f822 	bl	8004728 <_init>
 80046e4:	2500      	movs	r5, #0
 80046e6:	4e0a      	ldr	r6, [pc, #40]	; (8004710 <__libc_init_array+0x40>)
 80046e8:	4c0a      	ldr	r4, [pc, #40]	; (8004714 <__libc_init_array+0x44>)
 80046ea:	1ba4      	subs	r4, r4, r6
 80046ec:	10a4      	asrs	r4, r4, #2
 80046ee:	42a5      	cmp	r5, r4
 80046f0:	d105      	bne.n	80046fe <__libc_init_array+0x2e>
 80046f2:	bd70      	pop	{r4, r5, r6, pc}
 80046f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046f8:	4798      	blx	r3
 80046fa:	3501      	adds	r5, #1
 80046fc:	e7ee      	b.n	80046dc <__libc_init_array+0xc>
 80046fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004702:	4798      	blx	r3
 8004704:	3501      	adds	r5, #1
 8004706:	e7f2      	b.n	80046ee <__libc_init_array+0x1e>
 8004708:	08004764 	.word	0x08004764
 800470c:	08004764 	.word	0x08004764
 8004710:	08004764 	.word	0x08004764
 8004714:	08004768 	.word	0x08004768

08004718 <memset>:
 8004718:	4603      	mov	r3, r0
 800471a:	4402      	add	r2, r0
 800471c:	4293      	cmp	r3, r2
 800471e:	d100      	bne.n	8004722 <memset+0xa>
 8004720:	4770      	bx	lr
 8004722:	f803 1b01 	strb.w	r1, [r3], #1
 8004726:	e7f9      	b.n	800471c <memset+0x4>

08004728 <_init>:
 8004728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472a:	bf00      	nop
 800472c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800472e:	bc08      	pop	{r3}
 8004730:	469e      	mov	lr, r3
 8004732:	4770      	bx	lr

08004734 <_fini>:
 8004734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004736:	bf00      	nop
 8004738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800473a:	bc08      	pop	{r3}
 800473c:	469e      	mov	lr, r3
 800473e:	4770      	bx	lr
